#lang racket

(require "../pda-to-pda-risc/macro-glue.rkt")

(provide (all-defined-out))

(define ansi-c-pda-risc
  (pda->pda-risc/no-syntax
   (TOKENS IDENTIFIER CONSTANT STRING_LITERAL SIZEOF PTR_OP INC_OP DEC_OP LEFT_OP
           RIGHT_OP LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP MUL_ASSIGN DIV_ASSIGN
           MOD_ASSIGN ADD_ASSIGN SUB_ASSIGN LEFT_ASSIGN RIGHT_ASSIGN AND_ASSIGN
           XOR_ASSIGN OR_ASSIGN TYPE_NAME TYPEDEF EXTERN STATIC AUTO REGISTER
           CHAR SHORT INT LONG SIGNED UNSIGNED FLOAT DOUBLE CONST VOLATILE VOID
           STRUCT UNION ENUM ELLIPSIS CASE DEFAULT IF ELSE SWITCH WHILE DO FOR
           GOTO CONTINUE BREAK RETURN LPAREN RPAREN LBRACK RBRACK LCURLY RCURLY
           DOT COMMA AMPERSAND STAR PLUS MINUS TWIDLE BANG FORWARD_SLASH
           LESS_OP GREATER_OP CARROT PIPE QMARK COLON EQUAL_SIGN SEMICOLON *EOF*)
   (START s1)
   (EOS *EOF*)
                                        ; (RULE r1 *start (_ _) #f)
   (RULE r2 primary_expression (IDENTIFIER) 0)
   (RULE r3 primary_expression (CONSTANT) 0)
   (RULE r4 primary_expression (STRING_LITERAL) 0)
   (RULE r5 primary_expression (LPAREN expression RPAREN) 0)
   (RULE r6 postfix_expression (primary_expression) 0)
   (RULE r7 postfix_expression (postfix_expression LBRACK expression RBRACK) 0)
   (RULE r8 postfix_expression (postfix_expression LPAREN RPAREN) 0)
   (RULE r9 postfix_expression (postfix_expression LPAREN argument_expression_list RPAREN) 0)
   (RULE r10 postfix_expression (postfix_expression DOT IDENTIFIER) 0)
   (RULE r11 postfix_expression (postfix_expression PTR_OP IDENTIFIER) 0)
   (RULE r12 postfix_expression (postfix_expression INC_OP) 0)
   (RULE r13 postfix_expression (postfix_expression DEC_OP) 0)
   (RULE r14 argument_expression_list (assignment_expression) 0)
   (RULE r15 argument_expression_list (argument_expression_list COMMA assignment_expression) 0)
   (RULE r16 unary_expression (postfix_expression) 0)
   (RULE r17 unary_expression (INC_OP unary_expression) 0)
   (RULE r18 unary_expression (DEC_OP unary_expression) 0)
   (RULE r19 unary_expression (unary_operator cast_expression) 0)
   (RULE r20 unary_expression (SIZEOF unary_expression) 0)
   (RULE r21 unary_expression (SIZEOF LPAREN type_name RPAREN) 0)
   (RULE r22 unary_operator (AMPERSAND) 0)
   (RULE r23 unary_operator (STAR) 0)
   (RULE r24 unary_operator (PLUS) 0)
   (RULE r25 unary_operator (MINUS) 0)
   (RULE r26 unary_operator (TWIDLE) 0)
   (RULE r27 unary_operator (BANG) 0)
   (RULE r28 cast_expression (unary_expression) 0)
   (RULE r29 cast_expression (LPAREN type_name RPAREN cast_expression) 0)
   (RULE r30 multiplicative_expression (cast_expression) 0)
   (RULE r31 multiplicative_expression (multiplicative_expression STAR cast_expression) 0)
   (RULE r32 multiplicative_expression (multiplicative_expression FORWARD_SLASH cast_expression) 0)
   (RULE r33 multiplicative_expression (multiplicative_expression AMPERSAND cast_expression) 0)
   (RULE r34 additive_expression (multiplicative_expression) 0)
   (RULE r35 additive_expression (additive_expression PLUS multiplicative_expression) 0)
   (RULE r36 additive_expression (additive_expression MINUS multiplicative_expression) 0)
   (RULE r37 shift_expression (additive_expression) 0)
   (RULE r38 shift_expression (shift_expression LEFT_OP additive_expression) 0)
   (RULE r39 shift_expression (shift_expression RIGHT_OP additive_expression) 0)
   (RULE r40 relational_expression (shift_expression) 0)
   (RULE r41 relational_expression (relational_expression LESS_OP shift_expression) 0)
   (RULE r42 relational_expression (relational_expression GREATER_OP shift_expression) 0)
   (RULE r43 relational_expression (relational_expression LE_OP shift_expression) 0)
   (RULE r44 relational_expression (relational_expression GE_OP shift_expression) 0)
   (RULE r45 equality_expression (relational_expression) 0)
   (RULE r46 equality_expression (equality_expression EQ_OP relational_expression) 0)
   (RULE r47 equality_expression (equality_expression NE_OP relational_expression) 0)
   (RULE r48 and_expression (equality_expression) 0)
   (RULE r49 and_expression (and_expression AMPERSAND equality_expression) 0)
   (RULE r50 exclusive_or_expression (and_expression) 0)
   (RULE r51 exclusive_or_expression (exclusive_or_expression CARROT and_expression) 0)
   (RULE r52 inclusive_or_expression (exclusive_or_expression) 0)
   (RULE r53 inclusive_or_expression (inclusive_or_expression PIPE exclusive_or_expression) 0)
   (RULE r54 logical_and_expression (inclusive_or_expression) 0)
   (RULE r55 logical_and_expression (logical_and_expression AND_OP inclusive_or_expression) 0)
   (RULE r56 logical_or_expression (logical_and_expression) 0)
   (RULE r57 logical_or_expression (logical_or_expression OR_OP logical_and_expression) 0)
   (RULE r58 conditional_expression (logical_or_expression) 0)
   (RULE r59 conditional_expression (logical_or_expression QMARK expression COLON conditional_expression) 0)
   (RULE r60 assignment_expression (conditional_expression) 0)
   (RULE r61 assignment_expression (unary_expression assignment_operator assignment_expression) 0)
   (RULE r62 assignment_operator (EQUAL_SIGN) 0)
   (RULE r63 assignment_operator (MUL_ASSIGN) 0)
   (RULE r64 assignment_operator (DIV_ASSIGN) 0)
   (RULE r65 assignment_operator (MOD_ASSIGN) 0)
   (RULE r66 assignment_operator (ADD_ASSIGN) 0)
   (RULE r67 assignment_operator (SUB_ASSIGN) 0)
   (RULE r68 assignment_operator (LEFT_ASSIGN) 0)
   (RULE r69 assignment_operator (RIGHT_ASSIGN) 0)
   (RULE r70 assignment_operator (AND_ASSIGN) 0)
   (RULE r71 assignment_operator (XOR_ASSIGN) 0)
   (RULE r72 assignment_operator (OR_ASSIGN) 0)
   (RULE r73 expression (assignment_expression) 0)
   (RULE r74 expression (expression COMMA assignment_expression) 0)
   (RULE r75 constant_expression (conditional_expression) 0)
   (RULE r76 declaration (declaration_specifiers SEMICOLON) 0)
   (RULE r77 declaration (declaration_specifiers init_declarator_list SEMICOLON) 0)
   (RULE r78 declaration_specifiers (storage_class_specifier) 0)
   (RULE r79 declaration_specifiers (storage_class_specifier declaration_specifiers) 0)
   (RULE r80 declaration_specifiers (type_specifier) 0)
   (RULE r81 declaration_specifiers (type_specifier declaration_specifiers) 0)
   (RULE r82 declaration_specifiers (type_qualifier) 0)
   (RULE r83 declaration_specifiers (type_qualifier declaration_specifiers) 0)
   (RULE r84 init_declarator_list (init_declarator) 0)
   (RULE r85 init_declarator_list (init_declarator_list COMMA init_declarator) 0)
   (RULE r86 init_declarator (declarator) 0)
   (RULE r87 init_declarator (declarator EQUAL_SIGN initializer) 0)
   (RULE r88 storage_class_specifier (TYPEDEF) 0)
   (RULE r89 storage_class_specifier (EXTERN) 0)
   (RULE r90 storage_class_specifier (STATIC) 0)
   (RULE r91 storage_class_specifier (AUTO) 0)
   (RULE r92 storage_class_specifier (REGISTER) 0)
   (RULE r93 type_specifier (VOID) 0)
   (RULE r94 type_specifier (CHAR) 0)
   (RULE r95 type_specifier (SHORT) 0)
   (RULE r96 type_specifier (INT) 0)
   (RULE r97 type_specifier (LONG) 0)
   (RULE r98 type_specifier (FLOAT) 0)
   (RULE r99 type_specifier (DOUBLE) 0)
   (RULE r100 type_specifier (SIGNED) 0)
   (RULE r101 type_specifier (UNSIGNED) 0)
   (RULE r102 type_specifier (struct_or_union_specifier) 0)
   (RULE r103 type_specifier (enum_specifier) 0)
   (RULE r104 type_specifier (TYPE_NAME) 0)
   (RULE r105 struct_or_union_specifier (struct_or_union IDENTIFIER LCURLY struct_declaration_list RCURLY) 0)
   (RULE r106 struct_or_union_specifier (struct_or_union LCURLY struct_declaration_list RCURLY) 0)
   (RULE r107 struct_or_union_specifier (struct_or_union IDENTIFIER) 0)
   (RULE r108 struct_or_union (STRUCT) 0)
   (RULE r109 struct_or_union (UNION) 0)
   (RULE r110 struct_declaration_list (struct_declaration) 0)
   (RULE r111 struct_declaration_list (struct_declaration_list struct_declaration) 0)
   (RULE r112 struct_declaration (specifier_qualifier_list struct_declarator_list SEMICOLON) 0)
   (RULE r113 specifier_qualifier_list (type_specifier specifier_qualifier_list) 0)
   (RULE r114 specifier_qualifier_list (type_specifier) 0)
   (RULE r115 specifier_qualifier_list (type_qualifier specifier_qualifier_list) 0)
   (RULE r116 specifier_qualifier_list (type_qualifier) 0)
   (RULE r117 struct_declarator_list (struct_declarator) 0)
   (RULE r118 struct_declarator_list (struct_declarator_list COMMA struct_declarator) 0)
   (RULE r119 struct_declarator (declarator) 0)
   (RULE r120 struct_declarator (COLON constant_expression) 0)
   (RULE r121 struct_declarator (declarator COLON constant_expression) 0)
   (RULE r122 enum_specifier (ENUM LCURLY enumerator_list RCURLY) 0)
   (RULE r123 enum_specifier (ENUM IDENTIFIER LCURLY enumerator_list RCURLY) 0)
   (RULE r124 enum_specifier (ENUM IDENTIFIER) 0)
   (RULE r125 enumerator_list (enumerator) 0)
   (RULE r126 enumerator_list (enumerator_list COMMA enumerator) 0)
   (RULE r127 enumerator (IDENTIFIER) 0)
   (RULE r128 enumerator (IDENTIFIER EQUAL_SIGN constant_expression) 0)
   (RULE r129 type_qualifier (CONST) 0)
   (RULE r130 type_qualifier (VOLATILE) 0)
   (RULE r131 declarator (pointer direct_declarator) 0)
   (RULE r132 declarator (direct_declarator) 0)
   (RULE r133 direct_declarator (IDENTIFIER) 0)
   (RULE r134 direct_declarator (LPAREN declarator RPAREN) 0)
   (RULE r135 direct_declarator (direct_declarator LBRACK constant_expression RBRACK) 0)
   (RULE r136 direct_declarator (direct_declarator LBRACK RBRACK) 0)
   (RULE r137 direct_declarator (direct_declarator LPAREN parameter_type_list RPAREN) 0)
   (RULE r138 direct_declarator (direct_declarator LPAREN identifier_list RPAREN) 0)
   (RULE r139 direct_declarator (direct_declarator LPAREN RPAREN) 0)
   (RULE r140 pointer (STAR) 0)
   (RULE r141 pointer (STAR type_qualifier_list) 0)
   (RULE r142 pointer (STAR pointer) 0)
   (RULE r143 pointer (STAR type_qualifier_list pointer) 0)
   (RULE r144 type_qualifier_list (type_qualifier) 0)
   (RULE r145 type_qualifier_list (type_qualifier_list type_qualifier) 0)
   (RULE r146 parameter_type_list (parameter_list) 0)
   (RULE r147 parameter_type_list (parameter_list COMMA ELLIPSIS) 0)
   (RULE r148 parameter_list (parameter_declaration) 0)
   (RULE r149 parameter_list (parameter_list COMMA parameter_declaration) 0)
   (RULE r150 parameter_declaration (declaration_specifiers declarator) 0)
   (RULE r151 parameter_declaration (declaration_specifiers abstract_declarator) 0)
   (RULE r152 parameter_declaration (declaration_specifiers) 0)
   (RULE r153 identifier_list (IDENTIFIER) 0)
   (RULE r154 identifier_list (identifier_list COMMA IDENTIFIER) 0)
   (RULE r155 type_name (specifier_qualifier_list) 0)
   (RULE r156 type_name (specifier_qualifier_list abstract_declarator) 0)
   (RULE r157 abstract_declarator (pointer) 0)
   (RULE r158 abstract_declarator (direct_abstract_declarator) 0)
   (RULE r159 abstract_declarator (pointer direct_abstract_declarator) 0)
   (RULE r160 direct_abstract_declarator (LPAREN abstract_declarator RPAREN) 0)
   (RULE r161 direct_abstract_declarator (LBRACK RBRACK) 0)
   (RULE r162 direct_abstract_declarator (LBRACK constant_expression RBRACK) 0)
   (RULE r163 direct_abstract_declarator (direct_abstract_declarator LBRACK RBRACK) 0)
   (RULE r164 direct_abstract_declarator (direct_abstract_declarator LBRACK constant_expression RBRACK) 0)
   (RULE r165 direct_abstract_declarator (LPAREN RPAREN) 0)
   (RULE r166 direct_abstract_declarator (LPAREN parameter_type_list RPAREN) 0)
   (RULE r167 direct_abstract_declarator (direct_abstract_declarator LPAREN RPAREN) 0)
   (RULE r168 direct_abstract_declarator (direct_abstract_declarator LPAREN parameter_type_list RPAREN) 0)
   (RULE r169 initializer (assignment_expression) 0)
   (RULE r170 initializer (LCURLY initializer_list RCURLY) 0)
   (RULE r171 initializer (LCURLY initializer_list COMMA RCURLY) 0)
   (RULE r172 initializer_list (initializer) 0)
   (RULE r173 initializer_list (initializer_list COMMA initializer) 0)
   (RULE r174 statement (labeled_statement) 0)
   (RULE r175 statement (compound_statement) 0)
   (RULE r176 statement (expression_statement) 0)
   (RULE r177 statement (selection_statement) 0)
   (RULE r178 statement (iteration_statement) 0)
   (RULE r179 statement (jump_statement) 0)
   (RULE r180 labeled_statement (IDENTIFIER COLON statement) 0)
   (RULE r181 labeled_statement (CASE constant_expression COLON statement) 0)
   (RULE r182 labeled_statement (DEFAULT COLON statement) 0)
   (RULE r183 compound_statement (LCURLY RCURLY) 0)
   (RULE r184 compound_statement (LCURLY statement_list RCURLY) 0)
   (RULE r185 compound_statement (LCURLY declaration_list RCURLY) 0)
   (RULE r186 compound_statement (LCURLY declaration_list statement_list RCURLY) 0)
   (RULE r187 declaration_list (declaration) 0)
   (RULE r188 declaration_list (declaration_list declaration) 0)
   (RULE r189 statement_list (statement) 0)
   (RULE r190 statement_list (statement_list statement) 0)
   (RULE r191 expression_statement (SEMICOLON) 0)
   (RULE r192 expression_statement (expression SEMICOLON) 0)
   (RULE r193 selection_statement (IF LPAREN expression RPAREN statement) 0)
   (RULE r194 selection_statement (IF LPAREN expression RPAREN statement-1 ELSE statement-2) 0)
   (RULE r195 selection_statement (SWITCH LPAREN expression RPAREN statement) 0)
   (RULE r196 iteration_statement (WHILE LPAREN expression RPAREN statement) 0)
   (RULE r197 iteration_statement (DO statement WHILE LPAREN expression RPAREN SEMICOLON) 0)
   (RULE r198 iteration_statement (FOR LPAREN expression_statement-1 expression_statement-2 RPAREN statement) 0)
   (RULE r199 iteration_statement (FOR LPAREN expression_statement-1 expression_statement-2 expression RPAREN statement) 0)
   (RULE r200 jump_statement (GOTO IDENTIFIER SEMICOLON) 0)
   (RULE r201 jump_statement (CONTINUE SEMICOLON) 0)
   (RULE r202 jump_statement (BREAK SEMICOLON) 0)
   (RULE r203 jump_statement (RETURN SEMICOLON) 0)
   (RULE r204 jump_statement (RETURN expression SEMICOLON) 0)
   (RULE r205 translation_unit (external_declaration) 0)
   (RULE r206 translation_unit (translation_unit external_declaration) 0)
   (RULE r207 external_declaration (function_definition) 0)
   (RULE r208 external_declaration (declaration) 0)
   (RULE r209 function_definition (declaration_specifiers declarator declaration_list compound_statement) 0)
   (RULE r210 function_definition (declaration_specifiers declarator compound_statement) 0)
   (RULE r211 function_definition (declarator declaration_list compound_statement) 0)
   (RULE r212 function_definition (declarator compound_statement) 0)
   (STATE s0 (COMMENT function_definition "=>" "." declarator compound_statement) (COMMENT function_definition "=>" "." declarator declaration_list compound_statement) (COMMENT function_definition "=>" "." declaration_specifiers declarator compound_statement) (COMMENT function_definition "=>" "." declaration_specifiers declarator declaration_list compound_statement) (COMMENT external_declaration "=>" "." declaration) (COMMENT external_declaration "=>" "." function_definition) (COMMENT translation_unit "=>" "." translation_unit external_declaration) (COMMENT translation_unit "=>" "." external_declaration) (COMMENT pointer "=>" "." STAR type_qualifier_list pointer) (COMMENT pointer "=>" "." STAR pointer) (COMMENT pointer "=>" "." STAR type_qualifier_list) (COMMENT pointer "=>" "." STAR) (COMMENT direct_declarator "=>" "." direct_declarator LPAREN RPAREN) (COMMENT direct_declarator "=>" "." direct_declarator LPAREN identifier_list RPAREN) (COMMENT direct_declarator "=>" "." direct_declarator LPAREN parameter_type_list RPAREN) (COMMENT direct_declarator "=>" "." direct_declarator LBRACK RBRACK) (COMMENT direct_declarator "=>" "." direct_declarator LBRACK constant_expression RBRACK) (COMMENT direct_declarator "=>" "." LPAREN declarator RPAREN) (COMMENT direct_declarator "=>" "." IDENTIFIER) (COMMENT declarator "=>" "." direct_declarator) (COMMENT declarator "=>" "." pointer direct_declarator) (COMMENT type_qualifier "=>" "." VOLATILE) (COMMENT type_qualifier "=>" "." CONST) (COMMENT enum_specifier "=>" "." ENUM IDENTIFIER) (COMMENT enum_specifier "=>" "." ENUM IDENTIFIER LCURLY enumerator_list RCURLY) (COMMENT enum_specifier "=>" "." ENUM LCURLY enumerator_list RCURLY) (COMMENT struct_or_union "=>" "." UNION) (COMMENT struct_or_union "=>" "." STRUCT) (COMMENT struct_or_union_specifier "=>" "." struct_or_union IDENTIFIER) (COMMENT struct_or_union_specifier "=>" "." struct_or_union LCURLY struct_declaration_list RCURLY) (COMMENT struct_or_union_specifier "=>" "." struct_or_union IDENTIFIER LCURLY struct_declaration_list RCURLY) (COMMENT type_specifier "=>" "." TYPE_NAME) (COMMENT type_specifier "=>" "." enum_specifier) (COMMENT type_specifier "=>" "." struct_or_union_specifier) (COMMENT type_specifier "=>" "." UNSIGNED) (COMMENT type_specifier "=>" "." SIGNED) (COMMENT type_specifier "=>" "." DOUBLE) (COMMENT type_specifier "=>" "." FLOAT) (COMMENT type_specifier "=>" "." LONG) (COMMENT type_specifier "=>" "." INT) (COMMENT type_specifier "=>" "." SHORT) (COMMENT type_specifier "=>" "." CHAR) (COMMENT type_specifier "=>" "." VOID) (COMMENT storage_class_specifier "=>" "." REGISTER) (COMMENT storage_class_specifier "=>" "." AUTO) (COMMENT storage_class_specifier "=>" "." STATIC) (COMMENT storage_class_specifier "=>" "." EXTERN) (COMMENT storage_class_specifier "=>" "." TYPEDEF) (COMMENT declaration_specifiers "=>" "." type_qualifier declaration_specifiers) (COMMENT declaration_specifiers "=>" "." type_qualifier) (COMMENT declaration_specifiers "=>" "." type_specifier declaration_specifiers) (COMMENT declaration_specifiers "=>" "." type_specifier) (COMMENT declaration_specifiers "=>" "." storage_class_specifier declaration_specifiers) (COMMENT declaration_specifiers "=>" "." storage_class_specifier) (COMMENT declaration "=>" "." declaration_specifiers init_declarator_list SEMICOLON) (COMMENT declaration "=>" "." declaration_specifiers SEMICOLON) (COMMENT *start "=>" "." translation_unit *EOF*) (SHIFT (IDENTIFIER) s15) (SHIFT (TYPE_NAME) s16) (SHIFT (TYPEDEF) s17) (SHIFT (EXTERN) s18) (SHIFT (STATIC) s19) (SHIFT (AUTO) s20) (SHIFT (REGISTER) s21) (SHIFT (CHAR) s22) (SHIFT (SHORT) s23) (SHIFT (INT) s24) (SHIFT (LONG) s25) (SHIFT (SIGNED) s26) (SHIFT (UNSIGNED) s27) (SHIFT (FLOAT) s28) (SHIFT (DOUBLE) s29) (SHIFT (CONST) s30) (SHIFT (VOLATILE) s31) (SHIFT (VOID) s32) (SHIFT (STRUCT) s33) (SHIFT (UNION) s34) (SHIFT (ENUM) s35) (SHIFT (LPAREN) s36) (SHIFT (STAR) s37) (GOTO declaration s1) (GOTO declaration_specifiers s2) (GOTO storage_class_specifier s3) (GOTO type_specifier s4) (GOTO struct_or_union_specifier s5) (GOTO struct_or_union s6) (GOTO enum_specifier s7) (GOTO type_qualifier s8) (GOTO declarator s9) (GOTO direct_declarator s10) (GOTO pointer s11) (GOTO translation_unit s12) (GOTO external_declaration s13) (GOTO function_definition s14))
   (STATE s1 (COMMENT external_declaration "=>" declaration ".") (REDUCE () r208))
   (STATE s2 (COMMENT function_definition "=>" declaration_specifiers "." declarator compound_statement) (COMMENT function_definition "=>" declaration_specifiers "." declarator declaration_list compound_statement) (COMMENT pointer "=>" "." STAR type_qualifier_list pointer) (COMMENT pointer "=>" "." STAR pointer) (COMMENT pointer "=>" "." STAR type_qualifier_list) (COMMENT pointer "=>" "." STAR) (COMMENT direct_declarator "=>" "." direct_declarator LPAREN RPAREN) (COMMENT direct_declarator "=>" "." direct_declarator LPAREN identifier_list RPAREN) (COMMENT direct_declarator "=>" "." direct_declarator LPAREN parameter_type_list RPAREN) (COMMENT direct_declarator "=>" "." direct_declarator LBRACK RBRACK) (COMMENT direct_declarator "=>" "." direct_declarator LBRACK constant_expression RBRACK) (COMMENT direct_declarator "=>" "." LPAREN declarator RPAREN) (COMMENT direct_declarator "=>" "." IDENTIFIER) (COMMENT declarator "=>" "." direct_declarator) (COMMENT declarator "=>" "." pointer direct_declarator) (COMMENT init_declarator "=>" "." declarator EQUAL_SIGN initializer) (COMMENT init_declarator "=>" "." declarator) (COMMENT init_declarator_list "=>" "." init_declarator_list COMMA init_declarator) (COMMENT init_declarator_list "=>" "." init_declarator) (COMMENT declaration "=>" declaration_specifiers "." init_declarator_list SEMICOLON) (COMMENT declaration "=>" declaration_specifiers "." SEMICOLON) (SHIFT (IDENTIFIER) s15) (SHIFT (LPAREN) s36) (SHIFT (STAR) s37) (SHIFT (SEMICOLON) s309) (GOTO init_declarator_list s306) (GOTO init_declarator s307) (GOTO declarator s346) (GOTO direct_declarator s10) (GOTO pointer s11))
   (STATE s3 (COMMENT type_qualifier "=>" "." VOLATILE) (COMMENT type_qualifier "=>" "." CONST) (COMMENT enum_specifier "=>" "." ENUM IDENTIFIER) (COMMENT enum_specifier "=>" "." ENUM IDENTIFIER LCURLY enumerator_list RCURLY) (COMMENT enum_specifier "=>" "." ENUM LCURLY enumerator_list RCURLY) (COMMENT struct_or_union "=>" "." UNION) (COMMENT struct_or_union "=>" "." STRUCT) (COMMENT struct_or_union_specifier "=>" "." struct_or_union IDENTIFIER) (COMMENT struct_or_union_specifier "=>" "." struct_or_union LCURLY struct_declaration_list RCURLY) (COMMENT struct_or_union_specifier "=>" "." struct_or_union IDENTIFIER LCURLY struct_declaration_list RCURLY) (COMMENT type_specifier "=>" "." TYPE_NAME) (COMMENT type_specifier "=>" "." enum_specifier) (COMMENT type_specifier "=>" "." struct_or_union_specifier) (COMMENT type_specifier "=>" "." UNSIGNED) (COMMENT type_specifier "=>" "." SIGNED) (COMMENT type_specifier "=>" "." DOUBLE) (COMMENT type_specifier "=>" "." FLOAT) (COMMENT type_specifier "=>" "." LONG) (COMMENT type_specifier "=>" "." INT) (COMMENT type_specifier "=>" "." SHORT) (COMMENT type_specifier "=>" "." CHAR) (COMMENT type_specifier "=>" "." VOID) (COMMENT storage_class_specifier "=>" "." REGISTER) (COMMENT storage_class_specifier "=>" "." AUTO) (COMMENT storage_class_specifier "=>" "." STATIC) (COMMENT storage_class_specifier "=>" "." EXTERN) (COMMENT storage_class_specifier "=>" "." TYPEDEF) (COMMENT declaration_specifiers "=>" "." type_qualifier declaration_specifiers) (COMMENT declaration_specifiers "=>" "." type_qualifier) (COMMENT declaration_specifiers "=>" "." type_specifier declaration_specifiers) (COMMENT declaration_specifiers "=>" "." type_specifier) (COMMENT declaration_specifiers "=>" storage_class_specifier "." declaration_specifiers) (COMMENT declaration_specifiers "=>" "." storage_class_specifier declaration_specifiers) (COMMENT declaration_specifiers "=>" storage_class_specifier ".") (COMMENT declaration_specifiers "=>" "." storage_class_specifier) (REDUCE (IDENTIFIER) r78) (SHIFT (TYPE_NAME) s16) (SHIFT (TYPEDEF) s17) (SHIFT (EXTERN) s18) (SHIFT (STATIC) s19) (SHIFT (AUTO) s20) (SHIFT (REGISTER) s21) (SHIFT (CHAR) s22) (SHIFT (SHORT) s23) (SHIFT (INT) s24) (SHIFT (LONG) s25) (SHIFT (SIGNED) s26) (SHIFT (UNSIGNED) s27) (SHIFT (FLOAT) s28) (SHIFT (DOUBLE) s29) (SHIFT (CONST) s30) (SHIFT (VOLATILE) s31) (SHIFT (VOID) s32) (SHIFT (STRUCT) s33) (SHIFT (UNION) s34) (SHIFT (ENUM) s35) (REDUCE (LPAREN) r78) (REDUCE (RPAREN) r78) (REDUCE (LBRACK) r78) (REDUCE (COMMA) r78) (REDUCE (STAR) r78) (REDUCE (SEMICOLON) r78) (GOTO declaration_specifiers s345) (GOTO storage_class_specifier s3) (GOTO type_specifier s4) (GOTO struct_or_union_specifier s5) (GOTO struct_or_union s6) (GOTO enum_specifier s7) (GOTO type_qualifier s8))
   (STATE s4 (COMMENT type_qualifier "=>" "." VOLATILE) (COMMENT type_qualifier "=>" "." CONST) (COMMENT enum_specifier "=>" "." ENUM IDENTIFIER) (COMMENT enum_specifier "=>" "." ENUM IDENTIFIER LCURLY enumerator_list RCURLY) (COMMENT enum_specifier "=>" "." ENUM LCURLY enumerator_list RCURLY) (COMMENT struct_or_union "=>" "." UNION) (COMMENT struct_or_union "=>" "." STRUCT) (COMMENT struct_or_union_specifier "=>" "." struct_or_union IDENTIFIER) (COMMENT struct_or_union_specifier "=>" "." struct_or_union LCURLY struct_declaration_list RCURLY) (COMMENT struct_or_union_specifier "=>" "." struct_or_union IDENTIFIER LCURLY struct_declaration_list RCURLY) (COMMENT type_specifier "=>" "." TYPE_NAME) (COMMENT type_specifier "=>" "." enum_specifier) (COMMENT type_specifier "=>" "." struct_or_union_specifier) (COMMENT type_specifier "=>" "." UNSIGNED) (COMMENT type_specifier "=>" "." SIGNED) (COMMENT type_specifier "=>" "." DOUBLE) (COMMENT type_specifier "=>" "." FLOAT) (COMMENT type_specifier "=>" "." LONG) (COMMENT type_specifier "=>" "." INT) (COMMENT type_specifier "=>" "." SHORT) (COMMENT type_specifier "=>" "." CHAR) (COMMENT type_specifier "=>" "." VOID) (COMMENT storage_class_specifier "=>" "." REGISTER) (COMMENT storage_class_specifier "=>" "." AUTO) (COMMENT storage_class_specifier "=>" "." STATIC) (COMMENT storage_class_specifier "=>" "." EXTERN) (COMMENT storage_class_specifier "=>" "." TYPEDEF) (COMMENT declaration_specifiers "=>" "." type_qualifier declaration_specifiers) (COMMENT declaration_specifiers "=>" "." type_qualifier) (COMMENT declaration_specifiers "=>" type_specifier "." declaration_specifiers) (COMMENT declaration_specifiers "=>" "." type_specifier declaration_specifiers) (COMMENT declaration_specifiers "=>" type_specifier ".") (COMMENT declaration_specifiers "=>" "." type_specifier) (COMMENT declaration_specifiers "=>" "." storage_class_specifier declaration_specifiers) (COMMENT declaration_specifiers "=>" "." storage_class_specifier) (REDUCE (IDENTIFIER) r80) (SHIFT (TYPE_NAME) s16) (SHIFT (TYPEDEF) s17) (SHIFT (EXTERN) s18) (SHIFT (STATIC) s19) (SHIFT (AUTO) s20) (SHIFT (REGISTER) s21) (SHIFT (CHAR) s22) (SHIFT (SHORT) s23) (SHIFT (INT) s24) (SHIFT (LONG) s25) (SHIFT (SIGNED) s26) (SHIFT (UNSIGNED) s27) (SHIFT (FLOAT) s28) (SHIFT (DOUBLE) s29) (SHIFT (CONST) s30) (SHIFT (VOLATILE) s31) (SHIFT (VOID) s32) (SHIFT (STRUCT) s33) (SHIFT (UNION) s34) (SHIFT (ENUM) s35) (REDUCE (LPAREN) r80) (REDUCE (RPAREN) r80) (REDUCE (LBRACK) r80) (REDUCE (COMMA) r80) (REDUCE (STAR) r80) (REDUCE (SEMICOLON) r80) (GOTO declaration_specifiers s344) (GOTO storage_class_specifier s3) (GOTO type_specifier s4) (GOTO struct_or_union_specifier s5) (GOTO struct_or_union s6) (GOTO enum_specifier s7) (GOTO type_qualifier s8))
   (STATE s5 (COMMENT type_specifier "=>" struct_or_union_specifier ".") (REDUCE () r102))
   (STATE s6 (COMMENT struct_or_union_specifier "=>" struct_or_union "." IDENTIFIER) (COMMENT struct_or_union_specifier "=>" struct_or_union "." LCURLY struct_declaration_list RCURLY) (COMMENT struct_or_union_specifier "=>" struct_or_union "." IDENTIFIER LCURLY struct_declaration_list RCURLY) (SHIFT (IDENTIFIER) s324) (SHIFT (LCURLY) s325))
   (STATE s7 (COMMENT type_specifier "=>" enum_specifier ".") (REDUCE () r103))
   (STATE s8 (COMMENT type_qualifier "=>" "." VOLATILE) (COMMENT type_qualifier "=>" "." CONST) (COMMENT enum_specifier "=>" "." ENUM IDENTIFIER) (COMMENT enum_specifier "=>" "." ENUM IDENTIFIER LCURLY enumerator_list RCURLY) (COMMENT enum_specifier "=>" "." ENUM LCURLY enumerator_list RCURLY) (COMMENT struct_or_union "=>" "." UNION) (COMMENT struct_or_union "=>" "." STRUCT) (COMMENT struct_or_union_specifier "=>" "." struct_or_union IDENTIFIER) (COMMENT struct_or_union_specifier "=>" "." struct_or_union LCURLY struct_declaration_list RCURLY) (COMMENT struct_or_union_specifier "=>" "." struct_or_union IDENTIFIER LCURLY struct_declaration_list RCURLY) (COMMENT type_specifier "=>" "." TYPE_NAME) (COMMENT type_specifier "=>" "." enum_specifier) (COMMENT type_specifier "=>" "." struct_or_union_specifier) (COMMENT type_specifier "=>" "." UNSIGNED) (COMMENT type_specifier "=>" "." SIGNED) (COMMENT type_specifier "=>" "." DOUBLE) (COMMENT type_specifier "=>" "." FLOAT) (COMMENT type_specifier "=>" "." LONG) (COMMENT type_specifier "=>" "." INT) (COMMENT type_specifier "=>" "." SHORT) (COMMENT type_specifier "=>" "." CHAR) (COMMENT type_specifier "=>" "." VOID) (COMMENT storage_class_specifier "=>" "." REGISTER) (COMMENT storage_class_specifier "=>" "." AUTO) (COMMENT storage_class_specifier "=>" "." STATIC) (COMMENT storage_class_specifier "=>" "." EXTERN) (COMMENT storage_class_specifier "=>" "." TYPEDEF) (COMMENT declaration_specifiers "=>" type_qualifier "." declaration_specifiers) (COMMENT declaration_specifiers "=>" "." type_qualifier declaration_specifiers) (COMMENT declaration_specifiers "=>" type_qualifier ".") (COMMENT declaration_specifiers "=>" "." type_qualifier) (COMMENT declaration_specifiers "=>" "." type_specifier declaration_specifiers) (COMMENT declaration_specifiers "=>" "." type_specifier) (COMMENT declaration_specifiers "=>" "." storage_class_specifier declaration_specifiers) (COMMENT declaration_specifiers "=>" "." storage_class_specifier) (REDUCE (IDENTIFIER) r82) (SHIFT (TYPE_NAME) s16) (SHIFT (TYPEDEF) s17) (SHIFT (EXTERN) s18) (SHIFT (STATIC) s19) (SHIFT (AUTO) s20) (SHIFT (REGISTER) s21) (SHIFT (CHAR) s22) (SHIFT (SHORT) s23) (SHIFT (INT) s24) (SHIFT (LONG) s25) (SHIFT (SIGNED) s26) (SHIFT (UNSIGNED) s27) (SHIFT (FLOAT) s28) (SHIFT (DOUBLE) s29) (SHIFT (CONST) s30) (SHIFT (VOLATILE) s31) (SHIFT (VOID) s32) (SHIFT (STRUCT) s33) (SHIFT (UNION) s34) (SHIFT (ENUM) s35) (REDUCE (LPAREN) r82) (REDUCE (RPAREN) r82) (REDUCE (LBRACK) r82) (REDUCE (COMMA) r82) (REDUCE (STAR) r82) (REDUCE (SEMICOLON) r82) (GOTO declaration_specifiers s323) (GOTO storage_class_specifier s3) (GOTO type_specifier s4) (GOTO struct_or_union_specifier s5) (GOTO struct_or_union s6) (GOTO enum_specifier s7) (GOTO type_qualifier s8))
   (STATE s9 (COMMENT function_definition "=>" declarator "." compound_statement) (COMMENT function_definition "=>" declarator "." declaration_list compound_statement) (COMMENT declaration_list "=>" "." declaration_list declaration) (COMMENT declaration_list "=>" "." declaration) (COMMENT compound_statement "=>" "." LCURLY declaration_list statement_list RCURLY) (COMMENT compound_statement "=>" "." LCURLY declaration_list RCURLY) (COMMENT compound_statement "=>" "." LCURLY statement_list RCURLY) (COMMENT compound_statement "=>" "." LCURLY RCURLY) (COMMENT type_qualifier "=>" "." VOLATILE) (COMMENT type_qualifier "=>" "." CONST) (COMMENT enum_specifier "=>" "." ENUM IDENTIFIER) (COMMENT enum_specifier "=>" "." ENUM IDENTIFIER LCURLY enumerator_list RCURLY) (COMMENT enum_specifier "=>" "." ENUM LCURLY enumerator_list RCURLY) (COMMENT struct_or_union "=>" "." UNION) (COMMENT struct_or_union "=>" "." STRUCT) (COMMENT struct_or_union_specifier "=>" "." struct_or_union IDENTIFIER) (COMMENT struct_or_union_specifier "=>" "." struct_or_union LCURLY struct_declaration_list RCURLY) (COMMENT struct_or_union_specifier "=>" "." struct_or_union IDENTIFIER LCURLY struct_declaration_list RCURLY) (COMMENT type_specifier "=>" "." TYPE_NAME) (COMMENT type_specifier "=>" "." enum_specifier) (COMMENT type_specifier "=>" "." struct_or_union_specifier) (COMMENT type_specifier "=>" "." UNSIGNED) (COMMENT type_specifier "=>" "." SIGNED) (COMMENT type_specifier "=>" "." DOUBLE) (COMMENT type_specifier "=>" "." FLOAT) (COMMENT type_specifier "=>" "." LONG) (COMMENT type_specifier "=>" "." INT) (COMMENT type_specifier "=>" "." SHORT) (COMMENT type_specifier "=>" "." CHAR) (COMMENT type_specifier "=>" "." VOID) (COMMENT storage_class_specifier "=>" "." REGISTER) (COMMENT storage_class_specifier "=>" "." AUTO) (COMMENT storage_class_specifier "=>" "." STATIC) (COMMENT storage_class_specifier "=>" "." EXTERN) (COMMENT storage_class_specifier "=>" "." TYPEDEF) (COMMENT declaration_specifiers "=>" "." type_qualifier declaration_specifiers) (COMMENT declaration_specifiers "=>" "." type_qualifier) (COMMENT declaration_specifiers "=>" "." type_specifier declaration_specifiers) (COMMENT declaration_specifiers "=>" "." type_specifier) (COMMENT declaration_specifiers "=>" "." storage_class_specifier declaration_specifiers) (COMMENT declaration_specifiers "=>" "." storage_class_specifier) (COMMENT declaration "=>" "." declaration_specifiers init_declarator_list SEMICOLON) (COMMENT declaration "=>" "." declaration_specifiers SEMICOLON) (SHIFT (TYPE_NAME) s16) (SHIFT (TYPEDEF) s17) (SHIFT (EXTERN) s18) (SHIFT (STATIC) s19) (SHIFT (AUTO) s20) (SHIFT (REGISTER) s21) (SHIFT (CHAR) s22) (SHIFT (SHORT) s23) (SHIFT (INT) s24) (SHIFT (LONG) s25) (SHIFT (SIGNED) s26) (SHIFT (UNSIGNED) s27) (SHIFT (FLOAT) s28) (SHIFT (DOUBLE) s29) (SHIFT (CONST) s30) (SHIFT (VOLATILE) s31) (SHIFT (VOID) s32) (SHIFT (STRUCT) s33) (SHIFT (UNION) s34) (SHIFT (ENUM) s35) (SHIFT (LCURLY) s231) (GOTO declaration s227) (GOTO declaration_specifiers s228) (GOTO storage_class_specifier s3) (GOTO type_specifier s4) (GOTO struct_or_union_specifier s5) (GOTO struct_or_union s6) (GOTO enum_specifier s7) (GOTO type_qualifier s8) (GOTO compound_statement s229) (GOTO declaration_list s230))
   (STATE s10 (COMMENT direct_declarator "=>" direct_declarator "." LPAREN RPAREN) (COMMENT direct_declarator "=>" direct_declarator "." LPAREN identifier_list RPAREN) (COMMENT direct_declarator "=>" direct_declarator "." LPAREN parameter_type_list RPAREN) (COMMENT direct_declarator "=>" direct_declarator "." LBRACK RBRACK) (COMMENT direct_declarator "=>" direct_declarator "." LBRACK constant_expression RBRACK) (COMMENT declarator "=>" direct_declarator ".") (REDUCE (TYPE_NAME) r132) (REDUCE (TYPEDEF) r132) (REDUCE (EXTERN) r132) (REDUCE (STATIC) r132) (REDUCE (AUTO) r132) (REDUCE (REGISTER) r132) (REDUCE (CHAR) r132) (REDUCE (SHORT) r132) (REDUCE (INT) r132) (REDUCE (LONG) r132) (REDUCE (SIGNED) r132) (REDUCE (UNSIGNED) r132) (REDUCE (FLOAT) r132) (REDUCE (DOUBLE) r132) (REDUCE (CONST) r132) (REDUCE (VOLATILE) r132) (REDUCE (VOID) r132) (REDUCE (STRUCT) r132) (REDUCE (UNION) r132) (REDUCE (ENUM) r132) (SHIFT (LPAREN) s125) (REDUCE (RPAREN) r132) (SHIFT (LBRACK) s126) (REDUCE (LCURLY) r132) (REDUCE (COMMA) r132) (REDUCE (COLON) r132) (REDUCE (EQUAL_SIGN) r132) (REDUCE (SEMICOLON) r132))
   (STATE s11 (COMMENT direct_declarator "=>" "." direct_declarator LPAREN RPAREN) (COMMENT direct_declarator "=>" "." direct_declarator LPAREN identifier_list RPAREN) (COMMENT direct_declarator "=>" "." direct_declarator LPAREN parameter_type_list RPAREN) (COMMENT direct_declarator "=>" "." direct_declarator LBRACK RBRACK) (COMMENT direct_declarator "=>" "." direct_declarator LBRACK constant_expression RBRACK) (COMMENT direct_declarator "=>" "." LPAREN declarator RPAREN) (COMMENT direct_declarator "=>" "." IDENTIFIER) (COMMENT declarator "=>" pointer "." direct_declarator) (SHIFT (IDENTIFIER) s15) (SHIFT (LPAREN) s36) (GOTO direct_declarator s115))
   (STATE s12 (COMMENT function_definition "=>" "." declarator compound_statement) (COMMENT function_definition "=>" "." declarator declaration_list compound_statement) (COMMENT function_definition "=>" "." declaration_specifiers declarator compound_statement) (COMMENT function_definition "=>" "." declaration_specifiers declarator declaration_list compound_statement) (COMMENT external_declaration "=>" "." declaration) (COMMENT external_declaration "=>" "." function_definition) (COMMENT translation_unit "=>" translation_unit "." external_declaration) (COMMENT pointer "=>" "." STAR type_qualifier_list pointer) (COMMENT pointer "=>" "." STAR pointer) (COMMENT pointer "=>" "." STAR type_qualifier_list) (COMMENT pointer "=>" "." STAR) (COMMENT direct_declarator "=>" "." direct_declarator LPAREN RPAREN) (COMMENT direct_declarator "=>" "." direct_declarator LPAREN identifier_list RPAREN) (COMMENT direct_declarator "=>" "." direct_declarator LPAREN parameter_type_list RPAREN) (COMMENT direct_declarator "=>" "." direct_declarator LBRACK RBRACK) (COMMENT direct_declarator "=>" "." direct_declarator LBRACK constant_expression RBRACK) (COMMENT direct_declarator "=>" "." LPAREN declarator RPAREN) (COMMENT direct_declarator "=>" "." IDENTIFIER) (COMMENT declarator "=>" "." direct_declarator) (COMMENT declarator "=>" "." pointer direct_declarator) (COMMENT type_qualifier "=>" "." VOLATILE) (COMMENT type_qualifier "=>" "." CONST) (COMMENT enum_specifier "=>" "." ENUM IDENTIFIER) (COMMENT enum_specifier "=>" "." ENUM IDENTIFIER LCURLY enumerator_list RCURLY) (COMMENT enum_specifier "=>" "." ENUM LCURLY enumerator_list RCURLY) (COMMENT struct_or_union "=>" "." UNION) (COMMENT struct_or_union "=>" "." STRUCT) (COMMENT struct_or_union_specifier "=>" "." struct_or_union IDENTIFIER) (COMMENT struct_or_union_specifier "=>" "." struct_or_union LCURLY struct_declaration_list RCURLY) (COMMENT struct_or_union_specifier "=>" "." struct_or_union IDENTIFIER LCURLY struct_declaration_list RCURLY) (COMMENT type_specifier "=>" "." TYPE_NAME) (COMMENT type_specifier "=>" "." enum_specifier) (COMMENT type_specifier "=>" "." struct_or_union_specifier) (COMMENT type_specifier "=>" "." UNSIGNED) (COMMENT type_specifier "=>" "." SIGNED) (COMMENT type_specifier "=>" "." DOUBLE) (COMMENT type_specifier "=>" "." FLOAT) (COMMENT type_specifier "=>" "." LONG) (COMMENT type_specifier "=>" "." INT) (COMMENT type_specifier "=>" "." SHORT) (COMMENT type_specifier "=>" "." CHAR) (COMMENT type_specifier "=>" "." VOID) (COMMENT storage_class_specifier "=>" "." REGISTER) (COMMENT storage_class_specifier "=>" "." AUTO) (COMMENT storage_class_specifier "=>" "." STATIC) (COMMENT storage_class_specifier "=>" "." EXTERN) (COMMENT storage_class_specifier "=>" "." TYPEDEF) (COMMENT declaration_specifiers "=>" "." type_qualifier declaration_specifiers) (COMMENT declaration_specifiers "=>" "." type_qualifier) (COMMENT declaration_specifiers "=>" "." type_specifier declaration_specifiers) (COMMENT declaration_specifiers "=>" "." type_specifier) (COMMENT declaration_specifiers "=>" "." storage_class_specifier declaration_specifiers) (COMMENT declaration_specifiers "=>" "." storage_class_specifier) (COMMENT declaration "=>" "." declaration_specifiers init_declarator_list SEMICOLON) (COMMENT declaration "=>" "." declaration_specifiers SEMICOLON) (COMMENT *start "=>" translation_unit "." *EOF*) (SHIFT (IDENTIFIER) s15) (SHIFT (TYPE_NAME) s16) (SHIFT (TYPEDEF) s17) (SHIFT (EXTERN) s18) (SHIFT (STATIC) s19) (SHIFT (AUTO) s20) (SHIFT (REGISTER) s21) (SHIFT (CHAR) s22) (SHIFT (SHORT) s23) (SHIFT (INT) s24) (SHIFT (LONG) s25) (SHIFT (SIGNED) s26) (SHIFT (UNSIGNED) s27) (SHIFT (FLOAT) s28) (SHIFT (DOUBLE) s29) (SHIFT (CONST) s30) (SHIFT (VOLATILE) s31) (SHIFT (VOID) s32) (SHIFT (STRUCT) s33) (SHIFT (UNION) s34) (SHIFT (ENUM) s35) (SHIFT (LPAREN) s36) (SHIFT (STAR) s37) (ACCEPT (*EOF*)) (GOTO declaration s1) (GOTO declaration_specifiers s2) (GOTO storage_class_specifier s3) (GOTO type_specifier s4) (GOTO struct_or_union_specifier s5) (GOTO struct_or_union s6) (GOTO enum_specifier s7) (GOTO type_qualifier s8) (GOTO declarator s9) (GOTO direct_declarator s10) (GOTO pointer s11) (GOTO external_declaration s225) (GOTO function_definition s14))
   (STATE s13 (COMMENT translation_unit "=>" external_declaration ".") (REDUCE () r205))
   (STATE s14 (COMMENT external_declaration "=>" function_definition ".") (REDUCE () r207))
   (STATE s15 (COMMENT direct_declarator "=>" IDENTIFIER ".") (REDUCE () r133))
   (STATE s16 (COMMENT type_specifier "=>" TYPE_NAME ".") (REDUCE () r104))
   (STATE s17 (COMMENT storage_class_specifier "=>" TYPEDEF ".") (REDUCE () r88))
   (STATE s18 (COMMENT storage_class_specifier "=>" EXTERN ".") (REDUCE () r89))
   (STATE s19 (COMMENT storage_class_specifier "=>" STATIC ".") (REDUCE () r90))
   (STATE s20 (COMMENT storage_class_specifier "=>" AUTO ".") (REDUCE () r91))
   (STATE s21 (COMMENT storage_class_specifier "=>" REGISTER ".") (REDUCE () r92))
   (STATE s22 (COMMENT type_specifier "=>" CHAR ".") (REDUCE () r94))
   (STATE s23 (COMMENT type_specifier "=>" SHORT ".") (REDUCE () r95))
   (STATE s24 (COMMENT type_specifier "=>" INT ".") (REDUCE () r96))
   (STATE s25 (COMMENT type_specifier "=>" LONG ".") (REDUCE () r97))
   (STATE s26 (COMMENT type_specifier "=>" SIGNED ".") (REDUCE () r100))
   (STATE s27 (COMMENT type_specifier "=>" UNSIGNED ".") (REDUCE () r101))
   (STATE s28 (COMMENT type_specifier "=>" FLOAT ".") (REDUCE () r98))
   (STATE s29 (COMMENT type_specifier "=>" DOUBLE ".") (REDUCE () r99))
   (STATE s30 (COMMENT type_qualifier "=>" CONST ".") (REDUCE () r129))
   (STATE s31 (COMMENT type_qualifier "=>" VOLATILE ".") (REDUCE () r130))
   (STATE s32 (COMMENT type_specifier "=>" VOID ".") (REDUCE () r93))
   (STATE s33 (COMMENT struct_or_union "=>" STRUCT ".") (REDUCE () r108))
   (STATE s34 (COMMENT struct_or_union "=>" UNION ".") (REDUCE () r109))
   (STATE s35 (COMMENT enum_specifier "=>" ENUM "." IDENTIFIER) (COMMENT enum_specifier "=>" ENUM "." IDENTIFIER LCURLY enumerator_list RCURLY) (COMMENT enum_specifier "=>" ENUM "." LCURLY enumerator_list RCURLY) (SHIFT (IDENTIFIER) s45) (SHIFT (LCURLY) s46))
   (STATE s36 (COMMENT pointer "=>" "." STAR type_qualifier_list pointer) (COMMENT pointer "=>" "." STAR pointer) (COMMENT pointer "=>" "." STAR type_qualifier_list) (COMMENT pointer "=>" "." STAR) (COMMENT direct_declarator "=>" "." direct_declarator LPAREN RPAREN) (COMMENT direct_declarator "=>" "." direct_declarator LPAREN identifier_list RPAREN) (COMMENT direct_declarator "=>" "." direct_declarator LPAREN parameter_type_list RPAREN) (COMMENT direct_declarator "=>" "." direct_declarator LBRACK RBRACK) (COMMENT direct_declarator "=>" "." direct_declarator LBRACK constant_expression RBRACK) (COMMENT direct_declarator "=>" LPAREN "." declarator RPAREN) (COMMENT direct_declarator "=>" "." LPAREN declarator RPAREN) (COMMENT direct_declarator "=>" "." IDENTIFIER) (COMMENT declarator "=>" "." direct_declarator) (COMMENT declarator "=>" "." pointer direct_declarator) (SHIFT (IDENTIFIER) s15) (SHIFT (LPAREN) s36) (SHIFT (STAR) s37) (GOTO declarator s43) (GOTO direct_declarator s10) (GOTO pointer s11))
   (STATE s37 (COMMENT type_qualifier_list "=>" "." type_qualifier_list type_qualifier) (COMMENT type_qualifier_list "=>" "." type_qualifier) (COMMENT pointer "=>" STAR "." type_qualifier_list pointer) (COMMENT pointer "=>" "." STAR type_qualifier_list pointer) (COMMENT pointer "=>" STAR "." pointer) (COMMENT pointer "=>" "." STAR pointer) (COMMENT pointer "=>" STAR "." type_qualifier_list) (COMMENT pointer "=>" "." STAR type_qualifier_list) (COMMENT pointer "=>" STAR ".") (COMMENT pointer "=>" "." STAR) (COMMENT type_qualifier "=>" "." VOLATILE) (COMMENT type_qualifier "=>" "." CONST) (REDUCE (IDENTIFIER) r140) (SHIFT (CONST) s30) (SHIFT (VOLATILE) s31) (REDUCE (LPAREN) r140) (REDUCE (RPAREN) r140) (REDUCE (LBRACK) r140) (REDUCE (COMMA) r140) (SHIFT (STAR) s37) (GOTO type_qualifier s38) (GOTO pointer s39) (GOTO type_qualifier_list s40))
   (STATE s38 (COMMENT type_qualifier_list "=>" type_qualifier ".") (REDUCE () r144))
   (STATE s39 (COMMENT pointer "=>" STAR pointer ".") (REDUCE () r142))
   (STATE s40 (COMMENT type_qualifier_list "=>" type_qualifier_list "." type_qualifier) (COMMENT pointer "=>" STAR type_qualifier_list "." pointer) (COMMENT pointer "=>" "." STAR type_qualifier_list pointer) (COMMENT pointer "=>" "." STAR pointer) (COMMENT pointer "=>" STAR type_qualifier_list ".") (COMMENT pointer "=>" "." STAR type_qualifier_list) (COMMENT pointer "=>" "." STAR) (COMMENT type_qualifier "=>" "." VOLATILE) (COMMENT type_qualifier "=>" "." CONST) (REDUCE (IDENTIFIER) r141) (SHIFT (CONST) s30) (SHIFT (VOLATILE) s31) (REDUCE (LPAREN) r141) (REDUCE (RPAREN) r141) (REDUCE (LBRACK) r141) (REDUCE (COMMA) r141) (SHIFT (STAR) s37) (GOTO type_qualifier s41) (GOTO pointer s42))
   (STATE s41 (COMMENT type_qualifier_list "=>" type_qualifier_list type_qualifier ".") (REDUCE () r145))
   (STATE s42 (COMMENT pointer "=>" STAR type_qualifier_list pointer ".") (REDUCE () r143))
   (STATE s43 (COMMENT direct_declarator "=>" LPAREN declarator "." RPAREN) (SHIFT (RPAREN) s44))
   (STATE s44 (COMMENT direct_declarator "=>" LPAREN declarator RPAREN ".") (REDUCE () r134))
   (STATE s45 (COMMENT enum_specifier "=>" ENUM IDENTIFIER ".") (COMMENT enum_specifier "=>" ENUM IDENTIFIER "." LCURLY enumerator_list RCURLY) (REDUCE (IDENTIFIER) r124) (REDUCE (TYPE_NAME) r124) (REDUCE (TYPEDEF) r124) (REDUCE (EXTERN) r124) (REDUCE (STATIC) r124) (REDUCE (AUTO) r124) (REDUCE (REGISTER) r124) (REDUCE (CHAR) r124) (REDUCE (SHORT) r124) (REDUCE (INT) r124) (REDUCE (LONG) r124) (REDUCE (SIGNED) r124) (REDUCE (UNSIGNED) r124) (REDUCE (FLOAT) r124) (REDUCE (DOUBLE) r124) (REDUCE (CONST) r124) (REDUCE (VOLATILE) r124) (REDUCE (VOID) r124) (REDUCE (STRUCT) r124) (REDUCE (UNION) r124) (REDUCE (ENUM) r124) (REDUCE (LPAREN) r124) (REDUCE (RPAREN) r124) (REDUCE (LBRACK) r124) (SHIFT (LCURLY) s222) (REDUCE (COMMA) r124) (REDUCE (STAR) r124) (REDUCE (COLON) r124) (REDUCE (SEMICOLON) r124))
   (STATE s46 (COMMENT enumerator "=>" "." IDENTIFIER EQUAL_SIGN constant_expression) (COMMENT enumerator "=>" "." IDENTIFIER) (COMMENT enumerator_list "=>" "." enumerator_list COMMA enumerator) (COMMENT enumerator_list "=>" "." enumerator) (COMMENT enum_specifier "=>" ENUM LCURLY "." enumerator_list RCURLY) (SHIFT (IDENTIFIER) s49) (GOTO enumerator_list s47) (GOTO enumerator s48))
   (STATE s47 (COMMENT enumerator_list "=>" enumerator_list "." COMMA enumerator) (COMMENT enum_specifier "=>" ENUM LCURLY enumerator_list "." RCURLY) (SHIFT (RCURLY) s219) (SHIFT (COMMA) s220))
   (STATE s48 (COMMENT enumerator_list "=>" enumerator ".") (REDUCE () r125))
   (STATE s49 (COMMENT enumerator "=>" IDENTIFIER "." EQUAL_SIGN constant_expression) (COMMENT enumerator "=>" IDENTIFIER ".") (REDUCE (RCURLY) r127) (REDUCE (COMMA) r127) (SHIFT (EQUAL_SIGN) s50))
   (STATE s50 (COMMENT enumerator "=>" IDENTIFIER EQUAL_SIGN "." constant_expression) (COMMENT constant_expression "=>" "." conditional_expression) (COMMENT conditional_expression "=>" "." logical_or_expression QMARK expression COLON conditional_expression) (COMMENT conditional_expression "=>" "." logical_or_expression) (COMMENT logical_or_expression "=>" "." logical_or_expression OR_OP logical_and_expression) (COMMENT logical_or_expression "=>" "." logical_and_expression) (COMMENT logical_and_expression "=>" "." logical_and_expression AND_OP inclusive_or_expression) (COMMENT logical_and_expression "=>" "." inclusive_or_expression) (COMMENT inclusive_or_expression "=>" "." inclusive_or_expression PIPE exclusive_or_expression) (COMMENT inclusive_or_expression "=>" "." exclusive_or_expression) (COMMENT exclusive_or_expression "=>" "." exclusive_or_expression CARROT and_expression) (COMMENT exclusive_or_expression "=>" "." and_expression) (COMMENT and_expression "=>" "." and_expression AMPERSAND equality_expression) (COMMENT and_expression "=>" "." equality_expression) (COMMENT equality_expression "=>" "." equality_expression NE_OP relational_expression) (COMMENT equality_expression "=>" "." equality_expression EQ_OP relational_expression) (COMMENT equality_expression "=>" "." relational_expression) (COMMENT relational_expression "=>" "." relational_expression GE_OP shift_expression) (COMMENT relational_expression "=>" "." relational_expression LE_OP shift_expression) (COMMENT relational_expression "=>" "." relational_expression GREATER_OP shift_expression) (COMMENT relational_expression "=>" "." relational_expression LESS_OP shift_expression) (COMMENT relational_expression "=>" "." shift_expression) (COMMENT shift_expression "=>" "." shift_expression RIGHT_OP additive_expression) (COMMENT shift_expression "=>" "." shift_expression LEFT_OP additive_expression) (COMMENT shift_expression "=>" "." additive_expression) (COMMENT additive_expression "=>" "." additive_expression MINUS multiplicative_expression) (COMMENT additive_expression "=>" "." additive_expression PLUS multiplicative_expression) (COMMENT additive_expression "=>" "." multiplicative_expression) (COMMENT multiplicative_expression "=>" "." multiplicative_expression AMPERSAND cast_expression) (COMMENT multiplicative_expression "=>" "." multiplicative_expression FORWARD_SLASH cast_expression) (COMMENT multiplicative_expression "=>" "." multiplicative_expression STAR cast_expression) (COMMENT multiplicative_expression "=>" "." cast_expression) (COMMENT cast_expression "=>" "." LPAREN type_name RPAREN cast_expression) (COMMENT cast_expression "=>" "." unary_expression) (COMMENT unary_operator "=>" "." BANG) (COMMENT unary_operator "=>" "." TWIDLE) (COMMENT unary_operator "=>" "." MINUS) (COMMENT unary_operator "=>" "." PLUS) (COMMENT unary_operator "=>" "." STAR) (COMMENT unary_operator "=>" "." AMPERSAND) (COMMENT unary_expression "=>" "." SIZEOF LPAREN type_name RPAREN) (COMMENT unary_expression "=>" "." SIZEOF unary_expression) (COMMENT unary_expression "=>" "." unary_operator cast_expression) (COMMENT unary_expression "=>" "." DEC_OP unary_expression) (COMMENT unary_expression "=>" "." INC_OP unary_expression) (COMMENT unary_expression "=>" "." postfix_expression) (COMMENT postfix_expression "=>" "." postfix_expression DEC_OP) (COMMENT postfix_expression "=>" "." postfix_expression INC_OP) (COMMENT postfix_expression "=>" "." postfix_expression PTR_OP IDENTIFIER) (COMMENT postfix_expression "=>" "." postfix_expression DOT IDENTIFIER) (COMMENT postfix_expression "=>" "." postfix_expression LPAREN argument_expression_list RPAREN) (COMMENT postfix_expression "=>" "." postfix_expression LPAREN RPAREN) (COMMENT postfix_expression "=>" "." postfix_expression LBRACK expression RBRACK) (COMMENT postfix_expression "=>" "." primary_expression) (COMMENT primary_expression "=>" "." LPAREN expression RPAREN) (COMMENT primary_expression "=>" "." STRING_LITERAL) (COMMENT primary_expression "=>" "." CONSTANT) (COMMENT primary_expression "=>" "." IDENTIFIER) (SHIFT (IDENTIFIER) s68) (SHIFT (CONSTANT) s69) (SHIFT (STRING_LITERAL) s70) (SHIFT (SIZEOF) s71) (SHIFT (INC_OP) s72) (SHIFT (DEC_OP) s73) (SHIFT (LPAREN) s74) (SHIFT (AMPERSAND) s75) (SHIFT (STAR) s76) (SHIFT (PLUS) s77) (SHIFT (MINUS) s78) (SHIFT (TWIDLE) s79) (SHIFT (BANG) s80) (GOTO primary_expression s51) (GOTO postfix_expression s52) (GOTO unary_expression s53) (GOTO unary_operator s54) (GOTO cast_expression s55) (GOTO multiplicative_expression s56) (GOTO additive_expression s57) (GOTO shift_expression s58) (GOTO relational_expression s59) (GOTO equality_expression s60) (GOTO and_expression s61) (GOTO exclusive_or_expression s62) (GOTO inclusive_or_expression s63) (GOTO logical_and_expression s64) (GOTO logical_or_expression s65) (GOTO conditional_expression s66) (GOTO constant_expression s67))
   (STATE s51 (COMMENT postfix_expression "=>" primary_expression ".") (REDUCE () r6))
   (STATE s52 (COMMENT unary_expression "=>" postfix_expression ".") (COMMENT postfix_expression "=>" postfix_expression "." DEC_OP) (COMMENT postfix_expression "=>" postfix_expression "." INC_OP) (COMMENT postfix_expression "=>" postfix_expression "." PTR_OP IDENTIFIER) (COMMENT postfix_expression "=>" postfix_expression "." DOT IDENTIFIER) (COMMENT postfix_expression "=>" postfix_expression "." LPAREN argument_expression_list RPAREN) (COMMENT postfix_expression "=>" postfix_expression "." LPAREN RPAREN) (COMMENT postfix_expression "=>" postfix_expression "." LBRACK expression RBRACK) (SHIFT (PTR_OP) s203) (SHIFT (INC_OP) s204) (SHIFT (DEC_OP) s205) (REDUCE (LEFT_OP) r16) (REDUCE (RIGHT_OP) r16) (REDUCE (LE_OP) r16) (REDUCE (GE_OP) r16) (REDUCE (EQ_OP) r16) (REDUCE (NE_OP) r16) (REDUCE (AND_OP) r16) (REDUCE (OR_OP) r16) (REDUCE (MUL_ASSIGN) r16) (REDUCE (DIV_ASSIGN) r16) (REDUCE (MOD_ASSIGN) r16) (REDUCE (ADD_ASSIGN) r16) (REDUCE (SUB_ASSIGN) r16) (REDUCE (LEFT_ASSIGN) r16) (REDUCE (RIGHT_ASSIGN) r16) (REDUCE (AND_ASSIGN) r16) (REDUCE (XOR_ASSIGN) r16) (REDUCE (OR_ASSIGN) r16) (SHIFT (LPAREN) s206) (REDUCE (RPAREN) r16) (SHIFT (LBRACK) s207) (REDUCE (RBRACK) r16) (REDUCE (RCURLY) r16) (SHIFT (DOT) s208) (REDUCE (COMMA) r16) (REDUCE (AMPERSAND) r16) (REDUCE (STAR) r16) (REDUCE (PLUS) r16) (REDUCE (MINUS) r16) (REDUCE (FORWARD_SLASH) r16) (REDUCE (LESS_OP) r16) (REDUCE (GREATER_OP) r16) (REDUCE (CARROT) r16) (REDUCE (PIPE) r16) (REDUCE (QMARK) r16) (REDUCE (COLON) r16) (REDUCE (EQUAL_SIGN) r16) (REDUCE (SEMICOLON) r16))
   (STATE s53 (COMMENT cast_expression "=>" unary_expression ".") (REDUCE () r28))
   (STATE s54 (COMMENT cast_expression "=>" "." LPAREN type_name RPAREN cast_expression) (COMMENT cast_expression "=>" "." unary_expression) (COMMENT unary_operator "=>" "." BANG) (COMMENT unary_operator "=>" "." TWIDLE) (COMMENT unary_operator "=>" "." MINUS) (COMMENT unary_operator "=>" "." PLUS) (COMMENT unary_operator "=>" "." STAR) (COMMENT unary_operator "=>" "." AMPERSAND) (COMMENT unary_expression "=>" "." SIZEOF LPAREN type_name RPAREN) (COMMENT unary_expression "=>" "." SIZEOF unary_expression) (COMMENT unary_expression "=>" unary_operator "." cast_expression) (COMMENT unary_expression "=>" "." unary_operator cast_expression) (COMMENT unary_expression "=>" "." DEC_OP unary_expression) (COMMENT unary_expression "=>" "." INC_OP unary_expression) (COMMENT unary_expression "=>" "." postfix_expression) (COMMENT postfix_expression "=>" "." postfix_expression DEC_OP) (COMMENT postfix_expression "=>" "." postfix_expression INC_OP) (COMMENT postfix_expression "=>" "." postfix_expression PTR_OP IDENTIFIER) (COMMENT postfix_expression "=>" "." postfix_expression DOT IDENTIFIER) (COMMENT postfix_expression "=>" "." postfix_expression LPAREN argument_expression_list RPAREN) (COMMENT postfix_expression "=>" "." postfix_expression LPAREN RPAREN) (COMMENT postfix_expression "=>" "." postfix_expression LBRACK expression RBRACK) (COMMENT postfix_expression "=>" "." primary_expression) (COMMENT primary_expression "=>" "." LPAREN expression RPAREN) (COMMENT primary_expression "=>" "." STRING_LITERAL) (COMMENT primary_expression "=>" "." CONSTANT) (COMMENT primary_expression "=>" "." IDENTIFIER) (SHIFT (IDENTIFIER) s68) (SHIFT (CONSTANT) s69) (SHIFT (STRING_LITERAL) s70) (SHIFT (SIZEOF) s71) (SHIFT (INC_OP) s72) (SHIFT (DEC_OP) s73) (SHIFT (LPAREN) s74) (SHIFT (AMPERSAND) s75) (SHIFT (STAR) s76) (SHIFT (PLUS) s77) (SHIFT (MINUS) s78) (SHIFT (TWIDLE) s79) (SHIFT (BANG) s80) (GOTO primary_expression s51) (GOTO postfix_expression s52) (GOTO unary_expression s53) (GOTO unary_operator s54) (GOTO cast_expression s202))
   (STATE s55 (COMMENT multiplicative_expression "=>" cast_expression ".") (REDUCE () r30))
   (STATE s56 (COMMENT additive_expression "=>" multiplicative_expression ".") (COMMENT multiplicative_expression "=>" multiplicative_expression "." AMPERSAND cast_expression) (COMMENT multiplicative_expression "=>" multiplicative_expression "." FORWARD_SLASH cast_expression) (COMMENT multiplicative_expression "=>" multiplicative_expression "." STAR cast_expression) (REDUCE (LEFT_OP) r34) (REDUCE (RIGHT_OP) r34) (REDUCE (LE_OP) r34) (REDUCE (GE_OP) r34) (REDUCE (EQ_OP) r34) (REDUCE (NE_OP) r34) (REDUCE (AND_OP) r34) (REDUCE (OR_OP) r34) (REDUCE (RPAREN) r34) (REDUCE (RBRACK) r34) (REDUCE (RCURLY) r34) (REDUCE (COMMA) r34) (COMMENT (REDUCE (AMPERSAND) r34)) (SHIFT (AMPERSAND) s190) (SHIFT (STAR) s191) (REDUCE (PLUS) r34) (REDUCE (MINUS) r34) (SHIFT (FORWARD_SLASH) s192) (REDUCE (LESS_OP) r34) (REDUCE (GREATER_OP) r34) (REDUCE (CARROT) r34) (REDUCE (PIPE) r34) (REDUCE (QMARK) r34) (REDUCE (COLON) r34) (REDUCE (SEMICOLON) r34))
   (STATE s57 (COMMENT shift_expression "=>" additive_expression ".") (COMMENT additive_expression "=>" additive_expression "." MINUS multiplicative_expression) (COMMENT additive_expression "=>" additive_expression "." PLUS multiplicative_expression) (REDUCE (LEFT_OP) r37) (REDUCE (RIGHT_OP) r37) (REDUCE (LE_OP) r37) (REDUCE (GE_OP) r37) (REDUCE (EQ_OP) r37) (REDUCE (NE_OP) r37) (REDUCE (AND_OP) r37) (REDUCE (OR_OP) r37) (REDUCE (RPAREN) r37) (REDUCE (RBRACK) r37) (REDUCE (RCURLY) r37) (REDUCE (COMMA) r37) (REDUCE (AMPERSAND) r37) (SHIFT (PLUS) s187) (SHIFT (MINUS) s188) (REDUCE (LESS_OP) r37) (REDUCE (GREATER_OP) r37) (REDUCE (CARROT) r37) (REDUCE (PIPE) r37) (REDUCE (QMARK) r37) (REDUCE (COLON) r37) (REDUCE (SEMICOLON) r37))
   (STATE s58 (COMMENT relational_expression "=>" shift_expression ".") (COMMENT shift_expression "=>" shift_expression "." RIGHT_OP additive_expression) (COMMENT shift_expression "=>" shift_expression "." LEFT_OP additive_expression) (SHIFT (LEFT_OP) s184) (SHIFT (RIGHT_OP) s185) (REDUCE (LE_OP) r40) (REDUCE (GE_OP) r40) (REDUCE (EQ_OP) r40) (REDUCE (NE_OP) r40) (REDUCE (AND_OP) r40) (REDUCE (OR_OP) r40) (REDUCE (RPAREN) r40) (REDUCE (RBRACK) r40) (REDUCE (RCURLY) r40) (REDUCE (COMMA) r40) (REDUCE (AMPERSAND) r40) (REDUCE (LESS_OP) r40) (REDUCE (GREATER_OP) r40) (REDUCE (CARROT) r40) (REDUCE (PIPE) r40) (REDUCE (QMARK) r40) (REDUCE (COLON) r40) (REDUCE (SEMICOLON) r40))
   (STATE s59 (COMMENT equality_expression "=>" relational_expression ".") (COMMENT relational_expression "=>" relational_expression "." GE_OP shift_expression) (COMMENT relational_expression "=>" relational_expression "." LE_OP shift_expression) (COMMENT relational_expression "=>" relational_expression "." GREATER_OP shift_expression) (COMMENT relational_expression "=>" relational_expression "." LESS_OP shift_expression) (SHIFT (LE_OP) s179) (SHIFT (GE_OP) s180) (REDUCE (EQ_OP) r45) (REDUCE (NE_OP) r45) (REDUCE (AND_OP) r45) (REDUCE (OR_OP) r45) (REDUCE (RPAREN) r45) (REDUCE (RBRACK) r45) (REDUCE (RCURLY) r45) (REDUCE (COMMA) r45) (REDUCE (AMPERSAND) r45) (SHIFT (LESS_OP) s181) (SHIFT (GREATER_OP) s182) (REDUCE (CARROT) r45) (REDUCE (PIPE) r45) (REDUCE (QMARK) r45) (REDUCE (COLON) r45) (REDUCE (SEMICOLON) r45))
   (STATE s60 (COMMENT and_expression "=>" equality_expression ".") (COMMENT equality_expression "=>" equality_expression "." NE_OP relational_expression) (COMMENT equality_expression "=>" equality_expression "." EQ_OP relational_expression) (SHIFT (EQ_OP) s176) (SHIFT (NE_OP) s177) (REDUCE (AND_OP) r48) (REDUCE (OR_OP) r48) (REDUCE (RPAREN) r48) (REDUCE (RBRACK) r48) (REDUCE (RCURLY) r48) (REDUCE (COMMA) r48) (REDUCE (AMPERSAND) r48) (REDUCE (CARROT) r48) (REDUCE (PIPE) r48) (REDUCE (QMARK) r48) (REDUCE (COLON) r48) (REDUCE (SEMICOLON) r48))
   (STATE s61 (COMMENT exclusive_or_expression "=>" and_expression ".") (COMMENT and_expression "=>" and_expression "." AMPERSAND equality_expression) (REDUCE (AND_OP) r50) (REDUCE (OR_OP) r50) (REDUCE (RPAREN) r50) (REDUCE (RBRACK) r50) (REDUCE (RCURLY) r50) (REDUCE (COMMA) r50) (SHIFT (AMPERSAND) s174) (REDUCE (CARROT) r50) (REDUCE (PIPE) r50) (REDUCE (QMARK) r50) (REDUCE (COLON) r50) (REDUCE (SEMICOLON) r50))
   (STATE s62 (COMMENT inclusive_or_expression "=>" exclusive_or_expression ".") (COMMENT exclusive_or_expression "=>" exclusive_or_expression "." CARROT and_expression) (REDUCE (AND_OP) r52) (REDUCE (OR_OP) r52) (REDUCE (RPAREN) r52) (REDUCE (RBRACK) r52) (REDUCE (RCURLY) r52) (REDUCE (COMMA) r52) (SHIFT (CARROT) s172) (REDUCE (PIPE) r52) (REDUCE (QMARK) r52) (REDUCE (COLON) r52) (REDUCE (SEMICOLON) r52))
   (STATE s63 (COMMENT logical_and_expression "=>" inclusive_or_expression ".") (COMMENT inclusive_or_expression "=>" inclusive_or_expression "." PIPE exclusive_or_expression) (REDUCE (AND_OP) r54) (REDUCE (OR_OP) r54) (REDUCE (RPAREN) r54) (REDUCE (RBRACK) r54) (REDUCE (RCURLY) r54) (REDUCE (COMMA) r54) (SHIFT (PIPE) s170) (REDUCE (QMARK) r54) (REDUCE (COLON) r54) (REDUCE (SEMICOLON) r54))
   (STATE s64 (COMMENT logical_or_expression "=>" logical_and_expression ".") (COMMENT logical_and_expression "=>" logical_and_expression "." AND_OP inclusive_or_expression) (SHIFT (AND_OP) s168) (REDUCE (OR_OP) r56) (REDUCE (RPAREN) r56) (REDUCE (RBRACK) r56) (REDUCE (RCURLY) r56) (REDUCE (COMMA) r56) (REDUCE (QMARK) r56) (REDUCE (COLON) r56) (REDUCE (SEMICOLON) r56))
   (STATE s65 (COMMENT conditional_expression "=>" logical_or_expression "." QMARK expression COLON conditional_expression) (COMMENT conditional_expression "=>" logical_or_expression ".") (COMMENT logical_or_expression "=>" logical_or_expression "." OR_OP logical_and_expression) (SHIFT (OR_OP) s162) (REDUCE (RPAREN) r58) (REDUCE (RBRACK) r58) (REDUCE (RCURLY) r58) (REDUCE (COMMA) r58) (SHIFT (QMARK) s163) (REDUCE (COLON) r58) (REDUCE (SEMICOLON) r58))
   (STATE s66 (COMMENT constant_expression "=>" conditional_expression ".") (REDUCE () r75))
   (STATE s67 (COMMENT enumerator "=>" IDENTIFIER EQUAL_SIGN constant_expression ".") (REDUCE () r128))
   (STATE s68 (COMMENT primary_expression "=>" IDENTIFIER ".") (REDUCE () r2))
   (STATE s69 (COMMENT primary_expression "=>" CONSTANT ".") (REDUCE () r3))
   (STATE s70 (COMMENT primary_expression "=>" STRING_LITERAL ".") (REDUCE () r4))
   (STATE s71 (COMMENT unary_operator "=>" "." BANG) (COMMENT unary_operator "=>" "." TWIDLE) (COMMENT unary_operator "=>" "." MINUS) (COMMENT unary_operator "=>" "." PLUS) (COMMENT unary_operator "=>" "." STAR) (COMMENT unary_operator "=>" "." AMPERSAND) (COMMENT unary_expression "=>" SIZEOF "." LPAREN type_name RPAREN) (COMMENT unary_expression "=>" "." SIZEOF LPAREN type_name RPAREN) (COMMENT unary_expression "=>" SIZEOF "." unary_expression) (COMMENT unary_expression "=>" "." SIZEOF unary_expression) (COMMENT unary_expression "=>" "." unary_operator cast_expression) (COMMENT unary_expression "=>" "." DEC_OP unary_expression) (COMMENT unary_expression "=>" "." INC_OP unary_expression) (COMMENT unary_expression "=>" "." postfix_expression) (COMMENT postfix_expression "=>" "." postfix_expression DEC_OP) (COMMENT postfix_expression "=>" "." postfix_expression INC_OP) (COMMENT postfix_expression "=>" "." postfix_expression PTR_OP IDENTIFIER) (COMMENT postfix_expression "=>" "." postfix_expression DOT IDENTIFIER) (COMMENT postfix_expression "=>" "." postfix_expression LPAREN argument_expression_list RPAREN) (COMMENT postfix_expression "=>" "." postfix_expression LPAREN RPAREN) (COMMENT postfix_expression "=>" "." postfix_expression LBRACK expression RBRACK) (COMMENT postfix_expression "=>" "." primary_expression) (COMMENT primary_expression "=>" "." LPAREN expression RPAREN) (COMMENT primary_expression "=>" "." STRING_LITERAL) (COMMENT primary_expression "=>" "." CONSTANT) (COMMENT primary_expression "=>" "." IDENTIFIER) (SHIFT (IDENTIFIER) s68) (SHIFT (CONSTANT) s69) (SHIFT (STRING_LITERAL) s70) (SHIFT (SIZEOF) s71) (SHIFT (INC_OP) s72) (SHIFT (DEC_OP) s73) (SHIFT (LPAREN) s159) (SHIFT (AMPERSAND) s75) (SHIFT (STAR) s76) (SHIFT (PLUS) s77) (SHIFT (MINUS) s78) (SHIFT (TWIDLE) s79) (SHIFT (BANG) s80) (GOTO primary_expression s51) (GOTO postfix_expression s52) (GOTO unary_expression s158) (GOTO unary_operator s54))
   (STATE s72 (COMMENT unary_operator "=>" "." BANG) (COMMENT unary_operator "=>" "." TWIDLE) (COMMENT unary_operator "=>" "." MINUS) (COMMENT unary_operator "=>" "." PLUS) (COMMENT unary_operator "=>" "." STAR) (COMMENT unary_operator "=>" "." AMPERSAND) (COMMENT unary_expression "=>" "." SIZEOF LPAREN type_name RPAREN) (COMMENT unary_expression "=>" "." SIZEOF unary_expression) (COMMENT unary_expression "=>" "." unary_operator cast_expression) (COMMENT unary_expression "=>" "." DEC_OP unary_expression) (COMMENT unary_expression "=>" INC_OP "." unary_expression) (COMMENT unary_expression "=>" "." INC_OP unary_expression) (COMMENT unary_expression "=>" "." postfix_expression) (COMMENT postfix_expression "=>" "." postfix_expression DEC_OP) (COMMENT postfix_expression "=>" "." postfix_expression INC_OP) (COMMENT postfix_expression "=>" "." postfix_expression PTR_OP IDENTIFIER) (COMMENT postfix_expression "=>" "." postfix_expression DOT IDENTIFIER) (COMMENT postfix_expression "=>" "." postfix_expression LPAREN argument_expression_list RPAREN) (COMMENT postfix_expression "=>" "." postfix_expression LPAREN RPAREN) (COMMENT postfix_expression "=>" "." postfix_expression LBRACK expression RBRACK) (COMMENT postfix_expression "=>" "." primary_expression) (COMMENT primary_expression "=>" "." LPAREN expression RPAREN) (COMMENT primary_expression "=>" "." STRING_LITERAL) (COMMENT primary_expression "=>" "." CONSTANT) (COMMENT primary_expression "=>" "." IDENTIFIER) (SHIFT (IDENTIFIER) s68) (SHIFT (CONSTANT) s69) (SHIFT (STRING_LITERAL) s70) (SHIFT (SIZEOF) s71) (SHIFT (INC_OP) s72) (SHIFT (DEC_OP) s73) (SHIFT (LPAREN) s156) (SHIFT (AMPERSAND) s75) (SHIFT (STAR) s76) (SHIFT (PLUS) s77) (SHIFT (MINUS) s78) (SHIFT (TWIDLE) s79) (SHIFT (BANG) s80) (GOTO primary_expression s51) (GOTO postfix_expression s52) (GOTO unary_expression s157) (GOTO unary_operator s54))
   (STATE s73 (COMMENT unary_operator "=>" "." BANG) (COMMENT unary_operator "=>" "." TWIDLE) (COMMENT unary_operator "=>" "." MINUS) (COMMENT unary_operator "=>" "." PLUS) (COMMENT unary_operator "=>" "." STAR) (COMMENT unary_operator "=>" "." AMPERSAND) (COMMENT unary_expression "=>" "." SIZEOF LPAREN type_name RPAREN) (COMMENT unary_expression "=>" "." SIZEOF unary_expression) (COMMENT unary_expression "=>" "." unary_operator cast_expression) (COMMENT unary_expression "=>" DEC_OP "." unary_expression) (COMMENT unary_expression "=>" "." DEC_OP unary_expression) (COMMENT unary_expression "=>" "." INC_OP unary_expression) (COMMENT unary_expression "=>" "." postfix_expression) (COMMENT postfix_expression "=>" "." postfix_expression DEC_OP) (COMMENT postfix_expression "=>" "." postfix_expression INC_OP) (COMMENT postfix_expression "=>" "." postfix_expression PTR_OP IDENTIFIER) (COMMENT postfix_expression "=>" "." postfix_expression DOT IDENTIFIER) (COMMENT postfix_expression "=>" "." postfix_expression LPAREN argument_expression_list RPAREN) (COMMENT postfix_expression "=>" "." postfix_expression LPAREN RPAREN) (COMMENT postfix_expression "=>" "." postfix_expression LBRACK expression RBRACK) (COMMENT postfix_expression "=>" "." primary_expression) (COMMENT primary_expression "=>" "." LPAREN expression RPAREN) (COMMENT primary_expression "=>" "." STRING_LITERAL) (COMMENT primary_expression "=>" "." CONSTANT) (COMMENT primary_expression "=>" "." IDENTIFIER) (SHIFT (IDENTIFIER) s68) (SHIFT (CONSTANT) s69) (SHIFT (STRING_LITERAL) s70) (SHIFT (SIZEOF) s71) (SHIFT (INC_OP) s72) (SHIFT (DEC_OP) s73) (SHIFT (LPAREN) s156) (SHIFT (AMPERSAND) s75) (SHIFT (STAR) s76) (SHIFT (PLUS) s77) (SHIFT (MINUS) s78) (SHIFT (TWIDLE) s79) (SHIFT (BANG) s80) (GOTO primary_expression s51) (GOTO postfix_expression s52) (GOTO unary_expression s155) (GOTO unary_operator s54))
   (STATE s74 (COMMENT type_name "=>" "." specifier_qualifier_list abstract_declarator) (COMMENT type_name "=>" "." specifier_qualifier_list) (COMMENT type_qualifier "=>" "." VOLATILE) (COMMENT type_qualifier "=>" "." CONST) (COMMENT enum_specifier "=>" "." ENUM IDENTIFIER) (COMMENT enum_specifier "=>" "." ENUM IDENTIFIER LCURLY enumerator_list RCURLY) (COMMENT enum_specifier "=>" "." ENUM LCURLY enumerator_list RCURLY) (COMMENT specifier_qualifier_list "=>" "." type_qualifier) (COMMENT specifier_qualifier_list "=>" "." type_qualifier specifier_qualifier_list) (COMMENT specifier_qualifier_list "=>" "." type_specifier) (COMMENT specifier_qualifier_list "=>" "." type_specifier specifier_qualifier_list) (COMMENT struct_or_union "=>" "." UNION) (COMMENT struct_or_union "=>" "." STRUCT) (COMMENT struct_or_union_specifier "=>" "." struct_or_union IDENTIFIER) (COMMENT struct_or_union_specifier "=>" "." struct_or_union LCURLY struct_declaration_list RCURLY) (COMMENT struct_or_union_specifier "=>" "." struct_or_union IDENTIFIER LCURLY struct_declaration_list RCURLY) (COMMENT type_specifier "=>" "." TYPE_NAME) (COMMENT type_specifier "=>" "." enum_specifier) (COMMENT type_specifier "=>" "." struct_or_union_specifier) (COMMENT type_specifier "=>" "." UNSIGNED) (COMMENT type_specifier "=>" "." SIGNED) (COMMENT type_specifier "=>" "." DOUBLE) (COMMENT type_specifier "=>" "." FLOAT) (COMMENT type_specifier "=>" "." LONG) (COMMENT type_specifier "=>" "." INT) (COMMENT type_specifier "=>" "." SHORT) (COMMENT type_specifier "=>" "." CHAR) (COMMENT type_specifier "=>" "." VOID) (COMMENT expression "=>" "." expression COMMA assignment_expression) (COMMENT expression "=>" "." assignment_expression) (COMMENT assignment_expression "=>" "." unary_expression assignment_operator assignment_expression) (COMMENT assignment_expression "=>" "." conditional_expression) (COMMENT conditional_expression "=>" "." logical_or_expression QMARK expression COLON conditional_expression) (COMMENT conditional_expression "=>" "." logical_or_expression) (COMMENT logical_or_expression "=>" "." logical_or_expression OR_OP logical_and_expression) (COMMENT logical_or_expression "=>" "." logical_and_expression) (COMMENT logical_and_expression "=>" "." logical_and_expression AND_OP inclusive_or_expression) (COMMENT logical_and_expression "=>" "." inclusive_or_expression) (COMMENT inclusive_or_expression "=>" "." inclusive_or_expression PIPE exclusive_or_expression) (COMMENT inclusive_or_expression "=>" "." exclusive_or_expression) (COMMENT exclusive_or_expression "=>" "." exclusive_or_expression CARROT and_expression) (COMMENT exclusive_or_expression "=>" "." and_expression) (COMMENT and_expression "=>" "." and_expression AMPERSAND equality_expression) (COMMENT and_expression "=>" "." equality_expression) (COMMENT equality_expression "=>" "." equality_expression NE_OP relational_expression) (COMMENT equality_expression "=>" "." equality_expression EQ_OP relational_expression) (COMMENT equality_expression "=>" "." relational_expression) (COMMENT relational_expression "=>" "." relational_expression GE_OP shift_expression) (COMMENT relational_expression "=>" "." relational_expression LE_OP shift_expression) (COMMENT relational_expression "=>" "." relational_expression GREATER_OP shift_expression) (COMMENT relational_expression "=>" "." relational_expression LESS_OP shift_expression) (COMMENT relational_expression "=>" "." shift_expression) (COMMENT shift_expression "=>" "." shift_expression RIGHT_OP additive_expression) (COMMENT shift_expression "=>" "." shift_expression LEFT_OP additive_expression) (COMMENT shift_expression "=>" "." additive_expression) (COMMENT additive_expression "=>" "." additive_expression MINUS multiplicative_expression) (COMMENT additive_expression "=>" "." additive_expression PLUS multiplicative_expression) (COMMENT additive_expression "=>" "." multiplicative_expression) (COMMENT multiplicative_expression "=>" "." multiplicative_expression AMPERSAND cast_expression) (COMMENT multiplicative_expression "=>" "." multiplicative_expression FORWARD_SLASH cast_expression) (COMMENT multiplicative_expression "=>" "." multiplicative_expression STAR cast_expression) (COMMENT multiplicative_expression "=>" "." cast_expression) (COMMENT cast_expression "=>" LPAREN "." type_name RPAREN cast_expression) (COMMENT cast_expression "=>" "." LPAREN type_name RPAREN cast_expression) (COMMENT cast_expression "=>" "." unary_expression) (COMMENT unary_operator "=>" "." BANG) (COMMENT unary_operator "=>" "." TWIDLE) (COMMENT unary_operator "=>" "." MINUS) (COMMENT unary_operator "=>" "." PLUS) (COMMENT unary_operator "=>" "." STAR) (COMMENT unary_operator "=>" "." AMPERSAND) (COMMENT unary_expression "=>" "." SIZEOF LPAREN type_name RPAREN) (COMMENT unary_expression "=>" "." SIZEOF unary_expression) (COMMENT unary_expression "=>" "." unary_operator cast_expression) (COMMENT unary_expression "=>" "." DEC_OP unary_expression) (COMMENT unary_expression "=>" "." INC_OP unary_expression) (COMMENT unary_expression "=>" "." postfix_expression) (COMMENT postfix_expression "=>" "." postfix_expression DEC_OP) (COMMENT postfix_expression "=>" "." postfix_expression INC_OP) (COMMENT postfix_expression "=>" "." postfix_expression PTR_OP IDENTIFIER) (COMMENT postfix_expression "=>" "." postfix_expression DOT IDENTIFIER) (COMMENT postfix_expression "=>" "." postfix_expression LPAREN argument_expression_list RPAREN) (COMMENT postfix_expression "=>" "." postfix_expression LPAREN RPAREN) (COMMENT postfix_expression "=>" "." postfix_expression LBRACK expression RBRACK) (COMMENT postfix_expression "=>" "." primary_expression) (COMMENT primary_expression "=>" LPAREN "." expression RPAREN) (COMMENT primary_expression "=>" "." LPAREN expression RPAREN) (COMMENT primary_expression "=>" "." STRING_LITERAL) (COMMENT primary_expression "=>" "." CONSTANT) (COMMENT primary_expression "=>" "." IDENTIFIER) (SHIFT (IDENTIFIER) s68) (SHIFT (CONSTANT) s69) (SHIFT (STRING_LITERAL) s70) (SHIFT (SIZEOF) s71) (SHIFT (INC_OP) s72) (SHIFT (DEC_OP) s73) (SHIFT (TYPE_NAME) s16) (SHIFT (CHAR) s22) (SHIFT (SHORT) s23) (SHIFT (INT) s24) (SHIFT (LONG) s25) (SHIFT (SIGNED) s26) (SHIFT (UNSIGNED) s27) (SHIFT (FLOAT) s28) (SHIFT (DOUBLE) s29) (SHIFT (CONST) s30) (SHIFT (VOLATILE) s31) (SHIFT (VOID) s32) (SHIFT (STRUCT) s33) (SHIFT (UNION) s34) (SHIFT (ENUM) s35) (SHIFT (LPAREN) s74) (SHIFT (AMPERSAND) s75) (SHIFT (STAR) s76) (SHIFT (PLUS) s77) (SHIFT (MINUS) s78) (SHIFT (TWIDLE) s79) (SHIFT (BANG) s80) (GOTO primary_expression s51) (GOTO postfix_expression s52) (GOTO unary_expression s81) (GOTO unary_operator s54) (GOTO cast_expression s55) (GOTO multiplicative_expression s56) (GOTO additive_expression s57) (GOTO shift_expression s58) (GOTO relational_expression s59) (GOTO equality_expression s60) (GOTO and_expression s61) (GOTO exclusive_or_expression s62) (GOTO inclusive_or_expression s63) (GOTO logical_and_expression s64) (GOTO logical_or_expression s65) (GOTO conditional_expression s82) (GOTO assignment_expression s83) (GOTO expression s84) (GOTO type_specifier s85) (GOTO struct_or_union_specifier s5) (GOTO struct_or_union s6) (GOTO specifier_qualifier_list s86) (GOTO enum_specifier s7) (GOTO type_qualifier s87) (GOTO type_name s88))
   (STATE s75 (COMMENT unary_operator "=>" AMPERSAND ".") (REDUCE () r22))
   (STATE s76 (COMMENT unary_operator "=>" STAR ".") (REDUCE () r23))
   (STATE s77 (COMMENT unary_operator "=>" PLUS ".") (REDUCE () r24))
   (STATE s78 (COMMENT unary_operator "=>" MINUS ".") (REDUCE () r25))
   (STATE s79 (COMMENT unary_operator "=>" TWIDLE ".") (REDUCE () r26))
   (STATE s80 (COMMENT unary_operator "=>" BANG ".") (REDUCE () r27))
   (STATE s81 (COMMENT assignment_operator "=>" "." OR_ASSIGN) (COMMENT assignment_operator "=>" "." XOR_ASSIGN) (COMMENT assignment_operator "=>" "." AND_ASSIGN) (COMMENT assignment_operator "=>" "." RIGHT_ASSIGN) (COMMENT assignment_operator "=>" "." LEFT_ASSIGN) (COMMENT assignment_operator "=>" "." SUB_ASSIGN) (COMMENT assignment_operator "=>" "." ADD_ASSIGN) (COMMENT assignment_operator "=>" "." MOD_ASSIGN) (COMMENT assignment_operator "=>" "." DIV_ASSIGN) (COMMENT assignment_operator "=>" "." MUL_ASSIGN) (COMMENT assignment_operator "=>" "." EQUAL_SIGN) (COMMENT assignment_expression "=>" unary_expression "." assignment_operator assignment_expression) (COMMENT cast_expression "=>" unary_expression ".") (REDUCE (LEFT_OP) r28) (REDUCE (RIGHT_OP) r28) (REDUCE (LE_OP) r28) (REDUCE (GE_OP) r28) (REDUCE (EQ_OP) r28) (REDUCE (NE_OP) r28) (REDUCE (AND_OP) r28) (REDUCE (OR_OP) r28) (SHIFT (MUL_ASSIGN) s143) (SHIFT (DIV_ASSIGN) s144) (SHIFT (MOD_ASSIGN) s145) (SHIFT (ADD_ASSIGN) s146) (SHIFT (SUB_ASSIGN) s147) (SHIFT (LEFT_ASSIGN) s148) (SHIFT (RIGHT_ASSIGN) s149) (SHIFT (AND_ASSIGN) s150) (SHIFT (XOR_ASSIGN) s151) (SHIFT (OR_ASSIGN) s152) (REDUCE (RPAREN) r28) (REDUCE (RBRACK) r28) (REDUCE (RCURLY) r28) (REDUCE (COMMA) r28) (REDUCE (AMPERSAND) r28) (REDUCE (STAR) r28) (REDUCE (PLUS) r28) (REDUCE (MINUS) r28) (REDUCE (FORWARD_SLASH) r28) (REDUCE (LESS_OP) r28) (REDUCE (GREATER_OP) r28) (REDUCE (CARROT) r28) (REDUCE (PIPE) r28) (REDUCE (QMARK) r28) (REDUCE (COLON) r28) (SHIFT (EQUAL_SIGN) s153) (REDUCE (SEMICOLON) r28) (GOTO assignment_operator s142))
   (STATE s82 (COMMENT assignment_expression "=>" conditional_expression ".") (REDUCE () r60))
   (STATE s83 (COMMENT expression "=>" assignment_expression ".") (REDUCE () r73))
   (STATE s84 (COMMENT expression "=>" expression "." COMMA assignment_expression) (COMMENT primary_expression "=>" LPAREN expression "." RPAREN) (SHIFT (RPAREN) s139) (SHIFT (COMMA) s140))
   (STATE s85 (COMMENT type_qualifier "=>" "." VOLATILE) (COMMENT type_qualifier "=>" "." CONST) (COMMENT enum_specifier "=>" "." ENUM IDENTIFIER) (COMMENT enum_specifier "=>" "." ENUM IDENTIFIER LCURLY enumerator_list RCURLY) (COMMENT enum_specifier "=>" "." ENUM LCURLY enumerator_list RCURLY) (COMMENT specifier_qualifier_list "=>" "." type_qualifier) (COMMENT specifier_qualifier_list "=>" "." type_qualifier specifier_qualifier_list) (COMMENT specifier_qualifier_list "=>" type_specifier ".") (COMMENT specifier_qualifier_list "=>" "." type_specifier) (COMMENT specifier_qualifier_list "=>" type_specifier "." specifier_qualifier_list) (COMMENT specifier_qualifier_list "=>" "." type_specifier specifier_qualifier_list) (COMMENT struct_or_union "=>" "." UNION) (COMMENT struct_or_union "=>" "." STRUCT) (COMMENT struct_or_union_specifier "=>" "." struct_or_union IDENTIFIER) (COMMENT struct_or_union_specifier "=>" "." struct_or_union LCURLY struct_declaration_list RCURLY) (COMMENT struct_or_union_specifier "=>" "." struct_or_union IDENTIFIER LCURLY struct_declaration_list RCURLY) (COMMENT type_specifier "=>" "." TYPE_NAME) (COMMENT type_specifier "=>" "." enum_specifier) (COMMENT type_specifier "=>" "." struct_or_union_specifier) (COMMENT type_specifier "=>" "." UNSIGNED) (COMMENT type_specifier "=>" "." SIGNED) (COMMENT type_specifier "=>" "." DOUBLE) (COMMENT type_specifier "=>" "." FLOAT) (COMMENT type_specifier "=>" "." LONG) (COMMENT type_specifier "=>" "." INT) (COMMENT type_specifier "=>" "." SHORT) (COMMENT type_specifier "=>" "." CHAR) (COMMENT type_specifier "=>" "." VOID) (REDUCE (IDENTIFIER) r114) (SHIFT (TYPE_NAME) s16) (SHIFT (CHAR) s22) (SHIFT (SHORT) s23) (SHIFT (INT) s24) (SHIFT (LONG) s25) (SHIFT (SIGNED) s26) (SHIFT (UNSIGNED) s27) (SHIFT (FLOAT) s28) (SHIFT (DOUBLE) s29) (SHIFT (CONST) s30) (SHIFT (VOLATILE) s31) (SHIFT (VOID) s32) (SHIFT (STRUCT) s33) (SHIFT (UNION) s34) (SHIFT (ENUM) s35) (REDUCE (LPAREN) r114) (REDUCE (RPAREN) r114) (REDUCE (LBRACK) r114) (REDUCE (STAR) r114) (REDUCE (COLON) r114) (GOTO type_specifier s85) (GOTO struct_or_union_specifier s5) (GOTO struct_or_union s6) (GOTO specifier_qualifier_list s138) (GOTO enum_specifier s7) (GOTO type_qualifier s87))
   (STATE s86 (COMMENT direct_abstract_declarator "=>" "." direct_abstract_declarator LPAREN parameter_type_list RPAREN) (COMMENT direct_abstract_declarator "=>" "." direct_abstract_declarator LPAREN RPAREN) (COMMENT direct_abstract_declarator "=>" "." LPAREN parameter_type_list RPAREN) (COMMENT direct_abstract_declarator "=>" "." LPAREN RPAREN) (COMMENT direct_abstract_declarator "=>" "." direct_abstract_declarator LBRACK constant_expression RBRACK) (COMMENT direct_abstract_declarator "=>" "." direct_abstract_declarator LBRACK RBRACK) (COMMENT direct_abstract_declarator "=>" "." LBRACK constant_expression RBRACK) (COMMENT direct_abstract_declarator "=>" "." LBRACK RBRACK) (COMMENT direct_abstract_declarator "=>" "." LPAREN abstract_declarator RPAREN) (COMMENT abstract_declarator "=>" "." pointer direct_abstract_declarator) (COMMENT abstract_declarator "=>" "." direct_abstract_declarator) (COMMENT abstract_declarator "=>" "." pointer) (COMMENT type_name "=>" specifier_qualifier_list "." abstract_declarator) (COMMENT type_name "=>" specifier_qualifier_list ".") (COMMENT pointer "=>" "." STAR type_qualifier_list pointer) (COMMENT pointer "=>" "." STAR pointer) (COMMENT pointer "=>" "." STAR type_qualifier_list) (COMMENT pointer "=>" "." STAR) (SHIFT (LPAREN) s95) (REDUCE (RPAREN) r155) (SHIFT (LBRACK) s96) (SHIFT (STAR) s37) (GOTO pointer s92) (GOTO abstract_declarator s93) (GOTO direct_abstract_declarator s94))
   (STATE s87 (COMMENT type_qualifier "=>" "." VOLATILE) (COMMENT type_qualifier "=>" "." CONST) (COMMENT enum_specifier "=>" "." ENUM IDENTIFIER) (COMMENT enum_specifier "=>" "." ENUM IDENTIFIER LCURLY enumerator_list RCURLY) (COMMENT enum_specifier "=>" "." ENUM LCURLY enumerator_list RCURLY) (COMMENT specifier_qualifier_list "=>" type_qualifier ".") (COMMENT specifier_qualifier_list "=>" "." type_qualifier) (COMMENT specifier_qualifier_list "=>" type_qualifier "." specifier_qualifier_list) (COMMENT specifier_qualifier_list "=>" "." type_qualifier specifier_qualifier_list) (COMMENT specifier_qualifier_list "=>" "." type_specifier) (COMMENT specifier_qualifier_list "=>" "." type_specifier specifier_qualifier_list) (COMMENT struct_or_union "=>" "." UNION) (COMMENT struct_or_union "=>" "." STRUCT) (COMMENT struct_or_union_specifier "=>" "." struct_or_union IDENTIFIER) (COMMENT struct_or_union_specifier "=>" "." struct_or_union LCURLY struct_declaration_list RCURLY) (COMMENT struct_or_union_specifier "=>" "." struct_or_union IDENTIFIER LCURLY struct_declaration_list RCURLY) (COMMENT type_specifier "=>" "." TYPE_NAME) (COMMENT type_specifier "=>" "." enum_specifier) (COMMENT type_specifier "=>" "." struct_or_union_specifier) (COMMENT type_specifier "=>" "." UNSIGNED) (COMMENT type_specifier "=>" "." SIGNED) (COMMENT type_specifier "=>" "." DOUBLE) (COMMENT type_specifier "=>" "." FLOAT) (COMMENT type_specifier "=>" "." LONG) (COMMENT type_specifier "=>" "." INT) (COMMENT type_specifier "=>" "." SHORT) (COMMENT type_specifier "=>" "." CHAR) (COMMENT type_specifier "=>" "." VOID) (REDUCE (IDENTIFIER) r116) (SHIFT (TYPE_NAME) s16) (SHIFT (CHAR) s22) (SHIFT (SHORT) s23) (SHIFT (INT) s24) (SHIFT (LONG) s25) (SHIFT (SIGNED) s26) (SHIFT (UNSIGNED) s27) (SHIFT (FLOAT) s28) (SHIFT (DOUBLE) s29) (SHIFT (CONST) s30) (SHIFT (VOLATILE) s31) (SHIFT (VOID) s32) (SHIFT (STRUCT) s33) (SHIFT (UNION) s34) (SHIFT (ENUM) s35) (REDUCE (LPAREN) r116) (REDUCE (RPAREN) r116) (REDUCE (LBRACK) r116) (REDUCE (STAR) r116) (REDUCE (COLON) r116) (GOTO type_specifier s85) (GOTO struct_or_union_specifier s5) (GOTO struct_or_union s6) (GOTO specifier_qualifier_list s91) (GOTO enum_specifier s7) (GOTO type_qualifier s87))
   (STATE s88 (COMMENT cast_expression "=>" LPAREN type_name "." RPAREN cast_expression) (SHIFT (RPAREN) s89))
   (STATE s89 (COMMENT cast_expression "=>" LPAREN type_name RPAREN "." cast_expression) (COMMENT cast_expression "=>" "." LPAREN type_name RPAREN cast_expression) (COMMENT cast_expression "=>" "." unary_expression) (COMMENT unary_operator "=>" "." BANG) (COMMENT unary_operator "=>" "." TWIDLE) (COMMENT unary_operator "=>" "." MINUS) (COMMENT unary_operator "=>" "." PLUS) (COMMENT unary_operator "=>" "." STAR) (COMMENT unary_operator "=>" "." AMPERSAND) (COMMENT unary_expression "=>" "." SIZEOF LPAREN type_name RPAREN) (COMMENT unary_expression "=>" "." SIZEOF unary_expression) (COMMENT unary_expression "=>" "." unary_operator cast_expression) (COMMENT unary_expression "=>" "." DEC_OP unary_expression) (COMMENT unary_expression "=>" "." INC_OP unary_expression) (COMMENT unary_expression "=>" "." postfix_expression) (COMMENT postfix_expression "=>" "." postfix_expression DEC_OP) (COMMENT postfix_expression "=>" "." postfix_expression INC_OP) (COMMENT postfix_expression "=>" "." postfix_expression PTR_OP IDENTIFIER) (COMMENT postfix_expression "=>" "." postfix_expression DOT IDENTIFIER) (COMMENT postfix_expression "=>" "." postfix_expression LPAREN argument_expression_list RPAREN) (COMMENT postfix_expression "=>" "." postfix_expression LPAREN RPAREN) (COMMENT postfix_expression "=>" "." postfix_expression LBRACK expression RBRACK) (COMMENT postfix_expression "=>" "." primary_expression) (COMMENT primary_expression "=>" "." LPAREN expression RPAREN) (COMMENT primary_expression "=>" "." STRING_LITERAL) (COMMENT primary_expression "=>" "." CONSTANT) (COMMENT primary_expression "=>" "." IDENTIFIER) (SHIFT (IDENTIFIER) s68) (SHIFT (CONSTANT) s69) (SHIFT (STRING_LITERAL) s70) (SHIFT (SIZEOF) s71) (SHIFT (INC_OP) s72) (SHIFT (DEC_OP) s73) (SHIFT (LPAREN) s74) (SHIFT (AMPERSAND) s75) (SHIFT (STAR) s76) (SHIFT (PLUS) s77) (SHIFT (MINUS) s78) (SHIFT (TWIDLE) s79) (SHIFT (BANG) s80) (GOTO primary_expression s51) (GOTO postfix_expression s52) (GOTO unary_expression s53) (GOTO unary_operator s54) (GOTO cast_expression s90))
   (STATE s90 (COMMENT cast_expression "=>" LPAREN type_name RPAREN cast_expression ".") (REDUCE () r29))
   (STATE s91 (COMMENT specifier_qualifier_list "=>" type_qualifier specifier_qualifier_list ".") (REDUCE () r115))
   (STATE s92 (COMMENT direct_abstract_declarator "=>" "." direct_abstract_declarator LPAREN parameter_type_list RPAREN) (COMMENT direct_abstract_declarator "=>" "." direct_abstract_declarator LPAREN RPAREN) (COMMENT direct_abstract_declarator "=>" "." LPAREN parameter_type_list RPAREN) (COMMENT direct_abstract_declarator "=>" "." LPAREN RPAREN) (COMMENT direct_abstract_declarator "=>" "." direct_abstract_declarator LBRACK constant_expression RBRACK) (COMMENT direct_abstract_declarator "=>" "." direct_abstract_declarator LBRACK RBRACK) (COMMENT direct_abstract_declarator "=>" "." LBRACK constant_expression RBRACK) (COMMENT direct_abstract_declarator "=>" "." LBRACK RBRACK) (COMMENT direct_abstract_declarator "=>" "." LPAREN abstract_declarator RPAREN) (COMMENT abstract_declarator "=>" pointer "." direct_abstract_declarator) (COMMENT abstract_declarator "=>" pointer ".") (SHIFT (LPAREN) s95) (REDUCE (RPAREN) r157) (SHIFT (LBRACK) s96) (GOTO direct_abstract_declarator s116))
   (STATE s93 (COMMENT type_name "=>" specifier_qualifier_list abstract_declarator ".") (REDUCE () r156))
   (STATE s94 (COMMENT direct_abstract_declarator "=>" direct_abstract_declarator "." LPAREN parameter_type_list RPAREN) (COMMENT direct_abstract_declarator "=>" direct_abstract_declarator "." LPAREN RPAREN) (COMMENT direct_abstract_declarator "=>" direct_abstract_declarator "." LBRACK constant_expression RBRACK) (COMMENT direct_abstract_declarator "=>" direct_abstract_declarator "." LBRACK RBRACK) (COMMENT abstract_declarator "=>" direct_abstract_declarator ".") (SHIFT (LPAREN) s117) (REDUCE (RPAREN) r158) (SHIFT (LBRACK) s118) (REDUCE (COMMA) r158))
   (STATE s95 (COMMENT direct_abstract_declarator "=>" "." direct_abstract_declarator LPAREN parameter_type_list RPAREN) (COMMENT direct_abstract_declarator "=>" "." direct_abstract_declarator LPAREN RPAREN) (COMMENT direct_abstract_declarator "=>" LPAREN "." parameter_type_list RPAREN) (COMMENT direct_abstract_declarator "=>" "." LPAREN parameter_type_list RPAREN) (COMMENT direct_abstract_declarator "=>" LPAREN "." RPAREN) (COMMENT direct_abstract_declarator "=>" "." LPAREN RPAREN) (COMMENT direct_abstract_declarator "=>" "." direct_abstract_declarator LBRACK constant_expression RBRACK) (COMMENT direct_abstract_declarator "=>" "." direct_abstract_declarator LBRACK RBRACK) (COMMENT direct_abstract_declarator "=>" "." LBRACK constant_expression RBRACK) (COMMENT direct_abstract_declarator "=>" "." LBRACK RBRACK) (COMMENT direct_abstract_declarator "=>" LPAREN "." abstract_declarator RPAREN) (COMMENT direct_abstract_declarator "=>" "." LPAREN abstract_declarator RPAREN) (COMMENT abstract_declarator "=>" "." pointer direct_abstract_declarator) (COMMENT abstract_declarator "=>" "." direct_abstract_declarator) (COMMENT abstract_declarator "=>" "." pointer) (COMMENT parameter_declaration "=>" "." declaration_specifiers) (COMMENT parameter_declaration "=>" "." declaration_specifiers abstract_declarator) (COMMENT parameter_declaration "=>" "." declaration_specifiers declarator) (COMMENT parameter_list "=>" "." parameter_list COMMA parameter_declaration) (COMMENT parameter_list "=>" "." parameter_declaration) (COMMENT parameter_type_list "=>" "." parameter_list COMMA ELLIPSIS) (COMMENT parameter_type_list "=>" "." parameter_list) (COMMENT pointer "=>" "." STAR type_qualifier_list pointer) (COMMENT pointer "=>" "." STAR pointer) (COMMENT pointer "=>" "." STAR type_qualifier_list) (COMMENT pointer "=>" "." STAR) (COMMENT type_qualifier "=>" "." VOLATILE) (COMMENT type_qualifier "=>" "." CONST) (COMMENT enum_specifier "=>" "." ENUM IDENTIFIER) (COMMENT enum_specifier "=>" "." ENUM IDENTIFIER LCURLY enumerator_list RCURLY) (COMMENT enum_specifier "=>" "." ENUM LCURLY enumerator_list RCURLY) (COMMENT struct_or_union "=>" "." UNION) (COMMENT struct_or_union "=>" "." STRUCT) (COMMENT struct_or_union_specifier "=>" "." struct_or_union IDENTIFIER) (COMMENT struct_or_union_specifier "=>" "." struct_or_union LCURLY struct_declaration_list RCURLY) (COMMENT struct_or_union_specifier "=>" "." struct_or_union IDENTIFIER LCURLY struct_declaration_list RCURLY) (COMMENT type_specifier "=>" "." TYPE_NAME) (COMMENT type_specifier "=>" "." enum_specifier) (COMMENT type_specifier "=>" "." struct_or_union_specifier) (COMMENT type_specifier "=>" "." UNSIGNED) (COMMENT type_specifier "=>" "." SIGNED) (COMMENT type_specifier "=>" "." DOUBLE) (COMMENT type_specifier "=>" "." FLOAT) (COMMENT type_specifier "=>" "." LONG) (COMMENT type_specifier "=>" "." INT) (COMMENT type_specifier "=>" "." SHORT) (COMMENT type_specifier "=>" "." CHAR) (COMMENT type_specifier "=>" "." VOID) (COMMENT storage_class_specifier "=>" "." REGISTER) (COMMENT storage_class_specifier "=>" "." AUTO) (COMMENT storage_class_specifier "=>" "." STATIC) (COMMENT storage_class_specifier "=>" "." EXTERN) (COMMENT storage_class_specifier "=>" "." TYPEDEF) (COMMENT declaration_specifiers "=>" "." type_qualifier declaration_specifiers) (COMMENT declaration_specifiers "=>" "." type_qualifier) (COMMENT declaration_specifiers "=>" "." type_specifier declaration_specifiers) (COMMENT declaration_specifiers "=>" "." type_specifier) (COMMENT declaration_specifiers "=>" "." storage_class_specifier declaration_specifiers) (COMMENT declaration_specifiers "=>" "." storage_class_specifier) (SHIFT (TYPE_NAME) s16) (SHIFT (TYPEDEF) s17) (SHIFT (EXTERN) s18) (SHIFT (STATIC) s19) (SHIFT (AUTO) s20) (SHIFT (REGISTER) s21) (SHIFT (CHAR) s22) (SHIFT (SHORT) s23) (SHIFT (INT) s24) (SHIFT (LONG) s25) (SHIFT (SIGNED) s26) (SHIFT (UNSIGNED) s27) (SHIFT (FLOAT) s28) (SHIFT (DOUBLE) s29) (SHIFT (CONST) s30) (SHIFT (VOLATILE) s31) (SHIFT (VOID) s32) (SHIFT (STRUCT) s33) (SHIFT (UNION) s34) (SHIFT (ENUM) s35) (SHIFT (LPAREN) s95) (SHIFT (RPAREN) s105) (SHIFT (LBRACK) s96) (SHIFT (STAR) s37) (GOTO declaration_specifiers s100) (GOTO storage_class_specifier s3) (GOTO type_specifier s4) (GOTO struct_or_union_specifier s5) (GOTO struct_or_union s6) (GOTO enum_specifier s7) (GOTO type_qualifier s8) (GOTO pointer s92) (GOTO parameter_type_list s101) (GOTO parameter_list s102) (GOTO parameter_declaration s103) (GOTO abstract_declarator s104) (GOTO direct_abstract_declarator s94))
   (STATE s96 (COMMENT direct_abstract_declarator "=>" LBRACK "." constant_expression RBRACK) (COMMENT direct_abstract_declarator "=>" LBRACK "." RBRACK) (COMMENT constant_expression "=>" "." conditional_expression) (COMMENT conditional_expression "=>" "." logical_or_expression QMARK expression COLON conditional_expression) (COMMENT conditional_expression "=>" "." logical_or_expression) (COMMENT logical_or_expression "=>" "." logical_or_expression OR_OP logical_and_expression) (COMMENT logical_or_expression "=>" "." logical_and_expression) (COMMENT logical_and_expression "=>" "." logical_and_expression AND_OP inclusive_or_expression) (COMMENT logical_and_expression "=>" "." inclusive_or_expression) (COMMENT inclusive_or_expression "=>" "." inclusive_or_expression PIPE exclusive_or_expression) (COMMENT inclusive_or_expression "=>" "." exclusive_or_expression) (COMMENT exclusive_or_expression "=>" "." exclusive_or_expression CARROT and_expression) (COMMENT exclusive_or_expression "=>" "." and_expression) (COMMENT and_expression "=>" "." and_expression AMPERSAND equality_expression) (COMMENT and_expression "=>" "." equality_expression) (COMMENT equality_expression "=>" "." equality_expression NE_OP relational_expression) (COMMENT equality_expression "=>" "." equality_expression EQ_OP relational_expression) (COMMENT equality_expression "=>" "." relational_expression) (COMMENT relational_expression "=>" "." relational_expression GE_OP shift_expression) (COMMENT relational_expression "=>" "." relational_expression LE_OP shift_expression) (COMMENT relational_expression "=>" "." relational_expression GREATER_OP shift_expression) (COMMENT relational_expression "=>" "." relational_expression LESS_OP shift_expression) (COMMENT relational_expression "=>" "." shift_expression) (COMMENT shift_expression "=>" "." shift_expression RIGHT_OP additive_expression) (COMMENT shift_expression "=>" "." shift_expression LEFT_OP additive_expression) (COMMENT shift_expression "=>" "." additive_expression) (COMMENT additive_expression "=>" "." additive_expression MINUS multiplicative_expression) (COMMENT additive_expression "=>" "." additive_expression PLUS multiplicative_expression) (COMMENT additive_expression "=>" "." multiplicative_expression) (COMMENT multiplicative_expression "=>" "." multiplicative_expression AMPERSAND cast_expression) (COMMENT multiplicative_expression "=>" "." multiplicative_expression FORWARD_SLASH cast_expression) (COMMENT multiplicative_expression "=>" "." multiplicative_expression STAR cast_expression) (COMMENT multiplicative_expression "=>" "." cast_expression) (COMMENT cast_expression "=>" "." LPAREN type_name RPAREN cast_expression) (COMMENT cast_expression "=>" "." unary_expression) (COMMENT unary_operator "=>" "." BANG) (COMMENT unary_operator "=>" "." TWIDLE) (COMMENT unary_operator "=>" "." MINUS) (COMMENT unary_operator "=>" "." PLUS) (COMMENT unary_operator "=>" "." STAR) (COMMENT unary_operator "=>" "." AMPERSAND) (COMMENT unary_expression "=>" "." SIZEOF LPAREN type_name RPAREN) (COMMENT unary_expression "=>" "." SIZEOF unary_expression) (COMMENT unary_expression "=>" "." unary_operator cast_expression) (COMMENT unary_expression "=>" "." DEC_OP unary_expression) (COMMENT unary_expression "=>" "." INC_OP unary_expression) (COMMENT unary_expression "=>" "." postfix_expression) (COMMENT postfix_expression "=>" "." postfix_expression DEC_OP) (COMMENT postfix_expression "=>" "." postfix_expression INC_OP) (COMMENT postfix_expression "=>" "." postfix_expression PTR_OP IDENTIFIER) (COMMENT postfix_expression "=>" "." postfix_expression DOT IDENTIFIER) (COMMENT postfix_expression "=>" "." postfix_expression LPAREN argument_expression_list RPAREN) (COMMENT postfix_expression "=>" "." postfix_expression LPAREN RPAREN) (COMMENT postfix_expression "=>" "." postfix_expression LBRACK expression RBRACK) (COMMENT postfix_expression "=>" "." primary_expression) (COMMENT primary_expression "=>" "." LPAREN expression RPAREN) (COMMENT primary_expression "=>" "." STRING_LITERAL) (COMMENT primary_expression "=>" "." CONSTANT) (COMMENT primary_expression "=>" "." IDENTIFIER) (SHIFT (IDENTIFIER) s68) (SHIFT (CONSTANT) s69) (SHIFT (STRING_LITERAL) s70) (SHIFT (SIZEOF) s71) (SHIFT (INC_OP) s72) (SHIFT (DEC_OP) s73) (SHIFT (LPAREN) s74) (SHIFT (RBRACK) s98) (SHIFT (AMPERSAND) s75) (SHIFT (STAR) s76) (SHIFT (PLUS) s77) (SHIFT (MINUS) s78) (SHIFT (TWIDLE) s79) (SHIFT (BANG) s80) (GOTO primary_expression s51) (GOTO postfix_expression s52) (GOTO unary_expression s53) (GOTO unary_operator s54) (GOTO cast_expression s55) (GOTO multiplicative_expression s56) (GOTO additive_expression s57) (GOTO shift_expression s58) (GOTO relational_expression s59) (GOTO equality_expression s60) (GOTO and_expression s61) (GOTO exclusive_or_expression s62) (GOTO inclusive_or_expression s63) (GOTO logical_and_expression s64) (GOTO logical_or_expression s65) (GOTO conditional_expression s66) (GOTO constant_expression s97))
   (STATE s97 (COMMENT direct_abstract_declarator "=>" LBRACK constant_expression "." RBRACK) (SHIFT (RBRACK) s99))
   (STATE s98 (COMMENT direct_abstract_declarator "=>" LBRACK RBRACK ".") (REDUCE () r161))
   (STATE s99 (COMMENT direct_abstract_declarator "=>" LBRACK constant_expression RBRACK ".") (REDUCE () r162))
   (STATE s100 (COMMENT direct_abstract_declarator "=>" "." direct_abstract_declarator LPAREN parameter_type_list RPAREN) (COMMENT direct_abstract_declarator "=>" "." direct_abstract_declarator LPAREN RPAREN) (COMMENT direct_abstract_declarator "=>" "." LPAREN parameter_type_list RPAREN) (COMMENT direct_abstract_declarator "=>" "." LPAREN RPAREN) (COMMENT direct_abstract_declarator "=>" "." direct_abstract_declarator LBRACK constant_expression RBRACK) (COMMENT direct_abstract_declarator "=>" "." direct_abstract_declarator LBRACK RBRACK) (COMMENT direct_abstract_declarator "=>" "." LBRACK constant_expression RBRACK) (COMMENT direct_abstract_declarator "=>" "." LBRACK RBRACK) (COMMENT direct_abstract_declarator "=>" "." LPAREN abstract_declarator RPAREN) (COMMENT abstract_declarator "=>" "." pointer direct_abstract_declarator) (COMMENT abstract_declarator "=>" "." direct_abstract_declarator) (COMMENT abstract_declarator "=>" "." pointer) (COMMENT parameter_declaration "=>" declaration_specifiers ".") (COMMENT parameter_declaration "=>" declaration_specifiers "." abstract_declarator) (COMMENT parameter_declaration "=>" declaration_specifiers "." declarator) (COMMENT pointer "=>" "." STAR type_qualifier_list pointer) (COMMENT pointer "=>" "." STAR pointer) (COMMENT pointer "=>" "." STAR type_qualifier_list) (COMMENT pointer "=>" "." STAR) (COMMENT direct_declarator "=>" "." direct_declarator LPAREN RPAREN) (COMMENT direct_declarator "=>" "." direct_declarator LPAREN identifier_list RPAREN) (COMMENT direct_declarator "=>" "." direct_declarator LPAREN parameter_type_list RPAREN) (COMMENT direct_declarator "=>" "." direct_declarator LBRACK RBRACK) (COMMENT direct_declarator "=>" "." direct_declarator LBRACK constant_expression RBRACK) (COMMENT direct_declarator "=>" "." LPAREN declarator RPAREN) (COMMENT direct_declarator "=>" "." IDENTIFIER) (COMMENT declarator "=>" "." direct_declarator) (COMMENT declarator "=>" "." pointer direct_declarator) (SHIFT (IDENTIFIER) s15) (SHIFT (LPAREN) s114) (REDUCE (RPAREN) r152) (SHIFT (LBRACK) s96) (REDUCE (COMMA) r152) (SHIFT (STAR) s37) (GOTO declarator s111) (GOTO direct_declarator s10) (GOTO pointer s112) (GOTO abstract_declarator s113) (GOTO direct_abstract_declarator s94))
   (STATE s101 (COMMENT direct_abstract_declarator "=>" LPAREN parameter_type_list "." RPAREN) (SHIFT (RPAREN) s110))
   (STATE s102 (COMMENT parameter_list "=>" parameter_list "." COMMA parameter_declaration) (COMMENT parameter_type_list "=>" parameter_list "." COMMA ELLIPSIS) (COMMENT parameter_type_list "=>" parameter_list ".") (REDUCE (RPAREN) r146) (SHIFT (COMMA) s107))
   (STATE s103 (COMMENT parameter_list "=>" parameter_declaration ".") (REDUCE () r148))
   (STATE s104 (COMMENT direct_abstract_declarator "=>" LPAREN abstract_declarator "." RPAREN) (SHIFT (RPAREN) s106))
   (STATE s105 (COMMENT direct_abstract_declarator "=>" LPAREN RPAREN ".") (REDUCE () r165))
   (STATE s106 (COMMENT direct_abstract_declarator "=>" LPAREN abstract_declarator RPAREN ".") (REDUCE () r160))
   (STATE s107 (COMMENT parameter_declaration "=>" "." declaration_specifiers) (COMMENT parameter_declaration "=>" "." declaration_specifiers abstract_declarator) (COMMENT parameter_declaration "=>" "." declaration_specifiers declarator) (COMMENT parameter_list "=>" parameter_list COMMA "." parameter_declaration) (COMMENT parameter_type_list "=>" parameter_list COMMA "." ELLIPSIS) (COMMENT type_qualifier "=>" "." VOLATILE) (COMMENT type_qualifier "=>" "." CONST) (COMMENT enum_specifier "=>" "." ENUM IDENTIFIER) (COMMENT enum_specifier "=>" "." ENUM IDENTIFIER LCURLY enumerator_list RCURLY) (COMMENT enum_specifier "=>" "." ENUM LCURLY enumerator_list RCURLY) (COMMENT struct_or_union "=>" "." UNION) (COMMENT struct_or_union "=>" "." STRUCT) (COMMENT struct_or_union_specifier "=>" "." struct_or_union IDENTIFIER) (COMMENT struct_or_union_specifier "=>" "." struct_or_union LCURLY struct_declaration_list RCURLY) (COMMENT struct_or_union_specifier "=>" "." struct_or_union IDENTIFIER LCURLY struct_declaration_list RCURLY) (COMMENT type_specifier "=>" "." TYPE_NAME) (COMMENT type_specifier "=>" "." enum_specifier) (COMMENT type_specifier "=>" "." struct_or_union_specifier) (COMMENT type_specifier "=>" "." UNSIGNED) (COMMENT type_specifier "=>" "." SIGNED) (COMMENT type_specifier "=>" "." DOUBLE) (COMMENT type_specifier "=>" "." FLOAT) (COMMENT type_specifier "=>" "." LONG) (COMMENT type_specifier "=>" "." INT) (COMMENT type_specifier "=>" "." SHORT) (COMMENT type_specifier "=>" "." CHAR) (COMMENT type_specifier "=>" "." VOID) (COMMENT storage_class_specifier "=>" "." REGISTER) (COMMENT storage_class_specifier "=>" "." AUTO) (COMMENT storage_class_specifier "=>" "." STATIC) (COMMENT storage_class_specifier "=>" "." EXTERN) (COMMENT storage_class_specifier "=>" "." TYPEDEF) (COMMENT declaration_specifiers "=>" "." type_qualifier declaration_specifiers) (COMMENT declaration_specifiers "=>" "." type_qualifier) (COMMENT declaration_specifiers "=>" "." type_specifier declaration_specifiers) (COMMENT declaration_specifiers "=>" "." type_specifier) (COMMENT declaration_specifiers "=>" "." storage_class_specifier declaration_specifiers) (COMMENT declaration_specifiers "=>" "." storage_class_specifier) (SHIFT (TYPE_NAME) s16) (SHIFT (TYPEDEF) s17) (SHIFT (EXTERN) s18) (SHIFT (STATIC) s19) (SHIFT (AUTO) s20) (SHIFT (REGISTER) s21) (SHIFT (CHAR) s22) (SHIFT (SHORT) s23) (SHIFT (INT) s24) (SHIFT (LONG) s25) (SHIFT (SIGNED) s26) (SHIFT (UNSIGNED) s27) (SHIFT (FLOAT) s28) (SHIFT (DOUBLE) s29) (SHIFT (CONST) s30) (SHIFT (VOLATILE) s31) (SHIFT (VOID) s32) (SHIFT (STRUCT) s33) (SHIFT (UNION) s34) (SHIFT (ENUM) s35) (SHIFT (ELLIPSIS) s109) (GOTO declaration_specifiers s100) (GOTO storage_class_specifier s3) (GOTO type_specifier s4) (GOTO struct_or_union_specifier s5) (GOTO struct_or_union s6) (GOTO enum_specifier s7) (GOTO type_qualifier s8) (GOTO parameter_declaration s108))
   (STATE s108 (COMMENT parameter_list "=>" parameter_list COMMA parameter_declaration ".") (REDUCE () r149))
   (STATE s109 (COMMENT parameter_type_list "=>" parameter_list COMMA ELLIPSIS ".") (REDUCE () r147))
   (STATE s110 (COMMENT direct_abstract_declarator "=>" LPAREN parameter_type_list RPAREN ".") (REDUCE () r166))
   (STATE s111 (COMMENT parameter_declaration "=>" declaration_specifiers declarator ".") (REDUCE () r150))
   (STATE s112 (COMMENT direct_abstract_declarator "=>" "." direct_abstract_declarator LPAREN parameter_type_list RPAREN) (COMMENT direct_abstract_declarator "=>" "." direct_abstract_declarator LPAREN RPAREN) (COMMENT direct_abstract_declarator "=>" "." LPAREN parameter_type_list RPAREN) (COMMENT direct_abstract_declarator "=>" "." LPAREN RPAREN) (COMMENT direct_abstract_declarator "=>" "." direct_abstract_declarator LBRACK constant_expression RBRACK) (COMMENT direct_abstract_declarator "=>" "." direct_abstract_declarator LBRACK RBRACK) (COMMENT direct_abstract_declarator "=>" "." LBRACK constant_expression RBRACK) (COMMENT direct_abstract_declarator "=>" "." LBRACK RBRACK) (COMMENT direct_abstract_declarator "=>" "." LPAREN abstract_declarator RPAREN) (COMMENT abstract_declarator "=>" pointer "." direct_abstract_declarator) (COMMENT abstract_declarator "=>" pointer ".") (COMMENT direct_declarator "=>" "." direct_declarator LPAREN RPAREN) (COMMENT direct_declarator "=>" "." direct_declarator LPAREN identifier_list RPAREN) (COMMENT direct_declarator "=>" "." direct_declarator LPAREN parameter_type_list RPAREN) (COMMENT direct_declarator "=>" "." direct_declarator LBRACK RBRACK) (COMMENT direct_declarator "=>" "." direct_declarator LBRACK constant_expression RBRACK) (COMMENT direct_declarator "=>" "." LPAREN declarator RPAREN) (COMMENT direct_declarator "=>" "." IDENTIFIER) (COMMENT declarator "=>" pointer "." direct_declarator) (SHIFT (IDENTIFIER) s15) (SHIFT (LPAREN) s114) (REDUCE (RPAREN) r157) (SHIFT (LBRACK) s96) (REDUCE (COMMA) r157) (GOTO direct_declarator s115) (GOTO direct_abstract_declarator s116))
   (STATE s113 (COMMENT parameter_declaration "=>" declaration_specifiers abstract_declarator ".") (REDUCE () r151))
   (STATE s114 (COMMENT direct_abstract_declarator "=>" "." direct_abstract_declarator LPAREN parameter_type_list RPAREN) (COMMENT direct_abstract_declarator "=>" "." direct_abstract_declarator LPAREN RPAREN) (COMMENT direct_abstract_declarator "=>" LPAREN "." parameter_type_list RPAREN) (COMMENT direct_abstract_declarator "=>" "." LPAREN parameter_type_list RPAREN) (COMMENT direct_abstract_declarator "=>" LPAREN "." RPAREN) (COMMENT direct_abstract_declarator "=>" "." LPAREN RPAREN) (COMMENT direct_abstract_declarator "=>" "." direct_abstract_declarator LBRACK constant_expression RBRACK) (COMMENT direct_abstract_declarator "=>" "." direct_abstract_declarator LBRACK RBRACK) (COMMENT direct_abstract_declarator "=>" "." LBRACK constant_expression RBRACK) (COMMENT direct_abstract_declarator "=>" "." LBRACK RBRACK) (COMMENT direct_abstract_declarator "=>" LPAREN "." abstract_declarator RPAREN) (COMMENT direct_abstract_declarator "=>" "." LPAREN abstract_declarator RPAREN) (COMMENT abstract_declarator "=>" "." pointer direct_abstract_declarator) (COMMENT abstract_declarator "=>" "." direct_abstract_declarator) (COMMENT abstract_declarator "=>" "." pointer) (COMMENT parameter_declaration "=>" "." declaration_specifiers) (COMMENT parameter_declaration "=>" "." declaration_specifiers abstract_declarator) (COMMENT parameter_declaration "=>" "." declaration_specifiers declarator) (COMMENT parameter_list "=>" "." parameter_list COMMA parameter_declaration) (COMMENT parameter_list "=>" "." parameter_declaration) (COMMENT parameter_type_list "=>" "." parameter_list COMMA ELLIPSIS) (COMMENT parameter_type_list "=>" "." parameter_list) (COMMENT pointer "=>" "." STAR type_qualifier_list pointer) (COMMENT pointer "=>" "." STAR pointer) (COMMENT pointer "=>" "." STAR type_qualifier_list) (COMMENT pointer "=>" "." STAR) (COMMENT direct_declarator "=>" "." direct_declarator LPAREN RPAREN) (COMMENT direct_declarator "=>" "." direct_declarator LPAREN identifier_list RPAREN) (COMMENT direct_declarator "=>" "." direct_declarator LPAREN parameter_type_list RPAREN) (COMMENT direct_declarator "=>" "." direct_declarator LBRACK RBRACK) (COMMENT direct_declarator "=>" "." direct_declarator LBRACK constant_expression RBRACK) (COMMENT direct_declarator "=>" LPAREN "." declarator RPAREN) (COMMENT direct_declarator "=>" "." LPAREN declarator RPAREN) (COMMENT direct_declarator "=>" "." IDENTIFIER) (COMMENT declarator "=>" "." direct_declarator) (COMMENT declarator "=>" "." pointer direct_declarator) (COMMENT type_qualifier "=>" "." VOLATILE) (COMMENT type_qualifier "=>" "." CONST) (COMMENT enum_specifier "=>" "." ENUM IDENTIFIER) (COMMENT enum_specifier "=>" "." ENUM IDENTIFIER LCURLY enumerator_list RCURLY) (COMMENT enum_specifier "=>" "." ENUM LCURLY enumerator_list RCURLY) (COMMENT struct_or_union "=>" "." UNION) (COMMENT struct_or_union "=>" "." STRUCT) (COMMENT struct_or_union_specifier "=>" "." struct_or_union IDENTIFIER) (COMMENT struct_or_union_specifier "=>" "." struct_or_union LCURLY struct_declaration_list RCURLY) (COMMENT struct_or_union_specifier "=>" "." struct_or_union IDENTIFIER LCURLY struct_declaration_list RCURLY) (COMMENT type_specifier "=>" "." TYPE_NAME) (COMMENT type_specifier "=>" "." enum_specifier) (COMMENT type_specifier "=>" "." struct_or_union_specifier) (COMMENT type_specifier "=>" "." UNSIGNED) (COMMENT type_specifier "=>" "." SIGNED) (COMMENT type_specifier "=>" "." DOUBLE) (COMMENT type_specifier "=>" "." FLOAT) (COMMENT type_specifier "=>" "." LONG) (COMMENT type_specifier "=>" "." INT) (COMMENT type_specifier "=>" "." SHORT) (COMMENT type_specifier "=>" "." CHAR) (COMMENT type_specifier "=>" "." VOID) (COMMENT storage_class_specifier "=>" "." REGISTER) (COMMENT storage_class_specifier "=>" "." AUTO) (COMMENT storage_class_specifier "=>" "." STATIC) (COMMENT storage_class_specifier "=>" "." EXTERN) (COMMENT storage_class_specifier "=>" "." TYPEDEF) (COMMENT declaration_specifiers "=>" "." type_qualifier declaration_specifiers) (COMMENT declaration_specifiers "=>" "." type_qualifier) (COMMENT declaration_specifiers "=>" "." type_specifier declaration_specifiers) (COMMENT declaration_specifiers "=>" "." type_specifier) (COMMENT declaration_specifiers "=>" "." storage_class_specifier declaration_specifiers) (COMMENT declaration_specifiers "=>" "." storage_class_specifier) (SHIFT (IDENTIFIER) s15) (SHIFT (TYPE_NAME) s16) (SHIFT (TYPEDEF) s17) (SHIFT (EXTERN) s18) (SHIFT (STATIC) s19) (SHIFT (AUTO) s20) (SHIFT (REGISTER) s21) (SHIFT (CHAR) s22) (SHIFT (SHORT) s23) (SHIFT (INT) s24) (SHIFT (LONG) s25) (SHIFT (SIGNED) s26) (SHIFT (UNSIGNED) s27) (SHIFT (FLOAT) s28) (SHIFT (DOUBLE) s29) (SHIFT (CONST) s30) (SHIFT (VOLATILE) s31) (SHIFT (VOID) s32) (SHIFT (STRUCT) s33) (SHIFT (UNION) s34) (SHIFT (ENUM) s35) (SHIFT (LPAREN) s114) (SHIFT (RPAREN) s105) (SHIFT (LBRACK) s96) (SHIFT (STAR) s37) (GOTO declaration_specifiers s100) (GOTO storage_class_specifier s3) (GOTO type_specifier s4) (GOTO struct_or_union_specifier s5) (GOTO struct_or_union s6) (GOTO enum_specifier s7) (GOTO type_qualifier s8) (GOTO declarator s43) (GOTO direct_declarator s10) (GOTO pointer s112) (GOTO parameter_type_list s101) (GOTO parameter_list s102) (GOTO parameter_declaration s103) (GOTO abstract_declarator s104) (GOTO direct_abstract_declarator s94))
   (STATE s115 (COMMENT direct_declarator "=>" direct_declarator "." LPAREN RPAREN) (COMMENT direct_declarator "=>" direct_declarator "." LPAREN identifier_list RPAREN) (COMMENT direct_declarator "=>" direct_declarator "." LPAREN parameter_type_list RPAREN) (COMMENT direct_declarator "=>" direct_declarator "." LBRACK RBRACK) (COMMENT direct_declarator "=>" direct_declarator "." LBRACK constant_expression RBRACK) (COMMENT declarator "=>" pointer direct_declarator ".") (REDUCE (TYPE_NAME) r131) (REDUCE (TYPEDEF) r131) (REDUCE (EXTERN) r131) (REDUCE (STATIC) r131) (REDUCE (AUTO) r131) (REDUCE (REGISTER) r131) (REDUCE (CHAR) r131) (REDUCE (SHORT) r131) (REDUCE (INT) r131) (REDUCE (LONG) r131) (REDUCE (SIGNED) r131) (REDUCE (UNSIGNED) r131) (REDUCE (FLOAT) r131) (REDUCE (DOUBLE) r131) (REDUCE (CONST) r131) (REDUCE (VOLATILE) r131) (REDUCE (VOID) r131) (REDUCE (STRUCT) r131) (REDUCE (UNION) r131) (REDUCE (ENUM) r131) (SHIFT (LPAREN) s125) (REDUCE (RPAREN) r131) (SHIFT (LBRACK) s126) (REDUCE (LCURLY) r131) (REDUCE (COMMA) r131) (REDUCE (COLON) r131) (REDUCE (EQUAL_SIGN) r131) (REDUCE (SEMICOLON) r131))
   (STATE s116 (COMMENT direct_abstract_declarator "=>" direct_abstract_declarator "." LPAREN parameter_type_list RPAREN) (COMMENT direct_abstract_declarator "=>" direct_abstract_declarator "." LPAREN RPAREN) (COMMENT direct_abstract_declarator "=>" direct_abstract_declarator "." LBRACK constant_expression RBRACK) (COMMENT direct_abstract_declarator "=>" direct_abstract_declarator "." LBRACK RBRACK) (COMMENT abstract_declarator "=>" pointer direct_abstract_declarator ".") (SHIFT (LPAREN) s117) (REDUCE (RPAREN) r159) (SHIFT (LBRACK) s118) (REDUCE (COMMA) r159))
   (STATE s117 (COMMENT direct_abstract_declarator "=>" direct_abstract_declarator LPAREN "." parameter_type_list RPAREN) (COMMENT direct_abstract_declarator "=>" direct_abstract_declarator LPAREN "." RPAREN) (COMMENT parameter_declaration "=>" "." declaration_specifiers) (COMMENT parameter_declaration "=>" "." declaration_specifiers abstract_declarator) (COMMENT parameter_declaration "=>" "." declaration_specifiers declarator) (COMMENT parameter_list "=>" "." parameter_list COMMA parameter_declaration) (COMMENT parameter_list "=>" "." parameter_declaration) (COMMENT parameter_type_list "=>" "." parameter_list COMMA ELLIPSIS) (COMMENT parameter_type_list "=>" "." parameter_list) (COMMENT type_qualifier "=>" "." VOLATILE) (COMMENT type_qualifier "=>" "." CONST) (COMMENT enum_specifier "=>" "." ENUM IDENTIFIER) (COMMENT enum_specifier "=>" "." ENUM IDENTIFIER LCURLY enumerator_list RCURLY) (COMMENT enum_specifier "=>" "." ENUM LCURLY enumerator_list RCURLY) (COMMENT struct_or_union "=>" "." UNION) (COMMENT struct_or_union "=>" "." STRUCT) (COMMENT struct_or_union_specifier "=>" "." struct_or_union IDENTIFIER) (COMMENT struct_or_union_specifier "=>" "." struct_or_union LCURLY struct_declaration_list RCURLY) (COMMENT struct_or_union_specifier "=>" "." struct_or_union IDENTIFIER LCURLY struct_declaration_list RCURLY) (COMMENT type_specifier "=>" "." TYPE_NAME) (COMMENT type_specifier "=>" "." enum_specifier) (COMMENT type_specifier "=>" "." struct_or_union_specifier) (COMMENT type_specifier "=>" "." UNSIGNED) (COMMENT type_specifier "=>" "." SIGNED) (COMMENT type_specifier "=>" "." DOUBLE) (COMMENT type_specifier "=>" "." FLOAT) (COMMENT type_specifier "=>" "." LONG) (COMMENT type_specifier "=>" "." INT) (COMMENT type_specifier "=>" "." SHORT) (COMMENT type_specifier "=>" "." CHAR) (COMMENT type_specifier "=>" "." VOID) (COMMENT storage_class_specifier "=>" "." REGISTER) (COMMENT storage_class_specifier "=>" "." AUTO) (COMMENT storage_class_specifier "=>" "." STATIC) (COMMENT storage_class_specifier "=>" "." EXTERN) (COMMENT storage_class_specifier "=>" "." TYPEDEF) (COMMENT declaration_specifiers "=>" "." type_qualifier declaration_specifiers) (COMMENT declaration_specifiers "=>" "." type_qualifier) (COMMENT declaration_specifiers "=>" "." type_specifier declaration_specifiers) (COMMENT declaration_specifiers "=>" "." type_specifier) (COMMENT declaration_specifiers "=>" "." storage_class_specifier declaration_specifiers) (COMMENT declaration_specifiers "=>" "." storage_class_specifier) (SHIFT (TYPE_NAME) s16) (SHIFT (TYPEDEF) s17) (SHIFT (EXTERN) s18) (SHIFT (STATIC) s19) (SHIFT (AUTO) s20) (SHIFT (REGISTER) s21) (SHIFT (CHAR) s22) (SHIFT (SHORT) s23) (SHIFT (INT) s24) (SHIFT (LONG) s25) (SHIFT (SIGNED) s26) (SHIFT (UNSIGNED) s27) (SHIFT (FLOAT) s28) (SHIFT (DOUBLE) s29) (SHIFT (CONST) s30) (SHIFT (VOLATILE) s31) (SHIFT (VOID) s32) (SHIFT (STRUCT) s33) (SHIFT (UNION) s34) (SHIFT (ENUM) s35) (SHIFT (RPAREN) s123) (GOTO declaration_specifiers s100) (GOTO storage_class_specifier s3) (GOTO type_specifier s4) (GOTO struct_or_union_specifier s5) (GOTO struct_or_union s6) (GOTO enum_specifier s7) (GOTO type_qualifier s8) (GOTO parameter_type_list s122) (GOTO parameter_list s102) (GOTO parameter_declaration s103))
   (STATE s118 (COMMENT direct_abstract_declarator "=>" direct_abstract_declarator LBRACK "." constant_expression RBRACK) (COMMENT direct_abstract_declarator "=>" direct_abstract_declarator LBRACK "." RBRACK) (COMMENT constant_expression "=>" "." conditional_expression) (COMMENT conditional_expression "=>" "." logical_or_expression QMARK expression COLON conditional_expression) (COMMENT conditional_expression "=>" "." logical_or_expression) (COMMENT logical_or_expression "=>" "." logical_or_expression OR_OP logical_and_expression) (COMMENT logical_or_expression "=>" "." logical_and_expression) (COMMENT logical_and_expression "=>" "." logical_and_expression AND_OP inclusive_or_expression) (COMMENT logical_and_expression "=>" "." inclusive_or_expression) (COMMENT inclusive_or_expression "=>" "." inclusive_or_expression PIPE exclusive_or_expression) (COMMENT inclusive_or_expression "=>" "." exclusive_or_expression) (COMMENT exclusive_or_expression "=>" "." exclusive_or_expression CARROT and_expression) (COMMENT exclusive_or_expression "=>" "." and_expression) (COMMENT and_expression "=>" "." and_expression AMPERSAND equality_expression) (COMMENT and_expression "=>" "." equality_expression) (COMMENT equality_expression "=>" "." equality_expression NE_OP relational_expression) (COMMENT equality_expression "=>" "." equality_expression EQ_OP relational_expression) (COMMENT equality_expression "=>" "." relational_expression) (COMMENT relational_expression "=>" "." relational_expression GE_OP shift_expression) (COMMENT relational_expression "=>" "." relational_expression LE_OP shift_expression) (COMMENT relational_expression "=>" "." relational_expression GREATER_OP shift_expression) (COMMENT relational_expression "=>" "." relational_expression LESS_OP shift_expression) (COMMENT relational_expression "=>" "." shift_expression) (COMMENT shift_expression "=>" "." shift_expression RIGHT_OP additive_expression) (COMMENT shift_expression "=>" "." shift_expression LEFT_OP additive_expression) (COMMENT shift_expression "=>" "." additive_expression) (COMMENT additive_expression "=>" "." additive_expression MINUS multiplicative_expression) (COMMENT additive_expression "=>" "." additive_expression PLUS multiplicative_expression) (COMMENT additive_expression "=>" "." multiplicative_expression) (COMMENT multiplicative_expression "=>" "." multiplicative_expression AMPERSAND cast_expression) (COMMENT multiplicative_expression "=>" "." multiplicative_expression FORWARD_SLASH cast_expression) (COMMENT multiplicative_expression "=>" "." multiplicative_expression STAR cast_expression) (COMMENT multiplicative_expression "=>" "." cast_expression) (COMMENT cast_expression "=>" "." LPAREN type_name RPAREN cast_expression) (COMMENT cast_expression "=>" "." unary_expression) (COMMENT unary_operator "=>" "." BANG) (COMMENT unary_operator "=>" "." TWIDLE) (COMMENT unary_operator "=>" "." MINUS) (COMMENT unary_operator "=>" "." PLUS) (COMMENT unary_operator "=>" "." STAR) (COMMENT unary_operator "=>" "." AMPERSAND) (COMMENT unary_expression "=>" "." SIZEOF LPAREN type_name RPAREN) (COMMENT unary_expression "=>" "." SIZEOF unary_expression) (COMMENT unary_expression "=>" "." unary_operator cast_expression) (COMMENT unary_expression "=>" "." DEC_OP unary_expression) (COMMENT unary_expression "=>" "." INC_OP unary_expression) (COMMENT unary_expression "=>" "." postfix_expression) (COMMENT postfix_expression "=>" "." postfix_expression DEC_OP) (COMMENT postfix_expression "=>" "." postfix_expression INC_OP) (COMMENT postfix_expression "=>" "." postfix_expression PTR_OP IDENTIFIER) (COMMENT postfix_expression "=>" "." postfix_expression DOT IDENTIFIER) (COMMENT postfix_expression "=>" "." postfix_expression LPAREN argument_expression_list RPAREN) (COMMENT postfix_expression "=>" "." postfix_expression LPAREN RPAREN) (COMMENT postfix_expression "=>" "." postfix_expression LBRACK expression RBRACK) (COMMENT postfix_expression "=>" "." primary_expression) (COMMENT primary_expression "=>" "." LPAREN expression RPAREN) (COMMENT primary_expression "=>" "." STRING_LITERAL) (COMMENT primary_expression "=>" "." CONSTANT) (COMMENT primary_expression "=>" "." IDENTIFIER) (SHIFT (IDENTIFIER) s68) (SHIFT (CONSTANT) s69) (SHIFT (STRING_LITERAL) s70) (SHIFT (SIZEOF) s71) (SHIFT (INC_OP) s72) (SHIFT (DEC_OP) s73) (SHIFT (LPAREN) s74) (SHIFT (RBRACK) s120) (SHIFT (AMPERSAND) s75) (SHIFT (STAR) s76) (SHIFT (PLUS) s77) (SHIFT (MINUS) s78) (SHIFT (TWIDLE) s79) (SHIFT (BANG) s80) (GOTO primary_expression s51) (GOTO postfix_expression s52) (GOTO unary_expression s53) (GOTO unary_operator s54) (GOTO cast_expression s55) (GOTO multiplicative_expression s56) (GOTO additive_expression s57) (GOTO shift_expression s58) (GOTO relational_expression s59) (GOTO equality_expression s60) (GOTO and_expression s61) (GOTO exclusive_or_expression s62) (GOTO inclusive_or_expression s63) (GOTO logical_and_expression s64) (GOTO logical_or_expression s65) (GOTO conditional_expression s66) (GOTO constant_expression s119))
   (STATE s119 (COMMENT direct_abstract_declarator "=>" direct_abstract_declarator LBRACK constant_expression "." RBRACK) (SHIFT (RBRACK) s121))
   (STATE s120 (COMMENT direct_abstract_declarator "=>" direct_abstract_declarator LBRACK RBRACK ".") (REDUCE () r163))
   (STATE s121 (COMMENT direct_abstract_declarator "=>" direct_abstract_declarator LBRACK constant_expression RBRACK ".") (REDUCE () r164))
   (STATE s122 (COMMENT direct_abstract_declarator "=>" direct_abstract_declarator LPAREN parameter_type_list "." RPAREN) (SHIFT (RPAREN) s124))
   (STATE s123 (COMMENT direct_abstract_declarator "=>" direct_abstract_declarator LPAREN RPAREN ".") (REDUCE () r167))
   (STATE s124 (COMMENT direct_abstract_declarator "=>" direct_abstract_declarator LPAREN parameter_type_list RPAREN ".") (REDUCE () r168))
   (STATE s125 (COMMENT identifier_list "=>" "." identifier_list COMMA IDENTIFIER) (COMMENT identifier_list "=>" "." IDENTIFIER) (COMMENT parameter_declaration "=>" "." declaration_specifiers) (COMMENT parameter_declaration "=>" "." declaration_specifiers abstract_declarator) (COMMENT parameter_declaration "=>" "." declaration_specifiers declarator) (COMMENT parameter_list "=>" "." parameter_list COMMA parameter_declaration) (COMMENT parameter_list "=>" "." parameter_declaration) (COMMENT parameter_type_list "=>" "." parameter_list COMMA ELLIPSIS) (COMMENT parameter_type_list "=>" "." parameter_list) (COMMENT direct_declarator "=>" direct_declarator LPAREN "." RPAREN) (COMMENT direct_declarator "=>" direct_declarator LPAREN "." identifier_list RPAREN) (COMMENT direct_declarator "=>" direct_declarator LPAREN "." parameter_type_list RPAREN) (COMMENT type_qualifier "=>" "." VOLATILE) (COMMENT type_qualifier "=>" "." CONST) (COMMENT enum_specifier "=>" "." ENUM IDENTIFIER) (COMMENT enum_specifier "=>" "." ENUM IDENTIFIER LCURLY enumerator_list RCURLY) (COMMENT enum_specifier "=>" "." ENUM LCURLY enumerator_list RCURLY) (COMMENT struct_or_union "=>" "." UNION) (COMMENT struct_or_union "=>" "." STRUCT) (COMMENT struct_or_union_specifier "=>" "." struct_or_union IDENTIFIER) (COMMENT struct_or_union_specifier "=>" "." struct_or_union LCURLY struct_declaration_list RCURLY) (COMMENT struct_or_union_specifier "=>" "." struct_or_union IDENTIFIER LCURLY struct_declaration_list RCURLY) (COMMENT type_specifier "=>" "." TYPE_NAME) (COMMENT type_specifier "=>" "." enum_specifier) (COMMENT type_specifier "=>" "." struct_or_union_specifier) (COMMENT type_specifier "=>" "." UNSIGNED) (COMMENT type_specifier "=>" "." SIGNED) (COMMENT type_specifier "=>" "." DOUBLE) (COMMENT type_specifier "=>" "." FLOAT) (COMMENT type_specifier "=>" "." LONG) (COMMENT type_specifier "=>" "." INT) (COMMENT type_specifier "=>" "." SHORT) (COMMENT type_specifier "=>" "." CHAR) (COMMENT type_specifier "=>" "." VOID) (COMMENT storage_class_specifier "=>" "." REGISTER) (COMMENT storage_class_specifier "=>" "." AUTO) (COMMENT storage_class_specifier "=>" "." STATIC) (COMMENT storage_class_specifier "=>" "." EXTERN) (COMMENT storage_class_specifier "=>" "." TYPEDEF) (COMMENT declaration_specifiers "=>" "." type_qualifier declaration_specifiers) (COMMENT declaration_specifiers "=>" "." type_qualifier) (COMMENT declaration_specifiers "=>" "." type_specifier declaration_specifiers) (COMMENT declaration_specifiers "=>" "." type_specifier) (COMMENT declaration_specifiers "=>" "." storage_class_specifier declaration_specifiers) (COMMENT declaration_specifiers "=>" "." storage_class_specifier) (SHIFT (IDENTIFIER) s132) (SHIFT (TYPE_NAME) s16) (SHIFT (TYPEDEF) s17) (SHIFT (EXTERN) s18) (SHIFT (STATIC) s19) (SHIFT (AUTO) s20) (SHIFT (REGISTER) s21) (SHIFT (CHAR) s22) (SHIFT (SHORT) s23) (SHIFT (INT) s24) (SHIFT (LONG) s25) (SHIFT (SIGNED) s26) (SHIFT (UNSIGNED) s27) (SHIFT (FLOAT) s28) (SHIFT (DOUBLE) s29) (SHIFT (CONST) s30) (SHIFT (VOLATILE) s31) (SHIFT (VOID) s32) (SHIFT (STRUCT) s33) (SHIFT (UNION) s34) (SHIFT (ENUM) s35) (SHIFT (RPAREN) s133) (GOTO declaration_specifiers s100) (GOTO storage_class_specifier s3) (GOTO type_specifier s4) (GOTO struct_or_union_specifier s5) (GOTO struct_or_union s6) (GOTO enum_specifier s7) (GOTO type_qualifier s8) (GOTO parameter_type_list s130) (GOTO parameter_list s102) (GOTO parameter_declaration s103) (GOTO identifier_list s131))
   (STATE s126 (COMMENT direct_declarator "=>" direct_declarator LBRACK "." RBRACK) (COMMENT direct_declarator "=>" direct_declarator LBRACK "." constant_expression RBRACK) (COMMENT constant_expression "=>" "." conditional_expression) (COMMENT conditional_expression "=>" "." logical_or_expression QMARK expression COLON conditional_expression) (COMMENT conditional_expression "=>" "." logical_or_expression) (COMMENT logical_or_expression "=>" "." logical_or_expression OR_OP logical_and_expression) (COMMENT logical_or_expression "=>" "." logical_and_expression) (COMMENT logical_and_expression "=>" "." logical_and_expression AND_OP inclusive_or_expression) (COMMENT logical_and_expression "=>" "." inclusive_or_expression) (COMMENT inclusive_or_expression "=>" "." inclusive_or_expression PIPE exclusive_or_expression) (COMMENT inclusive_or_expression "=>" "." exclusive_or_expression) (COMMENT exclusive_or_expression "=>" "." exclusive_or_expression CARROT and_expression) (COMMENT exclusive_or_expression "=>" "." and_expression) (COMMENT and_expression "=>" "." and_expression AMPERSAND equality_expression) (COMMENT and_expression "=>" "." equality_expression) (COMMENT equality_expression "=>" "." equality_expression NE_OP relational_expression) (COMMENT equality_expression "=>" "." equality_expression EQ_OP relational_expression) (COMMENT equality_expression "=>" "." relational_expression) (COMMENT relational_expression "=>" "." relational_expression GE_OP shift_expression) (COMMENT relational_expression "=>" "." relational_expression LE_OP shift_expression) (COMMENT relational_expression "=>" "." relational_expression GREATER_OP shift_expression) (COMMENT relational_expression "=>" "." relational_expression LESS_OP shift_expression) (COMMENT relational_expression "=>" "." shift_expression) (COMMENT shift_expression "=>" "." shift_expression RIGHT_OP additive_expression) (COMMENT shift_expression "=>" "." shift_expression LEFT_OP additive_expression) (COMMENT shift_expression "=>" "." additive_expression) (COMMENT additive_expression "=>" "." additive_expression MINUS multiplicative_expression) (COMMENT additive_expression "=>" "." additive_expression PLUS multiplicative_expression) (COMMENT additive_expression "=>" "." multiplicative_expression) (COMMENT multiplicative_expression "=>" "." multiplicative_expression AMPERSAND cast_expression) (COMMENT multiplicative_expression "=>" "." multiplicative_expression FORWARD_SLASH cast_expression) (COMMENT multiplicative_expression "=>" "." multiplicative_expression STAR cast_expression) (COMMENT multiplicative_expression "=>" "." cast_expression) (COMMENT cast_expression "=>" "." LPAREN type_name RPAREN cast_expression) (COMMENT cast_expression "=>" "." unary_expression) (COMMENT unary_operator "=>" "." BANG) (COMMENT unary_operator "=>" "." TWIDLE) (COMMENT unary_operator "=>" "." MINUS) (COMMENT unary_operator "=>" "." PLUS) (COMMENT unary_operator "=>" "." STAR) (COMMENT unary_operator "=>" "." AMPERSAND) (COMMENT unary_expression "=>" "." SIZEOF LPAREN type_name RPAREN) (COMMENT unary_expression "=>" "." SIZEOF unary_expression) (COMMENT unary_expression "=>" "." unary_operator cast_expression) (COMMENT unary_expression "=>" "." DEC_OP unary_expression) (COMMENT unary_expression "=>" "." INC_OP unary_expression) (COMMENT unary_expression "=>" "." postfix_expression) (COMMENT postfix_expression "=>" "." postfix_expression DEC_OP) (COMMENT postfix_expression "=>" "." postfix_expression INC_OP) (COMMENT postfix_expression "=>" "." postfix_expression PTR_OP IDENTIFIER) (COMMENT postfix_expression "=>" "." postfix_expression DOT IDENTIFIER) (COMMENT postfix_expression "=>" "." postfix_expression LPAREN argument_expression_list RPAREN) (COMMENT postfix_expression "=>" "." postfix_expression LPAREN RPAREN) (COMMENT postfix_expression "=>" "." postfix_expression LBRACK expression RBRACK) (COMMENT postfix_expression "=>" "." primary_expression) (COMMENT primary_expression "=>" "." LPAREN expression RPAREN) (COMMENT primary_expression "=>" "." STRING_LITERAL) (COMMENT primary_expression "=>" "." CONSTANT) (COMMENT primary_expression "=>" "." IDENTIFIER) (SHIFT (IDENTIFIER) s68) (SHIFT (CONSTANT) s69) (SHIFT (STRING_LITERAL) s70) (SHIFT (SIZEOF) s71) (SHIFT (INC_OP) s72) (SHIFT (DEC_OP) s73) (SHIFT (LPAREN) s74) (SHIFT (RBRACK) s128) (SHIFT (AMPERSAND) s75) (SHIFT (STAR) s76) (SHIFT (PLUS) s77) (SHIFT (MINUS) s78) (SHIFT (TWIDLE) s79) (SHIFT (BANG) s80) (GOTO primary_expression s51) (GOTO postfix_expression s52) (GOTO unary_expression s53) (GOTO unary_operator s54) (GOTO cast_expression s55) (GOTO multiplicative_expression s56) (GOTO additive_expression s57) (GOTO shift_expression s58) (GOTO relational_expression s59) (GOTO equality_expression s60) (GOTO and_expression s61) (GOTO exclusive_or_expression s62) (GOTO inclusive_or_expression s63) (GOTO logical_and_expression s64) (GOTO logical_or_expression s65) (GOTO conditional_expression s66) (GOTO constant_expression s127))
   (STATE s127 (COMMENT direct_declarator "=>" direct_declarator LBRACK constant_expression "." RBRACK) (SHIFT (RBRACK) s129))
   (STATE s128 (COMMENT direct_declarator "=>" direct_declarator LBRACK RBRACK ".") (REDUCE () r136))
   (STATE s129 (COMMENT direct_declarator "=>" direct_declarator LBRACK constant_expression RBRACK ".") (REDUCE () r135))
   (STATE s130 (COMMENT direct_declarator "=>" direct_declarator LPAREN parameter_type_list "." RPAREN) (SHIFT (RPAREN) s137))
   (STATE s131 (COMMENT identifier_list "=>" identifier_list "." COMMA IDENTIFIER) (COMMENT direct_declarator "=>" direct_declarator LPAREN identifier_list "." RPAREN) (SHIFT (RPAREN) s134) (SHIFT (COMMA) s135))
   (STATE s132 (COMMENT identifier_list "=>" IDENTIFIER ".") (REDUCE () r153))
   (STATE s133 (COMMENT direct_declarator "=>" direct_declarator LPAREN RPAREN ".") (REDUCE () r139))
   (STATE s134 (COMMENT direct_declarator "=>" direct_declarator LPAREN identifier_list RPAREN ".") (REDUCE () r138))
   (STATE s135 (COMMENT identifier_list "=>" identifier_list COMMA "." IDENTIFIER) (SHIFT (IDENTIFIER) s136))
   (STATE s136 (COMMENT identifier_list "=>" identifier_list COMMA IDENTIFIER ".") (REDUCE () r154))
   (STATE s137 (COMMENT direct_declarator "=>" direct_declarator LPAREN parameter_type_list RPAREN ".") (REDUCE () r137))
   (STATE s138 (COMMENT specifier_qualifier_list "=>" type_specifier specifier_qualifier_list ".") (REDUCE () r113))
   (STATE s139 (COMMENT primary_expression "=>" LPAREN expression RPAREN ".") (REDUCE () r5))
   (STATE s140 (COMMENT expression "=>" expression COMMA "." assignment_expression) (COMMENT assignment_expression "=>" "." unary_expression assignment_operator assignment_expression) (COMMENT assignment_expression "=>" "." conditional_expression) (COMMENT conditional_expression "=>" "." logical_or_expression QMARK expression COLON conditional_expression) (COMMENT conditional_expression "=>" "." logical_or_expression) (COMMENT logical_or_expression "=>" "." logical_or_expression OR_OP logical_and_expression) (COMMENT logical_or_expression "=>" "." logical_and_expression) (COMMENT logical_and_expression "=>" "." logical_and_expression AND_OP inclusive_or_expression) (COMMENT logical_and_expression "=>" "." inclusive_or_expression) (COMMENT inclusive_or_expression "=>" "." inclusive_or_expression PIPE exclusive_or_expression) (COMMENT inclusive_or_expression "=>" "." exclusive_or_expression) (COMMENT exclusive_or_expression "=>" "." exclusive_or_expression CARROT and_expression) (COMMENT exclusive_or_expression "=>" "." and_expression) (COMMENT and_expression "=>" "." and_expression AMPERSAND equality_expression) (COMMENT and_expression "=>" "." equality_expression) (COMMENT equality_expression "=>" "." equality_expression NE_OP relational_expression) (COMMENT equality_expression "=>" "." equality_expression EQ_OP relational_expression) (COMMENT equality_expression "=>" "." relational_expression) (COMMENT relational_expression "=>" "." relational_expression GE_OP shift_expression) (COMMENT relational_expression "=>" "." relational_expression LE_OP shift_expression) (COMMENT relational_expression "=>" "." relational_expression GREATER_OP shift_expression) (COMMENT relational_expression "=>" "." relational_expression LESS_OP shift_expression) (COMMENT relational_expression "=>" "." shift_expression) (COMMENT shift_expression "=>" "." shift_expression RIGHT_OP additive_expression) (COMMENT shift_expression "=>" "." shift_expression LEFT_OP additive_expression) (COMMENT shift_expression "=>" "." additive_expression) (COMMENT additive_expression "=>" "." additive_expression MINUS multiplicative_expression) (COMMENT additive_expression "=>" "." additive_expression PLUS multiplicative_expression) (COMMENT additive_expression "=>" "." multiplicative_expression) (COMMENT multiplicative_expression "=>" "." multiplicative_expression AMPERSAND cast_expression) (COMMENT multiplicative_expression "=>" "." multiplicative_expression FORWARD_SLASH cast_expression) (COMMENT multiplicative_expression "=>" "." multiplicative_expression STAR cast_expression) (COMMENT multiplicative_expression "=>" "." cast_expression) (COMMENT cast_expression "=>" "." LPAREN type_name RPAREN cast_expression) (COMMENT cast_expression "=>" "." unary_expression) (COMMENT unary_operator "=>" "." BANG) (COMMENT unary_operator "=>" "." TWIDLE) (COMMENT unary_operator "=>" "." MINUS) (COMMENT unary_operator "=>" "." PLUS) (COMMENT unary_operator "=>" "." STAR) (COMMENT unary_operator "=>" "." AMPERSAND) (COMMENT unary_expression "=>" "." SIZEOF LPAREN type_name RPAREN) (COMMENT unary_expression "=>" "." SIZEOF unary_expression) (COMMENT unary_expression "=>" "." unary_operator cast_expression) (COMMENT unary_expression "=>" "." DEC_OP unary_expression) (COMMENT unary_expression "=>" "." INC_OP unary_expression) (COMMENT unary_expression "=>" "." postfix_expression) (COMMENT postfix_expression "=>" "." postfix_expression DEC_OP) (COMMENT postfix_expression "=>" "." postfix_expression INC_OP) (COMMENT postfix_expression "=>" "." postfix_expression PTR_OP IDENTIFIER) (COMMENT postfix_expression "=>" "." postfix_expression DOT IDENTIFIER) (COMMENT postfix_expression "=>" "." postfix_expression LPAREN argument_expression_list RPAREN) (COMMENT postfix_expression "=>" "." postfix_expression LPAREN RPAREN) (COMMENT postfix_expression "=>" "." postfix_expression LBRACK expression RBRACK) (COMMENT postfix_expression "=>" "." primary_expression) (COMMENT primary_expression "=>" "." LPAREN expression RPAREN) (COMMENT primary_expression "=>" "." STRING_LITERAL) (COMMENT primary_expression "=>" "." CONSTANT) (COMMENT primary_expression "=>" "." IDENTIFIER) (SHIFT (IDENTIFIER) s68) (SHIFT (CONSTANT) s69) (SHIFT (STRING_LITERAL) s70) (SHIFT (SIZEOF) s71) (SHIFT (INC_OP) s72) (SHIFT (DEC_OP) s73) (SHIFT (LPAREN) s74) (SHIFT (AMPERSAND) s75) (SHIFT (STAR) s76) (SHIFT (PLUS) s77) (SHIFT (MINUS) s78) (SHIFT (TWIDLE) s79) (SHIFT (BANG) s80) (GOTO primary_expression s51) (GOTO postfix_expression s52) (GOTO unary_expression s81) (GOTO unary_operator s54) (GOTO cast_expression s55) (GOTO multiplicative_expression s56) (GOTO additive_expression s57) (GOTO shift_expression s58) (GOTO relational_expression s59) (GOTO equality_expression s60) (GOTO and_expression s61) (GOTO exclusive_or_expression s62) (GOTO inclusive_or_expression s63) (GOTO logical_and_expression s64) (GOTO logical_or_expression s65) (GOTO conditional_expression s82) (GOTO assignment_expression s141))
   (STATE s141 (COMMENT expression "=>" expression COMMA assignment_expression ".") (REDUCE () r74))
   (STATE s142 (COMMENT assignment_expression "=>" unary_expression assignment_operator "." assignment_expression) (COMMENT assignment_expression "=>" "." unary_expression assignment_operator assignment_expression) (COMMENT assignment_expression "=>" "." conditional_expression) (COMMENT conditional_expression "=>" "." logical_or_expression QMARK expression COLON conditional_expression) (COMMENT conditional_expression "=>" "." logical_or_expression) (COMMENT logical_or_expression "=>" "." logical_or_expression OR_OP logical_and_expression) (COMMENT logical_or_expression "=>" "." logical_and_expression) (COMMENT logical_and_expression "=>" "." logical_and_expression AND_OP inclusive_or_expression) (COMMENT logical_and_expression "=>" "." inclusive_or_expression) (COMMENT inclusive_or_expression "=>" "." inclusive_or_expression PIPE exclusive_or_expression) (COMMENT inclusive_or_expression "=>" "." exclusive_or_expression) (COMMENT exclusive_or_expression "=>" "." exclusive_or_expression CARROT and_expression) (COMMENT exclusive_or_expression "=>" "." and_expression) (COMMENT and_expression "=>" "." and_expression AMPERSAND equality_expression) (COMMENT and_expression "=>" "." equality_expression) (COMMENT equality_expression "=>" "." equality_expression NE_OP relational_expression) (COMMENT equality_expression "=>" "." equality_expression EQ_OP relational_expression) (COMMENT equality_expression "=>" "." relational_expression) (COMMENT relational_expression "=>" "." relational_expression GE_OP shift_expression) (COMMENT relational_expression "=>" "." relational_expression LE_OP shift_expression) (COMMENT relational_expression "=>" "." relational_expression GREATER_OP shift_expression) (COMMENT relational_expression "=>" "." relational_expression LESS_OP shift_expression) (COMMENT relational_expression "=>" "." shift_expression) (COMMENT shift_expression "=>" "." shift_expression RIGHT_OP additive_expression) (COMMENT shift_expression "=>" "." shift_expression LEFT_OP additive_expression) (COMMENT shift_expression "=>" "." additive_expression) (COMMENT additive_expression "=>" "." additive_expression MINUS multiplicative_expression) (COMMENT additive_expression "=>" "." additive_expression PLUS multiplicative_expression) (COMMENT additive_expression "=>" "." multiplicative_expression) (COMMENT multiplicative_expression "=>" "." multiplicative_expression AMPERSAND cast_expression) (COMMENT multiplicative_expression "=>" "." multiplicative_expression FORWARD_SLASH cast_expression) (COMMENT multiplicative_expression "=>" "." multiplicative_expression STAR cast_expression) (COMMENT multiplicative_expression "=>" "." cast_expression) (COMMENT cast_expression "=>" "." LPAREN type_name RPAREN cast_expression) (COMMENT cast_expression "=>" "." unary_expression) (COMMENT unary_operator "=>" "." BANG) (COMMENT unary_operator "=>" "." TWIDLE) (COMMENT unary_operator "=>" "." MINUS) (COMMENT unary_operator "=>" "." PLUS) (COMMENT unary_operator "=>" "." STAR) (COMMENT unary_operator "=>" "." AMPERSAND) (COMMENT unary_expression "=>" "." SIZEOF LPAREN type_name RPAREN) (COMMENT unary_expression "=>" "." SIZEOF unary_expression) (COMMENT unary_expression "=>" "." unary_operator cast_expression) (COMMENT unary_expression "=>" "." DEC_OP unary_expression) (COMMENT unary_expression "=>" "." INC_OP unary_expression) (COMMENT unary_expression "=>" "." postfix_expression) (COMMENT postfix_expression "=>" "." postfix_expression DEC_OP) (COMMENT postfix_expression "=>" "." postfix_expression INC_OP) (COMMENT postfix_expression "=>" "." postfix_expression PTR_OP IDENTIFIER) (COMMENT postfix_expression "=>" "." postfix_expression DOT IDENTIFIER) (COMMENT postfix_expression "=>" "." postfix_expression LPAREN argument_expression_list RPAREN) (COMMENT postfix_expression "=>" "." postfix_expression LPAREN RPAREN) (COMMENT postfix_expression "=>" "." postfix_expression LBRACK expression RBRACK) (COMMENT postfix_expression "=>" "." primary_expression) (COMMENT primary_expression "=>" "." LPAREN expression RPAREN) (COMMENT primary_expression "=>" "." STRING_LITERAL) (COMMENT primary_expression "=>" "." CONSTANT) (COMMENT primary_expression "=>" "." IDENTIFIER) (SHIFT (IDENTIFIER) s68) (SHIFT (CONSTANT) s69) (SHIFT (STRING_LITERAL) s70) (SHIFT (SIZEOF) s71) (SHIFT (INC_OP) s72) (SHIFT (DEC_OP) s73) (SHIFT (LPAREN) s74) (SHIFT (AMPERSAND) s75) (SHIFT (STAR) s76) (SHIFT (PLUS) s77) (SHIFT (MINUS) s78) (SHIFT (TWIDLE) s79) (SHIFT (BANG) s80) (GOTO primary_expression s51) (GOTO postfix_expression s52) (GOTO unary_expression s81) (GOTO unary_operator s54) (GOTO cast_expression s55) (GOTO multiplicative_expression s56) (GOTO additive_expression s57) (GOTO shift_expression s58) (GOTO relational_expression s59) (GOTO equality_expression s60) (GOTO and_expression s61) (GOTO exclusive_or_expression s62) (GOTO inclusive_or_expression s63) (GOTO logical_and_expression s64) (GOTO logical_or_expression s65) (GOTO conditional_expression s82) (GOTO assignment_expression s154))
   (STATE s143 (COMMENT assignment_operator "=>" MUL_ASSIGN ".") (REDUCE () r63))
   (STATE s144 (COMMENT assignment_operator "=>" DIV_ASSIGN ".") (REDUCE () r64))
   (STATE s145 (COMMENT assignment_operator "=>" MOD_ASSIGN ".") (REDUCE () r65))
   (STATE s146 (COMMENT assignment_operator "=>" ADD_ASSIGN ".") (REDUCE () r66))
   (STATE s147 (COMMENT assignment_operator "=>" SUB_ASSIGN ".") (REDUCE () r67))
   (STATE s148 (COMMENT assignment_operator "=>" LEFT_ASSIGN ".") (REDUCE () r68))
   (STATE s149 (COMMENT assignment_operator "=>" RIGHT_ASSIGN ".") (REDUCE () r69))
   (STATE s150 (COMMENT assignment_operator "=>" AND_ASSIGN ".") (REDUCE () r70))
   (STATE s151 (COMMENT assignment_operator "=>" XOR_ASSIGN ".") (REDUCE () r71))
   (STATE s152 (COMMENT assignment_operator "=>" OR_ASSIGN ".") (REDUCE () r72))
   (STATE s153 (COMMENT assignment_operator "=>" EQUAL_SIGN ".") (REDUCE () r62))
   (STATE s154 (COMMENT assignment_expression "=>" unary_expression assignment_operator assignment_expression ".") (REDUCE () r61))
   (STATE s155 (COMMENT unary_expression "=>" DEC_OP unary_expression ".") (REDUCE () r18))
   (STATE s156 (COMMENT expression "=>" "." expression COMMA assignment_expression) (COMMENT expression "=>" "." assignment_expression) (COMMENT assignment_expression "=>" "." unary_expression assignment_operator assignment_expression) (COMMENT assignment_expression "=>" "." conditional_expression) (COMMENT conditional_expression "=>" "." logical_or_expression QMARK expression COLON conditional_expression) (COMMENT conditional_expression "=>" "." logical_or_expression) (COMMENT logical_or_expression "=>" "." logical_or_expression OR_OP logical_and_expression) (COMMENT logical_or_expression "=>" "." logical_and_expression) (COMMENT logical_and_expression "=>" "." logical_and_expression AND_OP inclusive_or_expression) (COMMENT logical_and_expression "=>" "." inclusive_or_expression) (COMMENT inclusive_or_expression "=>" "." inclusive_or_expression PIPE exclusive_or_expression) (COMMENT inclusive_or_expression "=>" "." exclusive_or_expression) (COMMENT exclusive_or_expression "=>" "." exclusive_or_expression CARROT and_expression) (COMMENT exclusive_or_expression "=>" "." and_expression) (COMMENT and_expression "=>" "." and_expression AMPERSAND equality_expression) (COMMENT and_expression "=>" "." equality_expression) (COMMENT equality_expression "=>" "." equality_expression NE_OP relational_expression) (COMMENT equality_expression "=>" "." equality_expression EQ_OP relational_expression) (COMMENT equality_expression "=>" "." relational_expression) (COMMENT relational_expression "=>" "." relational_expression GE_OP shift_expression) (COMMENT relational_expression "=>" "." relational_expression LE_OP shift_expression) (COMMENT relational_expression "=>" "." relational_expression GREATER_OP shift_expression) (COMMENT relational_expression "=>" "." relational_expression LESS_OP shift_expression) (COMMENT relational_expression "=>" "." shift_expression) (COMMENT shift_expression "=>" "." shift_expression RIGHT_OP additive_expression) (COMMENT shift_expression "=>" "." shift_expression LEFT_OP additive_expression) (COMMENT shift_expression "=>" "." additive_expression) (COMMENT additive_expression "=>" "." additive_expression MINUS multiplicative_expression) (COMMENT additive_expression "=>" "." additive_expression PLUS multiplicative_expression) (COMMENT additive_expression "=>" "." multiplicative_expression) (COMMENT multiplicative_expression "=>" "." multiplicative_expression AMPERSAND cast_expression) (COMMENT multiplicative_expression "=>" "." multiplicative_expression FORWARD_SLASH cast_expression) (COMMENT multiplicative_expression "=>" "." multiplicative_expression STAR cast_expression) (COMMENT multiplicative_expression "=>" "." cast_expression) (COMMENT cast_expression "=>" "." LPAREN type_name RPAREN cast_expression) (COMMENT cast_expression "=>" "." unary_expression) (COMMENT unary_operator "=>" "." BANG) (COMMENT unary_operator "=>" "." TWIDLE) (COMMENT unary_operator "=>" "." MINUS) (COMMENT unary_operator "=>" "." PLUS) (COMMENT unary_operator "=>" "." STAR) (COMMENT unary_operator "=>" "." AMPERSAND) (COMMENT unary_expression "=>" "." SIZEOF LPAREN type_name RPAREN) (COMMENT unary_expression "=>" "." SIZEOF unary_expression) (COMMENT unary_expression "=>" "." unary_operator cast_expression) (COMMENT unary_expression "=>" "." DEC_OP unary_expression) (COMMENT unary_expression "=>" "." INC_OP unary_expression) (COMMENT unary_expression "=>" "." postfix_expression) (COMMENT postfix_expression "=>" "." postfix_expression DEC_OP) (COMMENT postfix_expression "=>" "." postfix_expression INC_OP) (COMMENT postfix_expression "=>" "." postfix_expression PTR_OP IDENTIFIER) (COMMENT postfix_expression "=>" "." postfix_expression DOT IDENTIFIER) (COMMENT postfix_expression "=>" "." postfix_expression LPAREN argument_expression_list RPAREN) (COMMENT postfix_expression "=>" "." postfix_expression LPAREN RPAREN) (COMMENT postfix_expression "=>" "." postfix_expression LBRACK expression RBRACK) (COMMENT postfix_expression "=>" "." primary_expression) (COMMENT primary_expression "=>" LPAREN "." expression RPAREN) (COMMENT primary_expression "=>" "." LPAREN expression RPAREN) (COMMENT primary_expression "=>" "." STRING_LITERAL) (COMMENT primary_expression "=>" "." CONSTANT) (COMMENT primary_expression "=>" "." IDENTIFIER) (SHIFT (IDENTIFIER) s68) (SHIFT (CONSTANT) s69) (SHIFT (STRING_LITERAL) s70) (SHIFT (SIZEOF) s71) (SHIFT (INC_OP) s72) (SHIFT (DEC_OP) s73) (SHIFT (LPAREN) s74) (SHIFT (AMPERSAND) s75) (SHIFT (STAR) s76) (SHIFT (PLUS) s77) (SHIFT (MINUS) s78) (SHIFT (TWIDLE) s79) (SHIFT (BANG) s80) (GOTO primary_expression s51) (GOTO postfix_expression s52) (GOTO unary_expression s81) (GOTO unary_operator s54) (GOTO cast_expression s55) (GOTO multiplicative_expression s56) (GOTO additive_expression s57) (GOTO shift_expression s58) (GOTO relational_expression s59) (GOTO equality_expression s60) (GOTO and_expression s61) (GOTO exclusive_or_expression s62) (GOTO inclusive_or_expression s63) (GOTO logical_and_expression s64) (GOTO logical_or_expression s65) (GOTO conditional_expression s82) (GOTO assignment_expression s83) (GOTO expression s84))
   (STATE s157 (COMMENT unary_expression "=>" INC_OP unary_expression ".") (REDUCE () r17))
   (STATE s158 (COMMENT unary_expression "=>" SIZEOF unary_expression ".") (REDUCE () r20))
   (STATE s159 (COMMENT type_name "=>" "." specifier_qualifier_list abstract_declarator) (COMMENT type_name "=>" "." specifier_qualifier_list) (COMMENT type_qualifier "=>" "." VOLATILE) (COMMENT type_qualifier "=>" "." CONST) (COMMENT enum_specifier "=>" "." ENUM IDENTIFIER) (COMMENT enum_specifier "=>" "." ENUM IDENTIFIER LCURLY enumerator_list RCURLY) (COMMENT enum_specifier "=>" "." ENUM LCURLY enumerator_list RCURLY) (COMMENT specifier_qualifier_list "=>" "." type_qualifier) (COMMENT specifier_qualifier_list "=>" "." type_qualifier specifier_qualifier_list) (COMMENT specifier_qualifier_list "=>" "." type_specifier) (COMMENT specifier_qualifier_list "=>" "." type_specifier specifier_qualifier_list) (COMMENT struct_or_union "=>" "." UNION) (COMMENT struct_or_union "=>" "." STRUCT) (COMMENT struct_or_union_specifier "=>" "." struct_or_union IDENTIFIER) (COMMENT struct_or_union_specifier "=>" "." struct_or_union LCURLY struct_declaration_list RCURLY) (COMMENT struct_or_union_specifier "=>" "." struct_or_union IDENTIFIER LCURLY struct_declaration_list RCURLY) (COMMENT type_specifier "=>" "." TYPE_NAME) (COMMENT type_specifier "=>" "." enum_specifier) (COMMENT type_specifier "=>" "." struct_or_union_specifier) (COMMENT type_specifier "=>" "." UNSIGNED) (COMMENT type_specifier "=>" "." SIGNED) (COMMENT type_specifier "=>" "." DOUBLE) (COMMENT type_specifier "=>" "." FLOAT) (COMMENT type_specifier "=>" "." LONG) (COMMENT type_specifier "=>" "." INT) (COMMENT type_specifier "=>" "." SHORT) (COMMENT type_specifier "=>" "." CHAR) (COMMENT type_specifier "=>" "." VOID) (COMMENT expression "=>" "." expression COMMA assignment_expression) (COMMENT expression "=>" "." assignment_expression) (COMMENT assignment_expression "=>" "." unary_expression assignment_operator assignment_expression) (COMMENT assignment_expression "=>" "." conditional_expression) (COMMENT conditional_expression "=>" "." logical_or_expression QMARK expression COLON conditional_expression) (COMMENT conditional_expression "=>" "." logical_or_expression) (COMMENT logical_or_expression "=>" "." logical_or_expression OR_OP logical_and_expression) (COMMENT logical_or_expression "=>" "." logical_and_expression) (COMMENT logical_and_expression "=>" "." logical_and_expression AND_OP inclusive_or_expression) (COMMENT logical_and_expression "=>" "." inclusive_or_expression) (COMMENT inclusive_or_expression "=>" "." inclusive_or_expression PIPE exclusive_or_expression) (COMMENT inclusive_or_expression "=>" "." exclusive_or_expression) (COMMENT exclusive_or_expression "=>" "." exclusive_or_expression CARROT and_expression) (COMMENT exclusive_or_expression "=>" "." and_expression) (COMMENT and_expression "=>" "." and_expression AMPERSAND equality_expression) (COMMENT and_expression "=>" "." equality_expression) (COMMENT equality_expression "=>" "." equality_expression NE_OP relational_expression) (COMMENT equality_expression "=>" "." equality_expression EQ_OP relational_expression) (COMMENT equality_expression "=>" "." relational_expression) (COMMENT relational_expression "=>" "." relational_expression GE_OP shift_expression) (COMMENT relational_expression "=>" "." relational_expression LE_OP shift_expression) (COMMENT relational_expression "=>" "." relational_expression GREATER_OP shift_expression) (COMMENT relational_expression "=>" "." relational_expression LESS_OP shift_expression) (COMMENT relational_expression "=>" "." shift_expression) (COMMENT shift_expression "=>" "." shift_expression RIGHT_OP additive_expression) (COMMENT shift_expression "=>" "." shift_expression LEFT_OP additive_expression) (COMMENT shift_expression "=>" "." additive_expression) (COMMENT additive_expression "=>" "." additive_expression MINUS multiplicative_expression) (COMMENT additive_expression "=>" "." additive_expression PLUS multiplicative_expression) (COMMENT additive_expression "=>" "." multiplicative_expression) (COMMENT multiplicative_expression "=>" "." multiplicative_expression AMPERSAND cast_expression) (COMMENT multiplicative_expression "=>" "." multiplicative_expression FORWARD_SLASH cast_expression) (COMMENT multiplicative_expression "=>" "." multiplicative_expression STAR cast_expression) (COMMENT multiplicative_expression "=>" "." cast_expression) (COMMENT cast_expression "=>" "." LPAREN type_name RPAREN cast_expression) (COMMENT cast_expression "=>" "." unary_expression) (COMMENT unary_operator "=>" "." BANG) (COMMENT unary_operator "=>" "." TWIDLE) (COMMENT unary_operator "=>" "." MINUS) (COMMENT unary_operator "=>" "." PLUS) (COMMENT unary_operator "=>" "." STAR) (COMMENT unary_operator "=>" "." AMPERSAND) (COMMENT unary_expression "=>" SIZEOF LPAREN "." type_name RPAREN) (COMMENT unary_expression "=>" "." SIZEOF LPAREN type_name RPAREN) (COMMENT unary_expression "=>" "." SIZEOF unary_expression) (COMMENT unary_expression "=>" "." unary_operator cast_expression) (COMMENT unary_expression "=>" "." DEC_OP unary_expression) (COMMENT unary_expression "=>" "." INC_OP unary_expression) (COMMENT unary_expression "=>" "." postfix_expression) (COMMENT postfix_expression "=>" "." postfix_expression DEC_OP) (COMMENT postfix_expression "=>" "." postfix_expression INC_OP) (COMMENT postfix_expression "=>" "." postfix_expression PTR_OP IDENTIFIER) (COMMENT postfix_expression "=>" "." postfix_expression DOT IDENTIFIER) (COMMENT postfix_expression "=>" "." postfix_expression LPAREN argument_expression_list RPAREN) (COMMENT postfix_expression "=>" "." postfix_expression LPAREN RPAREN) (COMMENT postfix_expression "=>" "." postfix_expression LBRACK expression RBRACK) (COMMENT postfix_expression "=>" "." primary_expression) (COMMENT primary_expression "=>" LPAREN "." expression RPAREN) (COMMENT primary_expression "=>" "." LPAREN expression RPAREN) (COMMENT primary_expression "=>" "." STRING_LITERAL) (COMMENT primary_expression "=>" "." CONSTANT) (COMMENT primary_expression "=>" "." IDENTIFIER) (SHIFT (IDENTIFIER) s68) (SHIFT (CONSTANT) s69) (SHIFT (STRING_LITERAL) s70) (SHIFT (SIZEOF) s71) (SHIFT (INC_OP) s72) (SHIFT (DEC_OP) s73) (SHIFT (TYPE_NAME) s16) (SHIFT (CHAR) s22) (SHIFT (SHORT) s23) (SHIFT (INT) s24) (SHIFT (LONG) s25) (SHIFT (SIGNED) s26) (SHIFT (UNSIGNED) s27) (SHIFT (FLOAT) s28) (SHIFT (DOUBLE) s29) (SHIFT (CONST) s30) (SHIFT (VOLATILE) s31) (SHIFT (VOID) s32) (SHIFT (STRUCT) s33) (SHIFT (UNION) s34) (SHIFT (ENUM) s35) (SHIFT (LPAREN) s74) (SHIFT (AMPERSAND) s75) (SHIFT (STAR) s76) (SHIFT (PLUS) s77) (SHIFT (MINUS) s78) (SHIFT (TWIDLE) s79) (SHIFT (BANG) s80) (GOTO primary_expression s51) (GOTO postfix_expression s52) (GOTO unary_expression s81) (GOTO unary_operator s54) (GOTO cast_expression s55) (GOTO multiplicative_expression s56) (GOTO additive_expression s57) (GOTO shift_expression s58) (GOTO relational_expression s59) (GOTO equality_expression s60) (GOTO and_expression s61) (GOTO exclusive_or_expression s62) (GOTO inclusive_or_expression s63) (GOTO logical_and_expression s64) (GOTO logical_or_expression s65) (GOTO conditional_expression s82) (GOTO assignment_expression s83) (GOTO expression s84) (GOTO type_specifier s85) (GOTO struct_or_union_specifier s5) (GOTO struct_or_union s6) (GOTO specifier_qualifier_list s86) (GOTO enum_specifier s7) (GOTO type_qualifier s87) (GOTO type_name s160))
   (STATE s160 (COMMENT unary_expression "=>" SIZEOF LPAREN type_name "." RPAREN) (SHIFT (RPAREN) s161))
   (STATE s161 (COMMENT unary_expression "=>" SIZEOF LPAREN type_name RPAREN ".") (REDUCE () r21))
   (STATE s162 (COMMENT logical_or_expression "=>" logical_or_expression OR_OP "." logical_and_expression) (COMMENT logical_and_expression "=>" "." logical_and_expression AND_OP inclusive_or_expression) (COMMENT logical_and_expression "=>" "." inclusive_or_expression) (COMMENT inclusive_or_expression "=>" "." inclusive_or_expression PIPE exclusive_or_expression) (COMMENT inclusive_or_expression "=>" "." exclusive_or_expression) (COMMENT exclusive_or_expression "=>" "." exclusive_or_expression CARROT and_expression) (COMMENT exclusive_or_expression "=>" "." and_expression) (COMMENT and_expression "=>" "." and_expression AMPERSAND equality_expression) (COMMENT and_expression "=>" "." equality_expression) (COMMENT equality_expression "=>" "." equality_expression NE_OP relational_expression) (COMMENT equality_expression "=>" "." equality_expression EQ_OP relational_expression) (COMMENT equality_expression "=>" "." relational_expression) (COMMENT relational_expression "=>" "." relational_expression GE_OP shift_expression) (COMMENT relational_expression "=>" "." relational_expression LE_OP shift_expression) (COMMENT relational_expression "=>" "." relational_expression GREATER_OP shift_expression) (COMMENT relational_expression "=>" "." relational_expression LESS_OP shift_expression) (COMMENT relational_expression "=>" "." shift_expression) (COMMENT shift_expression "=>" "." shift_expression RIGHT_OP additive_expression) (COMMENT shift_expression "=>" "." shift_expression LEFT_OP additive_expression) (COMMENT shift_expression "=>" "." additive_expression) (COMMENT additive_expression "=>" "." additive_expression MINUS multiplicative_expression) (COMMENT additive_expression "=>" "." additive_expression PLUS multiplicative_expression) (COMMENT additive_expression "=>" "." multiplicative_expression) (COMMENT multiplicative_expression "=>" "." multiplicative_expression AMPERSAND cast_expression) (COMMENT multiplicative_expression "=>" "." multiplicative_expression FORWARD_SLASH cast_expression) (COMMENT multiplicative_expression "=>" "." multiplicative_expression STAR cast_expression) (COMMENT multiplicative_expression "=>" "." cast_expression) (COMMENT cast_expression "=>" "." LPAREN type_name RPAREN cast_expression) (COMMENT cast_expression "=>" "." unary_expression) (COMMENT unary_operator "=>" "." BANG) (COMMENT unary_operator "=>" "." TWIDLE) (COMMENT unary_operator "=>" "." MINUS) (COMMENT unary_operator "=>" "." PLUS) (COMMENT unary_operator "=>" "." STAR) (COMMENT unary_operator "=>" "." AMPERSAND) (COMMENT unary_expression "=>" "." SIZEOF LPAREN type_name RPAREN) (COMMENT unary_expression "=>" "." SIZEOF unary_expression) (COMMENT unary_expression "=>" "." unary_operator cast_expression) (COMMENT unary_expression "=>" "." DEC_OP unary_expression) (COMMENT unary_expression "=>" "." INC_OP unary_expression) (COMMENT unary_expression "=>" "." postfix_expression) (COMMENT postfix_expression "=>" "." postfix_expression DEC_OP) (COMMENT postfix_expression "=>" "." postfix_expression INC_OP) (COMMENT postfix_expression "=>" "." postfix_expression PTR_OP IDENTIFIER) (COMMENT postfix_expression "=>" "." postfix_expression DOT IDENTIFIER) (COMMENT postfix_expression "=>" "." postfix_expression LPAREN argument_expression_list RPAREN) (COMMENT postfix_expression "=>" "." postfix_expression LPAREN RPAREN) (COMMENT postfix_expression "=>" "." postfix_expression LBRACK expression RBRACK) (COMMENT postfix_expression "=>" "." primary_expression) (COMMENT primary_expression "=>" "." LPAREN expression RPAREN) (COMMENT primary_expression "=>" "." STRING_LITERAL) (COMMENT primary_expression "=>" "." CONSTANT) (COMMENT primary_expression "=>" "." IDENTIFIER) (SHIFT (IDENTIFIER) s68) (SHIFT (CONSTANT) s69) (SHIFT (STRING_LITERAL) s70) (SHIFT (SIZEOF) s71) (SHIFT (INC_OP) s72) (SHIFT (DEC_OP) s73) (SHIFT (LPAREN) s74) (SHIFT (AMPERSAND) s75) (SHIFT (STAR) s76) (SHIFT (PLUS) s77) (SHIFT (MINUS) s78) (SHIFT (TWIDLE) s79) (SHIFT (BANG) s80) (GOTO primary_expression s51) (GOTO postfix_expression s52) (GOTO unary_expression s53) (GOTO unary_operator s54) (GOTO cast_expression s55) (GOTO multiplicative_expression s56) (GOTO additive_expression s57) (GOTO shift_expression s58) (GOTO relational_expression s59) (GOTO equality_expression s60) (GOTO and_expression s61) (GOTO exclusive_or_expression s62) (GOTO inclusive_or_expression s63) (GOTO logical_and_expression s167))
   (STATE s163 (COMMENT expression "=>" "." expression COMMA assignment_expression) (COMMENT expression "=>" "." assignment_expression) (COMMENT assignment_expression "=>" "." unary_expression assignment_operator assignment_expression) (COMMENT assignment_expression "=>" "." conditional_expression) (COMMENT conditional_expression "=>" logical_or_expression QMARK "." expression COLON conditional_expression) (COMMENT conditional_expression "=>" "." logical_or_expression QMARK expression COLON conditional_expression) (COMMENT conditional_expression "=>" "." logical_or_expression) (COMMENT logical_or_expression "=>" "." logical_or_expression OR_OP logical_and_expression) (COMMENT logical_or_expression "=>" "." logical_and_expression) (COMMENT logical_and_expression "=>" "." logical_and_expression AND_OP inclusive_or_expression) (COMMENT logical_and_expression "=>" "." inclusive_or_expression) (COMMENT inclusive_or_expression "=>" "." inclusive_or_expression PIPE exclusive_or_expression) (COMMENT inclusive_or_expression "=>" "." exclusive_or_expression) (COMMENT exclusive_or_expression "=>" "." exclusive_or_expression CARROT and_expression) (COMMENT exclusive_or_expression "=>" "." and_expression) (COMMENT and_expression "=>" "." and_expression AMPERSAND equality_expression) (COMMENT and_expression "=>" "." equality_expression) (COMMENT equality_expression "=>" "." equality_expression NE_OP relational_expression) (COMMENT equality_expression "=>" "." equality_expression EQ_OP relational_expression) (COMMENT equality_expression "=>" "." relational_expression) (COMMENT relational_expression "=>" "." relational_expression GE_OP shift_expression) (COMMENT relational_expression "=>" "." relational_expression LE_OP shift_expression) (COMMENT relational_expression "=>" "." relational_expression GREATER_OP shift_expression) (COMMENT relational_expression "=>" "." relational_expression LESS_OP shift_expression) (COMMENT relational_expression "=>" "." shift_expression) (COMMENT shift_expression "=>" "." shift_expression RIGHT_OP additive_expression) (COMMENT shift_expression "=>" "." shift_expression LEFT_OP additive_expression) (COMMENT shift_expression "=>" "." additive_expression) (COMMENT additive_expression "=>" "." additive_expression MINUS multiplicative_expression) (COMMENT additive_expression "=>" "." additive_expression PLUS multiplicative_expression) (COMMENT additive_expression "=>" "." multiplicative_expression) (COMMENT multiplicative_expression "=>" "." multiplicative_expression AMPERSAND cast_expression) (COMMENT multiplicative_expression "=>" "." multiplicative_expression FORWARD_SLASH cast_expression) (COMMENT multiplicative_expression "=>" "." multiplicative_expression STAR cast_expression) (COMMENT multiplicative_expression "=>" "." cast_expression) (COMMENT cast_expression "=>" "." LPAREN type_name RPAREN cast_expression) (COMMENT cast_expression "=>" "." unary_expression) (COMMENT unary_operator "=>" "." BANG) (COMMENT unary_operator "=>" "." TWIDLE) (COMMENT unary_operator "=>" "." MINUS) (COMMENT unary_operator "=>" "." PLUS) (COMMENT unary_operator "=>" "." STAR) (COMMENT unary_operator "=>" "." AMPERSAND) (COMMENT unary_expression "=>" "." SIZEOF LPAREN type_name RPAREN) (COMMENT unary_expression "=>" "." SIZEOF unary_expression) (COMMENT unary_expression "=>" "." unary_operator cast_expression) (COMMENT unary_expression "=>" "." DEC_OP unary_expression) (COMMENT unary_expression "=>" "." INC_OP unary_expression) (COMMENT unary_expression "=>" "." postfix_expression) (COMMENT postfix_expression "=>" "." postfix_expression DEC_OP) (COMMENT postfix_expression "=>" "." postfix_expression INC_OP) (COMMENT postfix_expression "=>" "." postfix_expression PTR_OP IDENTIFIER) (COMMENT postfix_expression "=>" "." postfix_expression DOT IDENTIFIER) (COMMENT postfix_expression "=>" "." postfix_expression LPAREN argument_expression_list RPAREN) (COMMENT postfix_expression "=>" "." postfix_expression LPAREN RPAREN) (COMMENT postfix_expression "=>" "." postfix_expression LBRACK expression RBRACK) (COMMENT postfix_expression "=>" "." primary_expression) (COMMENT primary_expression "=>" "." LPAREN expression RPAREN) (COMMENT primary_expression "=>" "." STRING_LITERAL) (COMMENT primary_expression "=>" "." CONSTANT) (COMMENT primary_expression "=>" "." IDENTIFIER) (SHIFT (IDENTIFIER) s68) (SHIFT (CONSTANT) s69) (SHIFT (STRING_LITERAL) s70) (SHIFT (SIZEOF) s71) (SHIFT (INC_OP) s72) (SHIFT (DEC_OP) s73) (SHIFT (LPAREN) s74) (SHIFT (AMPERSAND) s75) (SHIFT (STAR) s76) (SHIFT (PLUS) s77) (SHIFT (MINUS) s78) (SHIFT (TWIDLE) s79) (SHIFT (BANG) s80) (GOTO primary_expression s51) (GOTO postfix_expression s52) (GOTO unary_expression s81) (GOTO unary_operator s54) (GOTO cast_expression s55) (GOTO multiplicative_expression s56) (GOTO additive_expression s57) (GOTO shift_expression s58) (GOTO relational_expression s59) (GOTO equality_expression s60) (GOTO and_expression s61) (GOTO exclusive_or_expression s62) (GOTO inclusive_or_expression s63) (GOTO logical_and_expression s64) (GOTO logical_or_expression s65) (GOTO conditional_expression s82) (GOTO assignment_expression s83) (GOTO expression s164))
   (STATE s164 (COMMENT expression "=>" expression "." COMMA assignment_expression) (COMMENT conditional_expression "=>" logical_or_expression QMARK expression "." COLON conditional_expression) (SHIFT (COMMA) s140) (SHIFT (COLON) s165))
   (STATE s165 (COMMENT conditional_expression "=>" logical_or_expression QMARK expression COLON "." conditional_expression) (COMMENT conditional_expression "=>" "." logical_or_expression QMARK expression COLON conditional_expression) (COMMENT conditional_expression "=>" "." logical_or_expression) (COMMENT logical_or_expression "=>" "." logical_or_expression OR_OP logical_and_expression) (COMMENT logical_or_expression "=>" "." logical_and_expression) (COMMENT logical_and_expression "=>" "." logical_and_expression AND_OP inclusive_or_expression) (COMMENT logical_and_expression "=>" "." inclusive_or_expression) (COMMENT inclusive_or_expression "=>" "." inclusive_or_expression PIPE exclusive_or_expression) (COMMENT inclusive_or_expression "=>" "." exclusive_or_expression) (COMMENT exclusive_or_expression "=>" "." exclusive_or_expression CARROT and_expression) (COMMENT exclusive_or_expression "=>" "." and_expression) (COMMENT and_expression "=>" "." and_expression AMPERSAND equality_expression) (COMMENT and_expression "=>" "." equality_expression) (COMMENT equality_expression "=>" "." equality_expression NE_OP relational_expression) (COMMENT equality_expression "=>" "." equality_expression EQ_OP relational_expression) (COMMENT equality_expression "=>" "." relational_expression) (COMMENT relational_expression "=>" "." relational_expression GE_OP shift_expression) (COMMENT relational_expression "=>" "." relational_expression LE_OP shift_expression) (COMMENT relational_expression "=>" "." relational_expression GREATER_OP shift_expression) (COMMENT relational_expression "=>" "." relational_expression LESS_OP shift_expression) (COMMENT relational_expression "=>" "." shift_expression) (COMMENT shift_expression "=>" "." shift_expression RIGHT_OP additive_expression) (COMMENT shift_expression "=>" "." shift_expression LEFT_OP additive_expression) (COMMENT shift_expression "=>" "." additive_expression) (COMMENT additive_expression "=>" "." additive_expression MINUS multiplicative_expression) (COMMENT additive_expression "=>" "." additive_expression PLUS multiplicative_expression) (COMMENT additive_expression "=>" "." multiplicative_expression) (COMMENT multiplicative_expression "=>" "." multiplicative_expression AMPERSAND cast_expression) (COMMENT multiplicative_expression "=>" "." multiplicative_expression FORWARD_SLASH cast_expression) (COMMENT multiplicative_expression "=>" "." multiplicative_expression STAR cast_expression) (COMMENT multiplicative_expression "=>" "." cast_expression) (COMMENT cast_expression "=>" "." LPAREN type_name RPAREN cast_expression) (COMMENT cast_expression "=>" "." unary_expression) (COMMENT unary_operator "=>" "." BANG) (COMMENT unary_operator "=>" "." TWIDLE) (COMMENT unary_operator "=>" "." MINUS) (COMMENT unary_operator "=>" "." PLUS) (COMMENT unary_operator "=>" "." STAR) (COMMENT unary_operator "=>" "." AMPERSAND) (COMMENT unary_expression "=>" "." SIZEOF LPAREN type_name RPAREN) (COMMENT unary_expression "=>" "." SIZEOF unary_expression) (COMMENT unary_expression "=>" "." unary_operator cast_expression) (COMMENT unary_expression "=>" "." DEC_OP unary_expression) (COMMENT unary_expression "=>" "." INC_OP unary_expression) (COMMENT unary_expression "=>" "." postfix_expression) (COMMENT postfix_expression "=>" "." postfix_expression DEC_OP) (COMMENT postfix_expression "=>" "." postfix_expression INC_OP) (COMMENT postfix_expression "=>" "." postfix_expression PTR_OP IDENTIFIER) (COMMENT postfix_expression "=>" "." postfix_expression DOT IDENTIFIER) (COMMENT postfix_expression "=>" "." postfix_expression LPAREN argument_expression_list RPAREN) (COMMENT postfix_expression "=>" "." postfix_expression LPAREN RPAREN) (COMMENT postfix_expression "=>" "." postfix_expression LBRACK expression RBRACK) (COMMENT postfix_expression "=>" "." primary_expression) (COMMENT primary_expression "=>" "." LPAREN expression RPAREN) (COMMENT primary_expression "=>" "." STRING_LITERAL) (COMMENT primary_expression "=>" "." CONSTANT) (COMMENT primary_expression "=>" "." IDENTIFIER) (SHIFT (IDENTIFIER) s68) (SHIFT (CONSTANT) s69) (SHIFT (STRING_LITERAL) s70) (SHIFT (SIZEOF) s71) (SHIFT (INC_OP) s72) (SHIFT (DEC_OP) s73) (SHIFT (LPAREN) s74) (SHIFT (AMPERSAND) s75) (SHIFT (STAR) s76) (SHIFT (PLUS) s77) (SHIFT (MINUS) s78) (SHIFT (TWIDLE) s79) (SHIFT (BANG) s80) (GOTO primary_expression s51) (GOTO postfix_expression s52) (GOTO unary_expression s53) (GOTO unary_operator s54) (GOTO cast_expression s55) (GOTO multiplicative_expression s56) (GOTO additive_expression s57) (GOTO shift_expression s58) (GOTO relational_expression s59) (GOTO equality_expression s60) (GOTO and_expression s61) (GOTO exclusive_or_expression s62) (GOTO inclusive_or_expression s63) (GOTO logical_and_expression s64) (GOTO logical_or_expression s65) (GOTO conditional_expression s166))
   (STATE s166 (COMMENT conditional_expression "=>" logical_or_expression QMARK expression COLON conditional_expression ".") (REDUCE () r59))
   (STATE s167 (COMMENT logical_or_expression "=>" logical_or_expression OR_OP logical_and_expression ".") (COMMENT logical_and_expression "=>" logical_and_expression "." AND_OP inclusive_or_expression) (SHIFT (AND_OP) s168) (REDUCE (OR_OP) r57) (REDUCE (RPAREN) r57) (REDUCE (RBRACK) r57) (REDUCE (RCURLY) r57) (REDUCE (COMMA) r57) (REDUCE (QMARK) r57) (REDUCE (COLON) r57) (REDUCE (SEMICOLON) r57))
   (STATE s168 (COMMENT logical_and_expression "=>" logical_and_expression AND_OP "." inclusive_or_expression) (COMMENT inclusive_or_expression "=>" "." inclusive_or_expression PIPE exclusive_or_expression) (COMMENT inclusive_or_expression "=>" "." exclusive_or_expression) (COMMENT exclusive_or_expression "=>" "." exclusive_or_expression CARROT and_expression) (COMMENT exclusive_or_expression "=>" "." and_expression) (COMMENT and_expression "=>" "." and_expression AMPERSAND equality_expression) (COMMENT and_expression "=>" "." equality_expression) (COMMENT equality_expression "=>" "." equality_expression NE_OP relational_expression) (COMMENT equality_expression "=>" "." equality_expression EQ_OP relational_expression) (COMMENT equality_expression "=>" "." relational_expression) (COMMENT relational_expression "=>" "." relational_expression GE_OP shift_expression) (COMMENT relational_expression "=>" "." relational_expression LE_OP shift_expression) (COMMENT relational_expression "=>" "." relational_expression GREATER_OP shift_expression) (COMMENT relational_expression "=>" "." relational_expression LESS_OP shift_expression) (COMMENT relational_expression "=>" "." shift_expression) (COMMENT shift_expression "=>" "." shift_expression RIGHT_OP additive_expression) (COMMENT shift_expression "=>" "." shift_expression LEFT_OP additive_expression) (COMMENT shift_expression "=>" "." additive_expression) (COMMENT additive_expression "=>" "." additive_expression MINUS multiplicative_expression) (COMMENT additive_expression "=>" "." additive_expression PLUS multiplicative_expression) (COMMENT additive_expression "=>" "." multiplicative_expression) (COMMENT multiplicative_expression "=>" "." multiplicative_expression AMPERSAND cast_expression) (COMMENT multiplicative_expression "=>" "." multiplicative_expression FORWARD_SLASH cast_expression) (COMMENT multiplicative_expression "=>" "." multiplicative_expression STAR cast_expression) (COMMENT multiplicative_expression "=>" "." cast_expression) (COMMENT cast_expression "=>" "." LPAREN type_name RPAREN cast_expression) (COMMENT cast_expression "=>" "." unary_expression) (COMMENT unary_operator "=>" "." BANG) (COMMENT unary_operator "=>" "." TWIDLE) (COMMENT unary_operator "=>" "." MINUS) (COMMENT unary_operator "=>" "." PLUS) (COMMENT unary_operator "=>" "." STAR) (COMMENT unary_operator "=>" "." AMPERSAND) (COMMENT unary_expression "=>" "." SIZEOF LPAREN type_name RPAREN) (COMMENT unary_expression "=>" "." SIZEOF unary_expression) (COMMENT unary_expression "=>" "." unary_operator cast_expression) (COMMENT unary_expression "=>" "." DEC_OP unary_expression) (COMMENT unary_expression "=>" "." INC_OP unary_expression) (COMMENT unary_expression "=>" "." postfix_expression) (COMMENT postfix_expression "=>" "." postfix_expression DEC_OP) (COMMENT postfix_expression "=>" "." postfix_expression INC_OP) (COMMENT postfix_expression "=>" "." postfix_expression PTR_OP IDENTIFIER) (COMMENT postfix_expression "=>" "." postfix_expression DOT IDENTIFIER) (COMMENT postfix_expression "=>" "." postfix_expression LPAREN argument_expression_list RPAREN) (COMMENT postfix_expression "=>" "." postfix_expression LPAREN RPAREN) (COMMENT postfix_expression "=>" "." postfix_expression LBRACK expression RBRACK) (COMMENT postfix_expression "=>" "." primary_expression) (COMMENT primary_expression "=>" "." LPAREN expression RPAREN) (COMMENT primary_expression "=>" "." STRING_LITERAL) (COMMENT primary_expression "=>" "." CONSTANT) (COMMENT primary_expression "=>" "." IDENTIFIER) (SHIFT (IDENTIFIER) s68) (SHIFT (CONSTANT) s69) (SHIFT (STRING_LITERAL) s70) (SHIFT (SIZEOF) s71) (SHIFT (INC_OP) s72) (SHIFT (DEC_OP) s73) (SHIFT (LPAREN) s74) (SHIFT (AMPERSAND) s75) (SHIFT (STAR) s76) (SHIFT (PLUS) s77) (SHIFT (MINUS) s78) (SHIFT (TWIDLE) s79) (SHIFT (BANG) s80) (GOTO primary_expression s51) (GOTO postfix_expression s52) (GOTO unary_expression s53) (GOTO unary_operator s54) (GOTO cast_expression s55) (GOTO multiplicative_expression s56) (GOTO additive_expression s57) (GOTO shift_expression s58) (GOTO relational_expression s59) (GOTO equality_expression s60) (GOTO and_expression s61) (GOTO exclusive_or_expression s62) (GOTO inclusive_or_expression s169))
   (STATE s169 (COMMENT logical_and_expression "=>" logical_and_expression AND_OP inclusive_or_expression ".") (COMMENT inclusive_or_expression "=>" inclusive_or_expression "." PIPE exclusive_or_expression) (REDUCE (AND_OP) r55) (REDUCE (OR_OP) r55) (REDUCE (RPAREN) r55) (REDUCE (RBRACK) r55) (REDUCE (RCURLY) r55) (REDUCE (COMMA) r55) (SHIFT (PIPE) s170) (REDUCE (QMARK) r55) (REDUCE (COLON) r55) (REDUCE (SEMICOLON) r55))
   (STATE s170 (COMMENT inclusive_or_expression "=>" inclusive_or_expression PIPE "." exclusive_or_expression) (COMMENT exclusive_or_expression "=>" "." exclusive_or_expression CARROT and_expression) (COMMENT exclusive_or_expression "=>" "." and_expression) (COMMENT and_expression "=>" "." and_expression AMPERSAND equality_expression) (COMMENT and_expression "=>" "." equality_expression) (COMMENT equality_expression "=>" "." equality_expression NE_OP relational_expression) (COMMENT equality_expression "=>" "." equality_expression EQ_OP relational_expression) (COMMENT equality_expression "=>" "." relational_expression) (COMMENT relational_expression "=>" "." relational_expression GE_OP shift_expression) (COMMENT relational_expression "=>" "." relational_expression LE_OP shift_expression) (COMMENT relational_expression "=>" "." relational_expression GREATER_OP shift_expression) (COMMENT relational_expression "=>" "." relational_expression LESS_OP shift_expression) (COMMENT relational_expression "=>" "." shift_expression) (COMMENT shift_expression "=>" "." shift_expression RIGHT_OP additive_expression) (COMMENT shift_expression "=>" "." shift_expression LEFT_OP additive_expression) (COMMENT shift_expression "=>" "." additive_expression) (COMMENT additive_expression "=>" "." additive_expression MINUS multiplicative_expression) (COMMENT additive_expression "=>" "." additive_expression PLUS multiplicative_expression) (COMMENT additive_expression "=>" "." multiplicative_expression) (COMMENT multiplicative_expression "=>" "." multiplicative_expression AMPERSAND cast_expression) (COMMENT multiplicative_expression "=>" "." multiplicative_expression FORWARD_SLASH cast_expression) (COMMENT multiplicative_expression "=>" "." multiplicative_expression STAR cast_expression) (COMMENT multiplicative_expression "=>" "." cast_expression) (COMMENT cast_expression "=>" "." LPAREN type_name RPAREN cast_expression) (COMMENT cast_expression "=>" "." unary_expression) (COMMENT unary_operator "=>" "." BANG) (COMMENT unary_operator "=>" "." TWIDLE) (COMMENT unary_operator "=>" "." MINUS) (COMMENT unary_operator "=>" "." PLUS) (COMMENT unary_operator "=>" "." STAR) (COMMENT unary_operator "=>" "." AMPERSAND) (COMMENT unary_expression "=>" "." SIZEOF LPAREN type_name RPAREN) (COMMENT unary_expression "=>" "." SIZEOF unary_expression) (COMMENT unary_expression "=>" "." unary_operator cast_expression) (COMMENT unary_expression "=>" "." DEC_OP unary_expression) (COMMENT unary_expression "=>" "." INC_OP unary_expression) (COMMENT unary_expression "=>" "." postfix_expression) (COMMENT postfix_expression "=>" "." postfix_expression DEC_OP) (COMMENT postfix_expression "=>" "." postfix_expression INC_OP) (COMMENT postfix_expression "=>" "." postfix_expression PTR_OP IDENTIFIER) (COMMENT postfix_expression "=>" "." postfix_expression DOT IDENTIFIER) (COMMENT postfix_expression "=>" "." postfix_expression LPAREN argument_expression_list RPAREN) (COMMENT postfix_expression "=>" "." postfix_expression LPAREN RPAREN) (COMMENT postfix_expression "=>" "." postfix_expression LBRACK expression RBRACK) (COMMENT postfix_expression "=>" "." primary_expression) (COMMENT primary_expression "=>" "." LPAREN expression RPAREN) (COMMENT primary_expression "=>" "." STRING_LITERAL) (COMMENT primary_expression "=>" "." CONSTANT) (COMMENT primary_expression "=>" "." IDENTIFIER) (SHIFT (IDENTIFIER) s68) (SHIFT (CONSTANT) s69) (SHIFT (STRING_LITERAL) s70) (SHIFT (SIZEOF) s71) (SHIFT (INC_OP) s72) (SHIFT (DEC_OP) s73) (SHIFT (LPAREN) s74) (SHIFT (AMPERSAND) s75) (SHIFT (STAR) s76) (SHIFT (PLUS) s77) (SHIFT (MINUS) s78) (SHIFT (TWIDLE) s79) (SHIFT (BANG) s80) (GOTO primary_expression s51) (GOTO postfix_expression s52) (GOTO unary_expression s53) (GOTO unary_operator s54) (GOTO cast_expression s55) (GOTO multiplicative_expression s56) (GOTO additive_expression s57) (GOTO shift_expression s58) (GOTO relational_expression s59) (GOTO equality_expression s60) (GOTO and_expression s61) (GOTO exclusive_or_expression s171))
   (STATE s171 (COMMENT inclusive_or_expression "=>" inclusive_or_expression PIPE exclusive_or_expression ".") (COMMENT exclusive_or_expression "=>" exclusive_or_expression "." CARROT and_expression) (REDUCE (AND_OP) r53) (REDUCE (OR_OP) r53) (REDUCE (RPAREN) r53) (REDUCE (RBRACK) r53) (REDUCE (RCURLY) r53) (REDUCE (COMMA) r53) (SHIFT (CARROT) s172) (REDUCE (PIPE) r53) (REDUCE (QMARK) r53) (REDUCE (COLON) r53) (REDUCE (SEMICOLON) r53))
   (STATE s172 (COMMENT exclusive_or_expression "=>" exclusive_or_expression CARROT "." and_expression) (COMMENT and_expression "=>" "." and_expression AMPERSAND equality_expression) (COMMENT and_expression "=>" "." equality_expression) (COMMENT equality_expression "=>" "." equality_expression NE_OP relational_expression) (COMMENT equality_expression "=>" "." equality_expression EQ_OP relational_expression) (COMMENT equality_expression "=>" "." relational_expression) (COMMENT relational_expression "=>" "." relational_expression GE_OP shift_expression) (COMMENT relational_expression "=>" "." relational_expression LE_OP shift_expression) (COMMENT relational_expression "=>" "." relational_expression GREATER_OP shift_expression) (COMMENT relational_expression "=>" "." relational_expression LESS_OP shift_expression) (COMMENT relational_expression "=>" "." shift_expression) (COMMENT shift_expression "=>" "." shift_expression RIGHT_OP additive_expression) (COMMENT shift_expression "=>" "." shift_expression LEFT_OP additive_expression) (COMMENT shift_expression "=>" "." additive_expression) (COMMENT additive_expression "=>" "." additive_expression MINUS multiplicative_expression) (COMMENT additive_expression "=>" "." additive_expression PLUS multiplicative_expression) (COMMENT additive_expression "=>" "." multiplicative_expression) (COMMENT multiplicative_expression "=>" "." multiplicative_expression AMPERSAND cast_expression) (COMMENT multiplicative_expression "=>" "." multiplicative_expression FORWARD_SLASH cast_expression) (COMMENT multiplicative_expression "=>" "." multiplicative_expression STAR cast_expression) (COMMENT multiplicative_expression "=>" "." cast_expression) (COMMENT cast_expression "=>" "." LPAREN type_name RPAREN cast_expression) (COMMENT cast_expression "=>" "." unary_expression) (COMMENT unary_operator "=>" "." BANG) (COMMENT unary_operator "=>" "." TWIDLE) (COMMENT unary_operator "=>" "." MINUS) (COMMENT unary_operator "=>" "." PLUS) (COMMENT unary_operator "=>" "." STAR) (COMMENT unary_operator "=>" "." AMPERSAND) (COMMENT unary_expression "=>" "." SIZEOF LPAREN type_name RPAREN) (COMMENT unary_expression "=>" "." SIZEOF unary_expression) (COMMENT unary_expression "=>" "." unary_operator cast_expression) (COMMENT unary_expression "=>" "." DEC_OP unary_expression) (COMMENT unary_expression "=>" "." INC_OP unary_expression) (COMMENT unary_expression "=>" "." postfix_expression) (COMMENT postfix_expression "=>" "." postfix_expression DEC_OP) (COMMENT postfix_expression "=>" "." postfix_expression INC_OP) (COMMENT postfix_expression "=>" "." postfix_expression PTR_OP IDENTIFIER) (COMMENT postfix_expression "=>" "." postfix_expression DOT IDENTIFIER) (COMMENT postfix_expression "=>" "." postfix_expression LPAREN argument_expression_list RPAREN) (COMMENT postfix_expression "=>" "." postfix_expression LPAREN RPAREN) (COMMENT postfix_expression "=>" "." postfix_expression LBRACK expression RBRACK) (COMMENT postfix_expression "=>" "." primary_expression) (COMMENT primary_expression "=>" "." LPAREN expression RPAREN) (COMMENT primary_expression "=>" "." STRING_LITERAL) (COMMENT primary_expression "=>" "." CONSTANT) (COMMENT primary_expression "=>" "." IDENTIFIER) (SHIFT (IDENTIFIER) s68) (SHIFT (CONSTANT) s69) (SHIFT (STRING_LITERAL) s70) (SHIFT (SIZEOF) s71) (SHIFT (INC_OP) s72) (SHIFT (DEC_OP) s73) (SHIFT (LPAREN) s74) (SHIFT (AMPERSAND) s75) (SHIFT (STAR) s76) (SHIFT (PLUS) s77) (SHIFT (MINUS) s78) (SHIFT (TWIDLE) s79) (SHIFT (BANG) s80) (GOTO primary_expression s51) (GOTO postfix_expression s52) (GOTO unary_expression s53) (GOTO unary_operator s54) (GOTO cast_expression s55) (GOTO multiplicative_expression s56) (GOTO additive_expression s57) (GOTO shift_expression s58) (GOTO relational_expression s59) (GOTO equality_expression s60) (GOTO and_expression s173))
   (STATE s173 (COMMENT exclusive_or_expression "=>" exclusive_or_expression CARROT and_expression ".") (COMMENT and_expression "=>" and_expression "." AMPERSAND equality_expression) (REDUCE (AND_OP) r51) (REDUCE (OR_OP) r51) (REDUCE (RPAREN) r51) (REDUCE (RBRACK) r51) (REDUCE (RCURLY) r51) (REDUCE (COMMA) r51) (SHIFT (AMPERSAND) s174) (REDUCE (CARROT) r51) (REDUCE (PIPE) r51) (REDUCE (QMARK) r51) (REDUCE (COLON) r51) (REDUCE (SEMICOLON) r51))
   (STATE s174 (COMMENT and_expression "=>" and_expression AMPERSAND "." equality_expression) (COMMENT equality_expression "=>" "." equality_expression NE_OP relational_expression) (COMMENT equality_expression "=>" "." equality_expression EQ_OP relational_expression) (COMMENT equality_expression "=>" "." relational_expression) (COMMENT relational_expression "=>" "." relational_expression GE_OP shift_expression) (COMMENT relational_expression "=>" "." relational_expression LE_OP shift_expression) (COMMENT relational_expression "=>" "." relational_expression GREATER_OP shift_expression) (COMMENT relational_expression "=>" "." relational_expression LESS_OP shift_expression) (COMMENT relational_expression "=>" "." shift_expression) (COMMENT shift_expression "=>" "." shift_expression RIGHT_OP additive_expression) (COMMENT shift_expression "=>" "." shift_expression LEFT_OP additive_expression) (COMMENT shift_expression "=>" "." additive_expression) (COMMENT additive_expression "=>" "." additive_expression MINUS multiplicative_expression) (COMMENT additive_expression "=>" "." additive_expression PLUS multiplicative_expression) (COMMENT additive_expression "=>" "." multiplicative_expression) (COMMENT multiplicative_expression "=>" "." multiplicative_expression AMPERSAND cast_expression) (COMMENT multiplicative_expression "=>" "." multiplicative_expression FORWARD_SLASH cast_expression) (COMMENT multiplicative_expression "=>" "." multiplicative_expression STAR cast_expression) (COMMENT multiplicative_expression "=>" "." cast_expression) (COMMENT cast_expression "=>" "." LPAREN type_name RPAREN cast_expression) (COMMENT cast_expression "=>" "." unary_expression) (COMMENT unary_operator "=>" "." BANG) (COMMENT unary_operator "=>" "." TWIDLE) (COMMENT unary_operator "=>" "." MINUS) (COMMENT unary_operator "=>" "." PLUS) (COMMENT unary_operator "=>" "." STAR) (COMMENT unary_operator "=>" "." AMPERSAND) (COMMENT unary_expression "=>" "." SIZEOF LPAREN type_name RPAREN) (COMMENT unary_expression "=>" "." SIZEOF unary_expression) (COMMENT unary_expression "=>" "." unary_operator cast_expression) (COMMENT unary_expression "=>" "." DEC_OP unary_expression) (COMMENT unary_expression "=>" "." INC_OP unary_expression) (COMMENT unary_expression "=>" "." postfix_expression) (COMMENT postfix_expression "=>" "." postfix_expression DEC_OP) (COMMENT postfix_expression "=>" "." postfix_expression INC_OP) (COMMENT postfix_expression "=>" "." postfix_expression PTR_OP IDENTIFIER) (COMMENT postfix_expression "=>" "." postfix_expression DOT IDENTIFIER) (COMMENT postfix_expression "=>" "." postfix_expression LPAREN argument_expression_list RPAREN) (COMMENT postfix_expression "=>" "." postfix_expression LPAREN RPAREN) (COMMENT postfix_expression "=>" "." postfix_expression LBRACK expression RBRACK) (COMMENT postfix_expression "=>" "." primary_expression) (COMMENT primary_expression "=>" "." LPAREN expression RPAREN) (COMMENT primary_expression "=>" "." STRING_LITERAL) (COMMENT primary_expression "=>" "." CONSTANT) (COMMENT primary_expression "=>" "." IDENTIFIER) (SHIFT (IDENTIFIER) s68) (SHIFT (CONSTANT) s69) (SHIFT (STRING_LITERAL) s70) (SHIFT (SIZEOF) s71) (SHIFT (INC_OP) s72) (SHIFT (DEC_OP) s73) (SHIFT (LPAREN) s74) (SHIFT (AMPERSAND) s75) (SHIFT (STAR) s76) (SHIFT (PLUS) s77) (SHIFT (MINUS) s78) (SHIFT (TWIDLE) s79) (SHIFT (BANG) s80) (GOTO primary_expression s51) (GOTO postfix_expression s52) (GOTO unary_expression s53) (GOTO unary_operator s54) (GOTO cast_expression s55) (GOTO multiplicative_expression s56) (GOTO additive_expression s57) (GOTO shift_expression s58) (GOTO relational_expression s59) (GOTO equality_expression s175))
   (STATE s175 (COMMENT and_expression "=>" and_expression AMPERSAND equality_expression ".") (COMMENT equality_expression "=>" equality_expression "." NE_OP relational_expression) (COMMENT equality_expression "=>" equality_expression "." EQ_OP relational_expression) (SHIFT (EQ_OP) s176) (SHIFT (NE_OP) s177) (REDUCE (AND_OP) r49) (REDUCE (OR_OP) r49) (REDUCE (RPAREN) r49) (REDUCE (RBRACK) r49) (REDUCE (RCURLY) r49) (REDUCE (COMMA) r49) (REDUCE (AMPERSAND) r49) (REDUCE (CARROT) r49) (REDUCE (PIPE) r49) (REDUCE (QMARK) r49) (REDUCE (COLON) r49) (REDUCE (SEMICOLON) r49))
   (STATE s176 (COMMENT equality_expression "=>" equality_expression EQ_OP "." relational_expression) (COMMENT relational_expression "=>" "." relational_expression GE_OP shift_expression) (COMMENT relational_expression "=>" "." relational_expression LE_OP shift_expression) (COMMENT relational_expression "=>" "." relational_expression GREATER_OP shift_expression) (COMMENT relational_expression "=>" "." relational_expression LESS_OP shift_expression) (COMMENT relational_expression "=>" "." shift_expression) (COMMENT shift_expression "=>" "." shift_expression RIGHT_OP additive_expression) (COMMENT shift_expression "=>" "." shift_expression LEFT_OP additive_expression) (COMMENT shift_expression "=>" "." additive_expression) (COMMENT additive_expression "=>" "." additive_expression MINUS multiplicative_expression) (COMMENT additive_expression "=>" "." additive_expression PLUS multiplicative_expression) (COMMENT additive_expression "=>" "." multiplicative_expression) (COMMENT multiplicative_expression "=>" "." multiplicative_expression AMPERSAND cast_expression) (COMMENT multiplicative_expression "=>" "." multiplicative_expression FORWARD_SLASH cast_expression) (COMMENT multiplicative_expression "=>" "." multiplicative_expression STAR cast_expression) (COMMENT multiplicative_expression "=>" "." cast_expression) (COMMENT cast_expression "=>" "." LPAREN type_name RPAREN cast_expression) (COMMENT cast_expression "=>" "." unary_expression) (COMMENT unary_operator "=>" "." BANG) (COMMENT unary_operator "=>" "." TWIDLE) (COMMENT unary_operator "=>" "." MINUS) (COMMENT unary_operator "=>" "." PLUS) (COMMENT unary_operator "=>" "." STAR) (COMMENT unary_operator "=>" "." AMPERSAND) (COMMENT unary_expression "=>" "." SIZEOF LPAREN type_name RPAREN) (COMMENT unary_expression "=>" "." SIZEOF unary_expression) (COMMENT unary_expression "=>" "." unary_operator cast_expression) (COMMENT unary_expression "=>" "." DEC_OP unary_expression) (COMMENT unary_expression "=>" "." INC_OP unary_expression) (COMMENT unary_expression "=>" "." postfix_expression) (COMMENT postfix_expression "=>" "." postfix_expression DEC_OP) (COMMENT postfix_expression "=>" "." postfix_expression INC_OP) (COMMENT postfix_expression "=>" "." postfix_expression PTR_OP IDENTIFIER) (COMMENT postfix_expression "=>" "." postfix_expression DOT IDENTIFIER) (COMMENT postfix_expression "=>" "." postfix_expression LPAREN argument_expression_list RPAREN) (COMMENT postfix_expression "=>" "." postfix_expression LPAREN RPAREN) (COMMENT postfix_expression "=>" "." postfix_expression LBRACK expression RBRACK) (COMMENT postfix_expression "=>" "." primary_expression) (COMMENT primary_expression "=>" "." LPAREN expression RPAREN) (COMMENT primary_expression "=>" "." STRING_LITERAL) (COMMENT primary_expression "=>" "." CONSTANT) (COMMENT primary_expression "=>" "." IDENTIFIER) (SHIFT (IDENTIFIER) s68) (SHIFT (CONSTANT) s69) (SHIFT (STRING_LITERAL) s70) (SHIFT (SIZEOF) s71) (SHIFT (INC_OP) s72) (SHIFT (DEC_OP) s73) (SHIFT (LPAREN) s74) (SHIFT (AMPERSAND) s75) (SHIFT (STAR) s76) (SHIFT (PLUS) s77) (SHIFT (MINUS) s78) (SHIFT (TWIDLE) s79) (SHIFT (BANG) s80) (GOTO primary_expression s51) (GOTO postfix_expression s52) (GOTO unary_expression s53) (GOTO unary_operator s54) (GOTO cast_expression s55) (GOTO multiplicative_expression s56) (GOTO additive_expression s57) (GOTO shift_expression s58) (GOTO relational_expression s201))
   (STATE s177 (COMMENT equality_expression "=>" equality_expression NE_OP "." relational_expression) (COMMENT relational_expression "=>" "." relational_expression GE_OP shift_expression) (COMMENT relational_expression "=>" "." relational_expression LE_OP shift_expression) (COMMENT relational_expression "=>" "." relational_expression GREATER_OP shift_expression) (COMMENT relational_expression "=>" "." relational_expression LESS_OP shift_expression) (COMMENT relational_expression "=>" "." shift_expression) (COMMENT shift_expression "=>" "." shift_expression RIGHT_OP additive_expression) (COMMENT shift_expression "=>" "." shift_expression LEFT_OP additive_expression) (COMMENT shift_expression "=>" "." additive_expression) (COMMENT additive_expression "=>" "." additive_expression MINUS multiplicative_expression) (COMMENT additive_expression "=>" "." additive_expression PLUS multiplicative_expression) (COMMENT additive_expression "=>" "." multiplicative_expression) (COMMENT multiplicative_expression "=>" "." multiplicative_expression AMPERSAND cast_expression) (COMMENT multiplicative_expression "=>" "." multiplicative_expression FORWARD_SLASH cast_expression) (COMMENT multiplicative_expression "=>" "." multiplicative_expression STAR cast_expression) (COMMENT multiplicative_expression "=>" "." cast_expression) (COMMENT cast_expression "=>" "." LPAREN type_name RPAREN cast_expression) (COMMENT cast_expression "=>" "." unary_expression) (COMMENT unary_operator "=>" "." BANG) (COMMENT unary_operator "=>" "." TWIDLE) (COMMENT unary_operator "=>" "." MINUS) (COMMENT unary_operator "=>" "." PLUS) (COMMENT unary_operator "=>" "." STAR) (COMMENT unary_operator "=>" "." AMPERSAND) (COMMENT unary_expression "=>" "." SIZEOF LPAREN type_name RPAREN) (COMMENT unary_expression "=>" "." SIZEOF unary_expression) (COMMENT unary_expression "=>" "." unary_operator cast_expression) (COMMENT unary_expression "=>" "." DEC_OP unary_expression) (COMMENT unary_expression "=>" "." INC_OP unary_expression) (COMMENT unary_expression "=>" "." postfix_expression) (COMMENT postfix_expression "=>" "." postfix_expression DEC_OP) (COMMENT postfix_expression "=>" "." postfix_expression INC_OP) (COMMENT postfix_expression "=>" "." postfix_expression PTR_OP IDENTIFIER) (COMMENT postfix_expression "=>" "." postfix_expression DOT IDENTIFIER) (COMMENT postfix_expression "=>" "." postfix_expression LPAREN argument_expression_list RPAREN) (COMMENT postfix_expression "=>" "." postfix_expression LPAREN RPAREN) (COMMENT postfix_expression "=>" "." postfix_expression LBRACK expression RBRACK) (COMMENT postfix_expression "=>" "." primary_expression) (COMMENT primary_expression "=>" "." LPAREN expression RPAREN) (COMMENT primary_expression "=>" "." STRING_LITERAL) (COMMENT primary_expression "=>" "." CONSTANT) (COMMENT primary_expression "=>" "." IDENTIFIER) (SHIFT (IDENTIFIER) s68) (SHIFT (CONSTANT) s69) (SHIFT (STRING_LITERAL) s70) (SHIFT (SIZEOF) s71) (SHIFT (INC_OP) s72) (SHIFT (DEC_OP) s73) (SHIFT (LPAREN) s74) (SHIFT (AMPERSAND) s75) (SHIFT (STAR) s76) (SHIFT (PLUS) s77) (SHIFT (MINUS) s78) (SHIFT (TWIDLE) s79) (SHIFT (BANG) s80) (GOTO primary_expression s51) (GOTO postfix_expression s52) (GOTO unary_expression s53) (GOTO unary_operator s54) (GOTO cast_expression s55) (GOTO multiplicative_expression s56) (GOTO additive_expression s57) (GOTO shift_expression s58) (GOTO relational_expression s178))
   (STATE s178 (COMMENT equality_expression "=>" equality_expression NE_OP relational_expression ".") (COMMENT relational_expression "=>" relational_expression "." GE_OP shift_expression) (COMMENT relational_expression "=>" relational_expression "." LE_OP shift_expression) (COMMENT relational_expression "=>" relational_expression "." GREATER_OP shift_expression) (COMMENT relational_expression "=>" relational_expression "." LESS_OP shift_expression) (SHIFT (LE_OP) s179) (SHIFT (GE_OP) s180) (REDUCE (EQ_OP) r47) (REDUCE (NE_OP) r47) (REDUCE (AND_OP) r47) (REDUCE (OR_OP) r47) (REDUCE (RPAREN) r47) (REDUCE (RBRACK) r47) (REDUCE (RCURLY) r47) (REDUCE (COMMA) r47) (REDUCE (AMPERSAND) r47) (SHIFT (LESS_OP) s181) (SHIFT (GREATER_OP) s182) (REDUCE (CARROT) r47) (REDUCE (PIPE) r47) (REDUCE (QMARK) r47) (REDUCE (COLON) r47) (REDUCE (SEMICOLON) r47))
   (STATE s179 (COMMENT relational_expression "=>" relational_expression LE_OP "." shift_expression) (COMMENT shift_expression "=>" "." shift_expression RIGHT_OP additive_expression) (COMMENT shift_expression "=>" "." shift_expression LEFT_OP additive_expression) (COMMENT shift_expression "=>" "." additive_expression) (COMMENT additive_expression "=>" "." additive_expression MINUS multiplicative_expression) (COMMENT additive_expression "=>" "." additive_expression PLUS multiplicative_expression) (COMMENT additive_expression "=>" "." multiplicative_expression) (COMMENT multiplicative_expression "=>" "." multiplicative_expression AMPERSAND cast_expression) (COMMENT multiplicative_expression "=>" "." multiplicative_expression FORWARD_SLASH cast_expression) (COMMENT multiplicative_expression "=>" "." multiplicative_expression STAR cast_expression) (COMMENT multiplicative_expression "=>" "." cast_expression) (COMMENT cast_expression "=>" "." LPAREN type_name RPAREN cast_expression) (COMMENT cast_expression "=>" "." unary_expression) (COMMENT unary_operator "=>" "." BANG) (COMMENT unary_operator "=>" "." TWIDLE) (COMMENT unary_operator "=>" "." MINUS) (COMMENT unary_operator "=>" "." PLUS) (COMMENT unary_operator "=>" "." STAR) (COMMENT unary_operator "=>" "." AMPERSAND) (COMMENT unary_expression "=>" "." SIZEOF LPAREN type_name RPAREN) (COMMENT unary_expression "=>" "." SIZEOF unary_expression) (COMMENT unary_expression "=>" "." unary_operator cast_expression) (COMMENT unary_expression "=>" "." DEC_OP unary_expression) (COMMENT unary_expression "=>" "." INC_OP unary_expression) (COMMENT unary_expression "=>" "." postfix_expression) (COMMENT postfix_expression "=>" "." postfix_expression DEC_OP) (COMMENT postfix_expression "=>" "." postfix_expression INC_OP) (COMMENT postfix_expression "=>" "." postfix_expression PTR_OP IDENTIFIER) (COMMENT postfix_expression "=>" "." postfix_expression DOT IDENTIFIER) (COMMENT postfix_expression "=>" "." postfix_expression LPAREN argument_expression_list RPAREN) (COMMENT postfix_expression "=>" "." postfix_expression LPAREN RPAREN) (COMMENT postfix_expression "=>" "." postfix_expression LBRACK expression RBRACK) (COMMENT postfix_expression "=>" "." primary_expression) (COMMENT primary_expression "=>" "." LPAREN expression RPAREN) (COMMENT primary_expression "=>" "." STRING_LITERAL) (COMMENT primary_expression "=>" "." CONSTANT) (COMMENT primary_expression "=>" "." IDENTIFIER) (SHIFT (IDENTIFIER) s68) (SHIFT (CONSTANT) s69) (SHIFT (STRING_LITERAL) s70) (SHIFT (SIZEOF) s71) (SHIFT (INC_OP) s72) (SHIFT (DEC_OP) s73) (SHIFT (LPAREN) s74) (SHIFT (AMPERSAND) s75) (SHIFT (STAR) s76) (SHIFT (PLUS) s77) (SHIFT (MINUS) s78) (SHIFT (TWIDLE) s79) (SHIFT (BANG) s80) (GOTO primary_expression s51) (GOTO postfix_expression s52) (GOTO unary_expression s53) (GOTO unary_operator s54) (GOTO cast_expression s55) (GOTO multiplicative_expression s56) (GOTO additive_expression s57) (GOTO shift_expression s200))
   (STATE s180 (COMMENT relational_expression "=>" relational_expression GE_OP "." shift_expression) (COMMENT shift_expression "=>" "." shift_expression RIGHT_OP additive_expression) (COMMENT shift_expression "=>" "." shift_expression LEFT_OP additive_expression) (COMMENT shift_expression "=>" "." additive_expression) (COMMENT additive_expression "=>" "." additive_expression MINUS multiplicative_expression) (COMMENT additive_expression "=>" "." additive_expression PLUS multiplicative_expression) (COMMENT additive_expression "=>" "." multiplicative_expression) (COMMENT multiplicative_expression "=>" "." multiplicative_expression AMPERSAND cast_expression) (COMMENT multiplicative_expression "=>" "." multiplicative_expression FORWARD_SLASH cast_expression) (COMMENT multiplicative_expression "=>" "." multiplicative_expression STAR cast_expression) (COMMENT multiplicative_expression "=>" "." cast_expression) (COMMENT cast_expression "=>" "." LPAREN type_name RPAREN cast_expression) (COMMENT cast_expression "=>" "." unary_expression) (COMMENT unary_operator "=>" "." BANG) (COMMENT unary_operator "=>" "." TWIDLE) (COMMENT unary_operator "=>" "." MINUS) (COMMENT unary_operator "=>" "." PLUS) (COMMENT unary_operator "=>" "." STAR) (COMMENT unary_operator "=>" "." AMPERSAND) (COMMENT unary_expression "=>" "." SIZEOF LPAREN type_name RPAREN) (COMMENT unary_expression "=>" "." SIZEOF unary_expression) (COMMENT unary_expression "=>" "." unary_operator cast_expression) (COMMENT unary_expression "=>" "." DEC_OP unary_expression) (COMMENT unary_expression "=>" "." INC_OP unary_expression) (COMMENT unary_expression "=>" "." postfix_expression) (COMMENT postfix_expression "=>" "." postfix_expression DEC_OP) (COMMENT postfix_expression "=>" "." postfix_expression INC_OP) (COMMENT postfix_expression "=>" "." postfix_expression PTR_OP IDENTIFIER) (COMMENT postfix_expression "=>" "." postfix_expression DOT IDENTIFIER) (COMMENT postfix_expression "=>" "." postfix_expression LPAREN argument_expression_list RPAREN) (COMMENT postfix_expression "=>" "." postfix_expression LPAREN RPAREN) (COMMENT postfix_expression "=>" "." postfix_expression LBRACK expression RBRACK) (COMMENT postfix_expression "=>" "." primary_expression) (COMMENT primary_expression "=>" "." LPAREN expression RPAREN) (COMMENT primary_expression "=>" "." STRING_LITERAL) (COMMENT primary_expression "=>" "." CONSTANT) (COMMENT primary_expression "=>" "." IDENTIFIER) (SHIFT (IDENTIFIER) s68) (SHIFT (CONSTANT) s69) (SHIFT (STRING_LITERAL) s70) (SHIFT (SIZEOF) s71) (SHIFT (INC_OP) s72) (SHIFT (DEC_OP) s73) (SHIFT (LPAREN) s74) (SHIFT (AMPERSAND) s75) (SHIFT (STAR) s76) (SHIFT (PLUS) s77) (SHIFT (MINUS) s78) (SHIFT (TWIDLE) s79) (SHIFT (BANG) s80) (GOTO primary_expression s51) (GOTO postfix_expression s52) (GOTO unary_expression s53) (GOTO unary_operator s54) (GOTO cast_expression s55) (GOTO multiplicative_expression s56) (GOTO additive_expression s57) (GOTO shift_expression s199))
   (STATE s181 (COMMENT relational_expression "=>" relational_expression LESS_OP "." shift_expression) (COMMENT shift_expression "=>" "." shift_expression RIGHT_OP additive_expression) (COMMENT shift_expression "=>" "." shift_expression LEFT_OP additive_expression) (COMMENT shift_expression "=>" "." additive_expression) (COMMENT additive_expression "=>" "." additive_expression MINUS multiplicative_expression) (COMMENT additive_expression "=>" "." additive_expression PLUS multiplicative_expression) (COMMENT additive_expression "=>" "." multiplicative_expression) (COMMENT multiplicative_expression "=>" "." multiplicative_expression AMPERSAND cast_expression) (COMMENT multiplicative_expression "=>" "." multiplicative_expression FORWARD_SLASH cast_expression) (COMMENT multiplicative_expression "=>" "." multiplicative_expression STAR cast_expression) (COMMENT multiplicative_expression "=>" "." cast_expression) (COMMENT cast_expression "=>" "." LPAREN type_name RPAREN cast_expression) (COMMENT cast_expression "=>" "." unary_expression) (COMMENT unary_operator "=>" "." BANG) (COMMENT unary_operator "=>" "." TWIDLE) (COMMENT unary_operator "=>" "." MINUS) (COMMENT unary_operator "=>" "." PLUS) (COMMENT unary_operator "=>" "." STAR) (COMMENT unary_operator "=>" "." AMPERSAND) (COMMENT unary_expression "=>" "." SIZEOF LPAREN type_name RPAREN) (COMMENT unary_expression "=>" "." SIZEOF unary_expression) (COMMENT unary_expression "=>" "." unary_operator cast_expression) (COMMENT unary_expression "=>" "." DEC_OP unary_expression) (COMMENT unary_expression "=>" "." INC_OP unary_expression) (COMMENT unary_expression "=>" "." postfix_expression) (COMMENT postfix_expression "=>" "." postfix_expression DEC_OP) (COMMENT postfix_expression "=>" "." postfix_expression INC_OP) (COMMENT postfix_expression "=>" "." postfix_expression PTR_OP IDENTIFIER) (COMMENT postfix_expression "=>" "." postfix_expression DOT IDENTIFIER) (COMMENT postfix_expression "=>" "." postfix_expression LPAREN argument_expression_list RPAREN) (COMMENT postfix_expression "=>" "." postfix_expression LPAREN RPAREN) (COMMENT postfix_expression "=>" "." postfix_expression LBRACK expression RBRACK) (COMMENT postfix_expression "=>" "." primary_expression) (COMMENT primary_expression "=>" "." LPAREN expression RPAREN) (COMMENT primary_expression "=>" "." STRING_LITERAL) (COMMENT primary_expression "=>" "." CONSTANT) (COMMENT primary_expression "=>" "." IDENTIFIER) (SHIFT (IDENTIFIER) s68) (SHIFT (CONSTANT) s69) (SHIFT (STRING_LITERAL) s70) (SHIFT (SIZEOF) s71) (SHIFT (INC_OP) s72) (SHIFT (DEC_OP) s73) (SHIFT (LPAREN) s74) (SHIFT (AMPERSAND) s75) (SHIFT (STAR) s76) (SHIFT (PLUS) s77) (SHIFT (MINUS) s78) (SHIFT (TWIDLE) s79) (SHIFT (BANG) s80) (GOTO primary_expression s51) (GOTO postfix_expression s52) (GOTO unary_expression s53) (GOTO unary_operator s54) (GOTO cast_expression s55) (GOTO multiplicative_expression s56) (GOTO additive_expression s57) (GOTO shift_expression s198))
   (STATE s182 (COMMENT relational_expression "=>" relational_expression GREATER_OP "." shift_expression) (COMMENT shift_expression "=>" "." shift_expression RIGHT_OP additive_expression) (COMMENT shift_expression "=>" "." shift_expression LEFT_OP additive_expression) (COMMENT shift_expression "=>" "." additive_expression) (COMMENT additive_expression "=>" "." additive_expression MINUS multiplicative_expression) (COMMENT additive_expression "=>" "." additive_expression PLUS multiplicative_expression) (COMMENT additive_expression "=>" "." multiplicative_expression) (COMMENT multiplicative_expression "=>" "." multiplicative_expression AMPERSAND cast_expression) (COMMENT multiplicative_expression "=>" "." multiplicative_expression FORWARD_SLASH cast_expression) (COMMENT multiplicative_expression "=>" "." multiplicative_expression STAR cast_expression) (COMMENT multiplicative_expression "=>" "." cast_expression) (COMMENT cast_expression "=>" "." LPAREN type_name RPAREN cast_expression) (COMMENT cast_expression "=>" "." unary_expression) (COMMENT unary_operator "=>" "." BANG) (COMMENT unary_operator "=>" "." TWIDLE) (COMMENT unary_operator "=>" "." MINUS) (COMMENT unary_operator "=>" "." PLUS) (COMMENT unary_operator "=>" "." STAR) (COMMENT unary_operator "=>" "." AMPERSAND) (COMMENT unary_expression "=>" "." SIZEOF LPAREN type_name RPAREN) (COMMENT unary_expression "=>" "." SIZEOF unary_expression) (COMMENT unary_expression "=>" "." unary_operator cast_expression) (COMMENT unary_expression "=>" "." DEC_OP unary_expression) (COMMENT unary_expression "=>" "." INC_OP unary_expression) (COMMENT unary_expression "=>" "." postfix_expression) (COMMENT postfix_expression "=>" "." postfix_expression DEC_OP) (COMMENT postfix_expression "=>" "." postfix_expression INC_OP) (COMMENT postfix_expression "=>" "." postfix_expression PTR_OP IDENTIFIER) (COMMENT postfix_expression "=>" "." postfix_expression DOT IDENTIFIER) (COMMENT postfix_expression "=>" "." postfix_expression LPAREN argument_expression_list RPAREN) (COMMENT postfix_expression "=>" "." postfix_expression LPAREN RPAREN) (COMMENT postfix_expression "=>" "." postfix_expression LBRACK expression RBRACK) (COMMENT postfix_expression "=>" "." primary_expression) (COMMENT primary_expression "=>" "." LPAREN expression RPAREN) (COMMENT primary_expression "=>" "." STRING_LITERAL) (COMMENT primary_expression "=>" "." CONSTANT) (COMMENT primary_expression "=>" "." IDENTIFIER) (SHIFT (IDENTIFIER) s68) (SHIFT (CONSTANT) s69) (SHIFT (STRING_LITERAL) s70) (SHIFT (SIZEOF) s71) (SHIFT (INC_OP) s72) (SHIFT (DEC_OP) s73) (SHIFT (LPAREN) s74) (SHIFT (AMPERSAND) s75) (SHIFT (STAR) s76) (SHIFT (PLUS) s77) (SHIFT (MINUS) s78) (SHIFT (TWIDLE) s79) (SHIFT (BANG) s80) (GOTO primary_expression s51) (GOTO postfix_expression s52) (GOTO unary_expression s53) (GOTO unary_operator s54) (GOTO cast_expression s55) (GOTO multiplicative_expression s56) (GOTO additive_expression s57) (GOTO shift_expression s183))
   (STATE s183 (COMMENT relational_expression "=>" relational_expression GREATER_OP shift_expression ".") (COMMENT shift_expression "=>" shift_expression "." RIGHT_OP additive_expression) (COMMENT shift_expression "=>" shift_expression "." LEFT_OP additive_expression) (SHIFT (LEFT_OP) s184) (SHIFT (RIGHT_OP) s185) (REDUCE (LE_OP) r42) (REDUCE (GE_OP) r42) (REDUCE (EQ_OP) r42) (REDUCE (NE_OP) r42) (REDUCE (AND_OP) r42) (REDUCE (OR_OP) r42) (REDUCE (RPAREN) r42) (REDUCE (RBRACK) r42) (REDUCE (RCURLY) r42) (REDUCE (COMMA) r42) (REDUCE (AMPERSAND) r42) (REDUCE (LESS_OP) r42) (REDUCE (GREATER_OP) r42) (REDUCE (CARROT) r42) (REDUCE (PIPE) r42) (REDUCE (QMARK) r42) (REDUCE (COLON) r42) (REDUCE (SEMICOLON) r42))
   (STATE s184 (COMMENT shift_expression "=>" shift_expression LEFT_OP "." additive_expression) (COMMENT additive_expression "=>" "." additive_expression MINUS multiplicative_expression) (COMMENT additive_expression "=>" "." additive_expression PLUS multiplicative_expression) (COMMENT additive_expression "=>" "." multiplicative_expression) (COMMENT multiplicative_expression "=>" "." multiplicative_expression AMPERSAND cast_expression) (COMMENT multiplicative_expression "=>" "." multiplicative_expression FORWARD_SLASH cast_expression) (COMMENT multiplicative_expression "=>" "." multiplicative_expression STAR cast_expression) (COMMENT multiplicative_expression "=>" "." cast_expression) (COMMENT cast_expression "=>" "." LPAREN type_name RPAREN cast_expression) (COMMENT cast_expression "=>" "." unary_expression) (COMMENT unary_operator "=>" "." BANG) (COMMENT unary_operator "=>" "." TWIDLE) (COMMENT unary_operator "=>" "." MINUS) (COMMENT unary_operator "=>" "." PLUS) (COMMENT unary_operator "=>" "." STAR) (COMMENT unary_operator "=>" "." AMPERSAND) (COMMENT unary_expression "=>" "." SIZEOF LPAREN type_name RPAREN) (COMMENT unary_expression "=>" "." SIZEOF unary_expression) (COMMENT unary_expression "=>" "." unary_operator cast_expression) (COMMENT unary_expression "=>" "." DEC_OP unary_expression) (COMMENT unary_expression "=>" "." INC_OP unary_expression) (COMMENT unary_expression "=>" "." postfix_expression) (COMMENT postfix_expression "=>" "." postfix_expression DEC_OP) (COMMENT postfix_expression "=>" "." postfix_expression INC_OP) (COMMENT postfix_expression "=>" "." postfix_expression PTR_OP IDENTIFIER) (COMMENT postfix_expression "=>" "." postfix_expression DOT IDENTIFIER) (COMMENT postfix_expression "=>" "." postfix_expression LPAREN argument_expression_list RPAREN) (COMMENT postfix_expression "=>" "." postfix_expression LPAREN RPAREN) (COMMENT postfix_expression "=>" "." postfix_expression LBRACK expression RBRACK) (COMMENT postfix_expression "=>" "." primary_expression) (COMMENT primary_expression "=>" "." LPAREN expression RPAREN) (COMMENT primary_expression "=>" "." STRING_LITERAL) (COMMENT primary_expression "=>" "." CONSTANT) (COMMENT primary_expression "=>" "." IDENTIFIER) (SHIFT (IDENTIFIER) s68) (SHIFT (CONSTANT) s69) (SHIFT (STRING_LITERAL) s70) (SHIFT (SIZEOF) s71) (SHIFT (INC_OP) s72) (SHIFT (DEC_OP) s73) (SHIFT (LPAREN) s74) (SHIFT (AMPERSAND) s75) (SHIFT (STAR) s76) (SHIFT (PLUS) s77) (SHIFT (MINUS) s78) (SHIFT (TWIDLE) s79) (SHIFT (BANG) s80) (GOTO primary_expression s51) (GOTO postfix_expression s52) (GOTO unary_expression s53) (GOTO unary_operator s54) (GOTO cast_expression s55) (GOTO multiplicative_expression s56) (GOTO additive_expression s197))
   (STATE s185 (COMMENT shift_expression "=>" shift_expression RIGHT_OP "." additive_expression) (COMMENT additive_expression "=>" "." additive_expression MINUS multiplicative_expression) (COMMENT additive_expression "=>" "." additive_expression PLUS multiplicative_expression) (COMMENT additive_expression "=>" "." multiplicative_expression) (COMMENT multiplicative_expression "=>" "." multiplicative_expression AMPERSAND cast_expression) (COMMENT multiplicative_expression "=>" "." multiplicative_expression FORWARD_SLASH cast_expression) (COMMENT multiplicative_expression "=>" "." multiplicative_expression STAR cast_expression) (COMMENT multiplicative_expression "=>" "." cast_expression) (COMMENT cast_expression "=>" "." LPAREN type_name RPAREN cast_expression) (COMMENT cast_expression "=>" "." unary_expression) (COMMENT unary_operator "=>" "." BANG) (COMMENT unary_operator "=>" "." TWIDLE) (COMMENT unary_operator "=>" "." MINUS) (COMMENT unary_operator "=>" "." PLUS) (COMMENT unary_operator "=>" "." STAR) (COMMENT unary_operator "=>" "." AMPERSAND) (COMMENT unary_expression "=>" "." SIZEOF LPAREN type_name RPAREN) (COMMENT unary_expression "=>" "." SIZEOF unary_expression) (COMMENT unary_expression "=>" "." unary_operator cast_expression) (COMMENT unary_expression "=>" "." DEC_OP unary_expression) (COMMENT unary_expression "=>" "." INC_OP unary_expression) (COMMENT unary_expression "=>" "." postfix_expression) (COMMENT postfix_expression "=>" "." postfix_expression DEC_OP) (COMMENT postfix_expression "=>" "." postfix_expression INC_OP) (COMMENT postfix_expression "=>" "." postfix_expression PTR_OP IDENTIFIER) (COMMENT postfix_expression "=>" "." postfix_expression DOT IDENTIFIER) (COMMENT postfix_expression "=>" "." postfix_expression LPAREN argument_expression_list RPAREN) (COMMENT postfix_expression "=>" "." postfix_expression LPAREN RPAREN) (COMMENT postfix_expression "=>" "." postfix_expression LBRACK expression RBRACK) (COMMENT postfix_expression "=>" "." primary_expression) (COMMENT primary_expression "=>" "." LPAREN expression RPAREN) (COMMENT primary_expression "=>" "." STRING_LITERAL) (COMMENT primary_expression "=>" "." CONSTANT) (COMMENT primary_expression "=>" "." IDENTIFIER) (SHIFT (IDENTIFIER) s68) (SHIFT (CONSTANT) s69) (SHIFT (STRING_LITERAL) s70) (SHIFT (SIZEOF) s71) (SHIFT (INC_OP) s72) (SHIFT (DEC_OP) s73) (SHIFT (LPAREN) s74) (SHIFT (AMPERSAND) s75) (SHIFT (STAR) s76) (SHIFT (PLUS) s77) (SHIFT (MINUS) s78) (SHIFT (TWIDLE) s79) (SHIFT (BANG) s80) (GOTO primary_expression s51) (GOTO postfix_expression s52) (GOTO unary_expression s53) (GOTO unary_operator s54) (GOTO cast_expression s55) (GOTO multiplicative_expression s56) (GOTO additive_expression s186))
   (STATE s186 (COMMENT shift_expression "=>" shift_expression RIGHT_OP additive_expression ".") (COMMENT additive_expression "=>" additive_expression "." MINUS multiplicative_expression) (COMMENT additive_expression "=>" additive_expression "." PLUS multiplicative_expression) (REDUCE (LEFT_OP) r39) (REDUCE (RIGHT_OP) r39) (REDUCE (LE_OP) r39) (REDUCE (GE_OP) r39) (REDUCE (EQ_OP) r39) (REDUCE (NE_OP) r39) (REDUCE (AND_OP) r39) (REDUCE (OR_OP) r39) (REDUCE (RPAREN) r39) (REDUCE (RBRACK) r39) (REDUCE (RCURLY) r39) (REDUCE (COMMA) r39) (REDUCE (AMPERSAND) r39) (SHIFT (PLUS) s187) (SHIFT (MINUS) s188) (REDUCE (LESS_OP) r39) (REDUCE (GREATER_OP) r39) (REDUCE (CARROT) r39) (REDUCE (PIPE) r39) (REDUCE (QMARK) r39) (REDUCE (COLON) r39) (REDUCE (SEMICOLON) r39))
   (STATE s187 (COMMENT additive_expression "=>" additive_expression PLUS "." multiplicative_expression) (COMMENT multiplicative_expression "=>" "." multiplicative_expression AMPERSAND cast_expression) (COMMENT multiplicative_expression "=>" "." multiplicative_expression FORWARD_SLASH cast_expression) (COMMENT multiplicative_expression "=>" "." multiplicative_expression STAR cast_expression) (COMMENT multiplicative_expression "=>" "." cast_expression) (COMMENT cast_expression "=>" "." LPAREN type_name RPAREN cast_expression) (COMMENT cast_expression "=>" "." unary_expression) (COMMENT unary_operator "=>" "." BANG) (COMMENT unary_operator "=>" "." TWIDLE) (COMMENT unary_operator "=>" "." MINUS) (COMMENT unary_operator "=>" "." PLUS) (COMMENT unary_operator "=>" "." STAR) (COMMENT unary_operator "=>" "." AMPERSAND) (COMMENT unary_expression "=>" "." SIZEOF LPAREN type_name RPAREN) (COMMENT unary_expression "=>" "." SIZEOF unary_expression) (COMMENT unary_expression "=>" "." unary_operator cast_expression) (COMMENT unary_expression "=>" "." DEC_OP unary_expression) (COMMENT unary_expression "=>" "." INC_OP unary_expression) (COMMENT unary_expression "=>" "." postfix_expression) (COMMENT postfix_expression "=>" "." postfix_expression DEC_OP) (COMMENT postfix_expression "=>" "." postfix_expression INC_OP) (COMMENT postfix_expression "=>" "." postfix_expression PTR_OP IDENTIFIER) (COMMENT postfix_expression "=>" "." postfix_expression DOT IDENTIFIER) (COMMENT postfix_expression "=>" "." postfix_expression LPAREN argument_expression_list RPAREN) (COMMENT postfix_expression "=>" "." postfix_expression LPAREN RPAREN) (COMMENT postfix_expression "=>" "." postfix_expression LBRACK expression RBRACK) (COMMENT postfix_expression "=>" "." primary_expression) (COMMENT primary_expression "=>" "." LPAREN expression RPAREN) (COMMENT primary_expression "=>" "." STRING_LITERAL) (COMMENT primary_expression "=>" "." CONSTANT) (COMMENT primary_expression "=>" "." IDENTIFIER) (SHIFT (IDENTIFIER) s68) (SHIFT (CONSTANT) s69) (SHIFT (STRING_LITERAL) s70) (SHIFT (SIZEOF) s71) (SHIFT (INC_OP) s72) (SHIFT (DEC_OP) s73) (SHIFT (LPAREN) s74) (SHIFT (AMPERSAND) s75) (SHIFT (STAR) s76) (SHIFT (PLUS) s77) (SHIFT (MINUS) s78) (SHIFT (TWIDLE) s79) (SHIFT (BANG) s80) (GOTO primary_expression s51) (GOTO postfix_expression s52) (GOTO unary_expression s53) (GOTO unary_operator s54) (GOTO cast_expression s55) (GOTO multiplicative_expression s196))
   (STATE s188 (COMMENT additive_expression "=>" additive_expression MINUS "." multiplicative_expression) (COMMENT multiplicative_expression "=>" "." multiplicative_expression AMPERSAND cast_expression) (COMMENT multiplicative_expression "=>" "." multiplicative_expression FORWARD_SLASH cast_expression) (COMMENT multiplicative_expression "=>" "." multiplicative_expression STAR cast_expression) (COMMENT multiplicative_expression "=>" "." cast_expression) (COMMENT cast_expression "=>" "." LPAREN type_name RPAREN cast_expression) (COMMENT cast_expression "=>" "." unary_expression) (COMMENT unary_operator "=>" "." BANG) (COMMENT unary_operator "=>" "." TWIDLE) (COMMENT unary_operator "=>" "." MINUS) (COMMENT unary_operator "=>" "." PLUS) (COMMENT unary_operator "=>" "." STAR) (COMMENT unary_operator "=>" "." AMPERSAND) (COMMENT unary_expression "=>" "." SIZEOF LPAREN type_name RPAREN) (COMMENT unary_expression "=>" "." SIZEOF unary_expression) (COMMENT unary_expression "=>" "." unary_operator cast_expression) (COMMENT unary_expression "=>" "." DEC_OP unary_expression) (COMMENT unary_expression "=>" "." INC_OP unary_expression) (COMMENT unary_expression "=>" "." postfix_expression) (COMMENT postfix_expression "=>" "." postfix_expression DEC_OP) (COMMENT postfix_expression "=>" "." postfix_expression INC_OP) (COMMENT postfix_expression "=>" "." postfix_expression PTR_OP IDENTIFIER) (COMMENT postfix_expression "=>" "." postfix_expression DOT IDENTIFIER) (COMMENT postfix_expression "=>" "." postfix_expression LPAREN argument_expression_list RPAREN) (COMMENT postfix_expression "=>" "." postfix_expression LPAREN RPAREN) (COMMENT postfix_expression "=>" "." postfix_expression LBRACK expression RBRACK) (COMMENT postfix_expression "=>" "." primary_expression) (COMMENT primary_expression "=>" "." LPAREN expression RPAREN) (COMMENT primary_expression "=>" "." STRING_LITERAL) (COMMENT primary_expression "=>" "." CONSTANT) (COMMENT primary_expression "=>" "." IDENTIFIER) (SHIFT (IDENTIFIER) s68) (SHIFT (CONSTANT) s69) (SHIFT (STRING_LITERAL) s70) (SHIFT (SIZEOF) s71) (SHIFT (INC_OP) s72) (SHIFT (DEC_OP) s73) (SHIFT (LPAREN) s74) (SHIFT (AMPERSAND) s75) (SHIFT (STAR) s76) (SHIFT (PLUS) s77) (SHIFT (MINUS) s78) (SHIFT (TWIDLE) s79) (SHIFT (BANG) s80) (GOTO primary_expression s51) (GOTO postfix_expression s52) (GOTO unary_expression s53) (GOTO unary_operator s54) (GOTO cast_expression s55) (GOTO multiplicative_expression s189))
   (STATE s189 (COMMENT additive_expression "=>" additive_expression MINUS multiplicative_expression ".") (COMMENT multiplicative_expression "=>" multiplicative_expression "." AMPERSAND cast_expression) (COMMENT multiplicative_expression "=>" multiplicative_expression "." FORWARD_SLASH cast_expression) (COMMENT multiplicative_expression "=>" multiplicative_expression "." STAR cast_expression) (REDUCE (LEFT_OP) r36) (REDUCE (RIGHT_OP) r36) (REDUCE (LE_OP) r36) (REDUCE (GE_OP) r36) (REDUCE (EQ_OP) r36) (REDUCE (NE_OP) r36) (REDUCE (AND_OP) r36) (REDUCE (OR_OP) r36) (REDUCE (RPAREN) r36) (REDUCE (RBRACK) r36) (REDUCE (RCURLY) r36) (REDUCE (COMMA) r36) (COMMENT (REDUCE (AMPERSAND) r36)) (SHIFT (AMPERSAND) s190) (SHIFT (STAR) s191) (REDUCE (PLUS) r36) (REDUCE (MINUS) r36) (SHIFT (FORWARD_SLASH) s192) (REDUCE (LESS_OP) r36) (REDUCE (GREATER_OP) r36) (REDUCE (CARROT) r36) (REDUCE (PIPE) r36) (REDUCE (QMARK) r36) (REDUCE (COLON) r36) (REDUCE (SEMICOLON) r36))
   (STATE s190 (COMMENT multiplicative_expression "=>" multiplicative_expression AMPERSAND "." cast_expression) (COMMENT cast_expression "=>" "." LPAREN type_name RPAREN cast_expression) (COMMENT cast_expression "=>" "." unary_expression) (COMMENT unary_operator "=>" "." BANG) (COMMENT unary_operator "=>" "." TWIDLE) (COMMENT unary_operator "=>" "." MINUS) (COMMENT unary_operator "=>" "." PLUS) (COMMENT unary_operator "=>" "." STAR) (COMMENT unary_operator "=>" "." AMPERSAND) (COMMENT unary_expression "=>" "." SIZEOF LPAREN type_name RPAREN) (COMMENT unary_expression "=>" "." SIZEOF unary_expression) (COMMENT unary_expression "=>" "." unary_operator cast_expression) (COMMENT unary_expression "=>" "." DEC_OP unary_expression) (COMMENT unary_expression "=>" "." INC_OP unary_expression) (COMMENT unary_expression "=>" "." postfix_expression) (COMMENT postfix_expression "=>" "." postfix_expression DEC_OP) (COMMENT postfix_expression "=>" "." postfix_expression INC_OP) (COMMENT postfix_expression "=>" "." postfix_expression PTR_OP IDENTIFIER) (COMMENT postfix_expression "=>" "." postfix_expression DOT IDENTIFIER) (COMMENT postfix_expression "=>" "." postfix_expression LPAREN argument_expression_list RPAREN) (COMMENT postfix_expression "=>" "." postfix_expression LPAREN RPAREN) (COMMENT postfix_expression "=>" "." postfix_expression LBRACK expression RBRACK) (COMMENT postfix_expression "=>" "." primary_expression) (COMMENT primary_expression "=>" "." LPAREN expression RPAREN) (COMMENT primary_expression "=>" "." STRING_LITERAL) (COMMENT primary_expression "=>" "." CONSTANT) (COMMENT primary_expression "=>" "." IDENTIFIER) (SHIFT (IDENTIFIER) s68) (SHIFT (CONSTANT) s69) (SHIFT (STRING_LITERAL) s70) (SHIFT (SIZEOF) s71) (SHIFT (INC_OP) s72) (SHIFT (DEC_OP) s73) (SHIFT (LPAREN) s74) (SHIFT (AMPERSAND) s75) (SHIFT (STAR) s76) (SHIFT (PLUS) s77) (SHIFT (MINUS) s78) (SHIFT (TWIDLE) s79) (SHIFT (BANG) s80) (GOTO primary_expression s51) (GOTO postfix_expression s52) (GOTO unary_expression s53) (GOTO unary_operator s54) (GOTO cast_expression s195))
   (STATE s191 (COMMENT multiplicative_expression "=>" multiplicative_expression STAR "." cast_expression) (COMMENT cast_expression "=>" "." LPAREN type_name RPAREN cast_expression) (COMMENT cast_expression "=>" "." unary_expression) (COMMENT unary_operator "=>" "." BANG) (COMMENT unary_operator "=>" "." TWIDLE) (COMMENT unary_operator "=>" "." MINUS) (COMMENT unary_operator "=>" "." PLUS) (COMMENT unary_operator "=>" "." STAR) (COMMENT unary_operator "=>" "." AMPERSAND) (COMMENT unary_expression "=>" "." SIZEOF LPAREN type_name RPAREN) (COMMENT unary_expression "=>" "." SIZEOF unary_expression) (COMMENT unary_expression "=>" "." unary_operator cast_expression) (COMMENT unary_expression "=>" "." DEC_OP unary_expression) (COMMENT unary_expression "=>" "." INC_OP unary_expression) (COMMENT unary_expression "=>" "." postfix_expression) (COMMENT postfix_expression "=>" "." postfix_expression DEC_OP) (COMMENT postfix_expression "=>" "." postfix_expression INC_OP) (COMMENT postfix_expression "=>" "." postfix_expression PTR_OP IDENTIFIER) (COMMENT postfix_expression "=>" "." postfix_expression DOT IDENTIFIER) (COMMENT postfix_expression "=>" "." postfix_expression LPAREN argument_expression_list RPAREN) (COMMENT postfix_expression "=>" "." postfix_expression LPAREN RPAREN) (COMMENT postfix_expression "=>" "." postfix_expression LBRACK expression RBRACK) (COMMENT postfix_expression "=>" "." primary_expression) (COMMENT primary_expression "=>" "." LPAREN expression RPAREN) (COMMENT primary_expression "=>" "." STRING_LITERAL) (COMMENT primary_expression "=>" "." CONSTANT) (COMMENT primary_expression "=>" "." IDENTIFIER) (SHIFT (IDENTIFIER) s68) (SHIFT (CONSTANT) s69) (SHIFT (STRING_LITERAL) s70) (SHIFT (SIZEOF) s71) (SHIFT (INC_OP) s72) (SHIFT (DEC_OP) s73) (SHIFT (LPAREN) s74) (SHIFT (AMPERSAND) s75) (SHIFT (STAR) s76) (SHIFT (PLUS) s77) (SHIFT (MINUS) s78) (SHIFT (TWIDLE) s79) (SHIFT (BANG) s80) (GOTO primary_expression s51) (GOTO postfix_expression s52) (GOTO unary_expression s53) (GOTO unary_operator s54) (GOTO cast_expression s194))
   (STATE s192 (COMMENT multiplicative_expression "=>" multiplicative_expression FORWARD_SLASH "." cast_expression) (COMMENT cast_expression "=>" "." LPAREN type_name RPAREN cast_expression) (COMMENT cast_expression "=>" "." unary_expression) (COMMENT unary_operator "=>" "." BANG) (COMMENT unary_operator "=>" "." TWIDLE) (COMMENT unary_operator "=>" "." MINUS) (COMMENT unary_operator "=>" "." PLUS) (COMMENT unary_operator "=>" "." STAR) (COMMENT unary_operator "=>" "." AMPERSAND) (COMMENT unary_expression "=>" "." SIZEOF LPAREN type_name RPAREN) (COMMENT unary_expression "=>" "." SIZEOF unary_expression) (COMMENT unary_expression "=>" "." unary_operator cast_expression) (COMMENT unary_expression "=>" "." DEC_OP unary_expression) (COMMENT unary_expression "=>" "." INC_OP unary_expression) (COMMENT unary_expression "=>" "." postfix_expression) (COMMENT postfix_expression "=>" "." postfix_expression DEC_OP) (COMMENT postfix_expression "=>" "." postfix_expression INC_OP) (COMMENT postfix_expression "=>" "." postfix_expression PTR_OP IDENTIFIER) (COMMENT postfix_expression "=>" "." postfix_expression DOT IDENTIFIER) (COMMENT postfix_expression "=>" "." postfix_expression LPAREN argument_expression_list RPAREN) (COMMENT postfix_expression "=>" "." postfix_expression LPAREN RPAREN) (COMMENT postfix_expression "=>" "." postfix_expression LBRACK expression RBRACK) (COMMENT postfix_expression "=>" "." primary_expression) (COMMENT primary_expression "=>" "." LPAREN expression RPAREN) (COMMENT primary_expression "=>" "." STRING_LITERAL) (COMMENT primary_expression "=>" "." CONSTANT) (COMMENT primary_expression "=>" "." IDENTIFIER) (SHIFT (IDENTIFIER) s68) (SHIFT (CONSTANT) s69) (SHIFT (STRING_LITERAL) s70) (SHIFT (SIZEOF) s71) (SHIFT (INC_OP) s72) (SHIFT (DEC_OP) s73) (SHIFT (LPAREN) s74) (SHIFT (AMPERSAND) s75) (SHIFT (STAR) s76) (SHIFT (PLUS) s77) (SHIFT (MINUS) s78) (SHIFT (TWIDLE) s79) (SHIFT (BANG) s80) (GOTO primary_expression s51) (GOTO postfix_expression s52) (GOTO unary_expression s53) (GOTO unary_operator s54) (GOTO cast_expression s193))
   (STATE s193 (COMMENT multiplicative_expression "=>" multiplicative_expression FORWARD_SLASH cast_expression ".") (REDUCE () r32))
   (STATE s194 (COMMENT multiplicative_expression "=>" multiplicative_expression STAR cast_expression ".") (REDUCE () r31))
   (STATE s195 (COMMENT multiplicative_expression "=>" multiplicative_expression AMPERSAND cast_expression ".") (REDUCE () r33))
   (STATE s196 (COMMENT additive_expression "=>" additive_expression PLUS multiplicative_expression ".") (COMMENT multiplicative_expression "=>" multiplicative_expression "." AMPERSAND cast_expression) (COMMENT multiplicative_expression "=>" multiplicative_expression "." FORWARD_SLASH cast_expression) (COMMENT multiplicative_expression "=>" multiplicative_expression "." STAR cast_expression) (REDUCE (LEFT_OP) r35) (REDUCE (RIGHT_OP) r35) (REDUCE (LE_OP) r35) (REDUCE (GE_OP) r35) (REDUCE (EQ_OP) r35) (REDUCE (NE_OP) r35) (REDUCE (AND_OP) r35) (REDUCE (OR_OP) r35) (REDUCE (RPAREN) r35) (REDUCE (RBRACK) r35) (REDUCE (RCURLY) r35) (REDUCE (COMMA) r35) (COMMENT (REDUCE (AMPERSAND) r35)) (SHIFT (AMPERSAND) s190) (SHIFT (STAR) s191) (REDUCE (PLUS) r35) (REDUCE (MINUS) r35) (SHIFT (FORWARD_SLASH) s192) (REDUCE (LESS_OP) r35) (REDUCE (GREATER_OP) r35) (REDUCE (CARROT) r35) (REDUCE (PIPE) r35) (REDUCE (QMARK) r35) (REDUCE (COLON) r35) (REDUCE (SEMICOLON) r35))
   (STATE s197 (COMMENT shift_expression "=>" shift_expression LEFT_OP additive_expression ".") (COMMENT additive_expression "=>" additive_expression "." MINUS multiplicative_expression) (COMMENT additive_expression "=>" additive_expression "." PLUS multiplicative_expression) (REDUCE (LEFT_OP) r38) (REDUCE (RIGHT_OP) r38) (REDUCE (LE_OP) r38) (REDUCE (GE_OP) r38) (REDUCE (EQ_OP) r38) (REDUCE (NE_OP) r38) (REDUCE (AND_OP) r38) (REDUCE (OR_OP) r38) (REDUCE (RPAREN) r38) (REDUCE (RBRACK) r38) (REDUCE (RCURLY) r38) (REDUCE (COMMA) r38) (REDUCE (AMPERSAND) r38) (SHIFT (PLUS) s187) (SHIFT (MINUS) s188) (REDUCE (LESS_OP) r38) (REDUCE (GREATER_OP) r38) (REDUCE (CARROT) r38) (REDUCE (PIPE) r38) (REDUCE (QMARK) r38) (REDUCE (COLON) r38) (REDUCE (SEMICOLON) r38))
   (STATE s198 (COMMENT relational_expression "=>" relational_expression LESS_OP shift_expression ".") (COMMENT shift_expression "=>" shift_expression "." RIGHT_OP additive_expression) (COMMENT shift_expression "=>" shift_expression "." LEFT_OP additive_expression) (SHIFT (LEFT_OP) s184) (SHIFT (RIGHT_OP) s185) (REDUCE (LE_OP) r41) (REDUCE (GE_OP) r41) (REDUCE (EQ_OP) r41) (REDUCE (NE_OP) r41) (REDUCE (AND_OP) r41) (REDUCE (OR_OP) r41) (REDUCE (RPAREN) r41) (REDUCE (RBRACK) r41) (REDUCE (RCURLY) r41) (REDUCE (COMMA) r41) (REDUCE (AMPERSAND) r41) (REDUCE (LESS_OP) r41) (REDUCE (GREATER_OP) r41) (REDUCE (CARROT) r41) (REDUCE (PIPE) r41) (REDUCE (QMARK) r41) (REDUCE (COLON) r41) (REDUCE (SEMICOLON) r41))
   (STATE s199 (COMMENT relational_expression "=>" relational_expression GE_OP shift_expression ".") (COMMENT shift_expression "=>" shift_expression "." RIGHT_OP additive_expression) (COMMENT shift_expression "=>" shift_expression "." LEFT_OP additive_expression) (SHIFT (LEFT_OP) s184) (SHIFT (RIGHT_OP) s185) (REDUCE (LE_OP) r44) (REDUCE (GE_OP) r44) (REDUCE (EQ_OP) r44) (REDUCE (NE_OP) r44) (REDUCE (AND_OP) r44) (REDUCE (OR_OP) r44) (REDUCE (RPAREN) r44) (REDUCE (RBRACK) r44) (REDUCE (RCURLY) r44) (REDUCE (COMMA) r44) (REDUCE (AMPERSAND) r44) (REDUCE (LESS_OP) r44) (REDUCE (GREATER_OP) r44) (REDUCE (CARROT) r44) (REDUCE (PIPE) r44) (REDUCE (QMARK) r44) (REDUCE (COLON) r44) (REDUCE (SEMICOLON) r44))
   (STATE s200 (COMMENT relational_expression "=>" relational_expression LE_OP shift_expression ".") (COMMENT shift_expression "=>" shift_expression "." RIGHT_OP additive_expression) (COMMENT shift_expression "=>" shift_expression "." LEFT_OP additive_expression) (SHIFT (LEFT_OP) s184) (SHIFT (RIGHT_OP) s185) (REDUCE (LE_OP) r43) (REDUCE (GE_OP) r43) (REDUCE (EQ_OP) r43) (REDUCE (NE_OP) r43) (REDUCE (AND_OP) r43) (REDUCE (OR_OP) r43) (REDUCE (RPAREN) r43) (REDUCE (RBRACK) r43) (REDUCE (RCURLY) r43) (REDUCE (COMMA) r43) (REDUCE (AMPERSAND) r43) (REDUCE (LESS_OP) r43) (REDUCE (GREATER_OP) r43) (REDUCE (CARROT) r43) (REDUCE (PIPE) r43) (REDUCE (QMARK) r43) (REDUCE (COLON) r43) (REDUCE (SEMICOLON) r43))
   (STATE s201 (COMMENT equality_expression "=>" equality_expression EQ_OP relational_expression ".") (COMMENT relational_expression "=>" relational_expression "." GE_OP shift_expression) (COMMENT relational_expression "=>" relational_expression "." LE_OP shift_expression) (COMMENT relational_expression "=>" relational_expression "." GREATER_OP shift_expression) (COMMENT relational_expression "=>" relational_expression "." LESS_OP shift_expression) (SHIFT (LE_OP) s179) (SHIFT (GE_OP) s180) (REDUCE (EQ_OP) r46) (REDUCE (NE_OP) r46) (REDUCE (AND_OP) r46) (REDUCE (OR_OP) r46) (REDUCE (RPAREN) r46) (REDUCE (RBRACK) r46) (REDUCE (RCURLY) r46) (REDUCE (COMMA) r46) (REDUCE (AMPERSAND) r46) (SHIFT (LESS_OP) s181) (SHIFT (GREATER_OP) s182) (REDUCE (CARROT) r46) (REDUCE (PIPE) r46) (REDUCE (QMARK) r46) (REDUCE (COLON) r46) (REDUCE (SEMICOLON) r46))
   (STATE s202 (COMMENT unary_expression "=>" unary_operator cast_expression ".") (REDUCE () r19))
   (STATE s203 (COMMENT postfix_expression "=>" postfix_expression PTR_OP "." IDENTIFIER) (SHIFT (IDENTIFIER) s218))
   (STATE s204 (COMMENT postfix_expression "=>" postfix_expression INC_OP ".") (REDUCE () r12))
   (STATE s205 (COMMENT postfix_expression "=>" postfix_expression DEC_OP ".") (REDUCE () r13))
   (STATE s206 (COMMENT assignment_expression "=>" "." unary_expression assignment_operator assignment_expression) (COMMENT assignment_expression "=>" "." conditional_expression) (COMMENT conditional_expression "=>" "." logical_or_expression QMARK expression COLON conditional_expression) (COMMENT conditional_expression "=>" "." logical_or_expression) (COMMENT logical_or_expression "=>" "." logical_or_expression OR_OP logical_and_expression) (COMMENT logical_or_expression "=>" "." logical_and_expression) (COMMENT logical_and_expression "=>" "." logical_and_expression AND_OP inclusive_or_expression) (COMMENT logical_and_expression "=>" "." inclusive_or_expression) (COMMENT inclusive_or_expression "=>" "." inclusive_or_expression PIPE exclusive_or_expression) (COMMENT inclusive_or_expression "=>" "." exclusive_or_expression) (COMMENT exclusive_or_expression "=>" "." exclusive_or_expression CARROT and_expression) (COMMENT exclusive_or_expression "=>" "." and_expression) (COMMENT and_expression "=>" "." and_expression AMPERSAND equality_expression) (COMMENT and_expression "=>" "." equality_expression) (COMMENT equality_expression "=>" "." equality_expression NE_OP relational_expression) (COMMENT equality_expression "=>" "." equality_expression EQ_OP relational_expression) (COMMENT equality_expression "=>" "." relational_expression) (COMMENT relational_expression "=>" "." relational_expression GE_OP shift_expression) (COMMENT relational_expression "=>" "." relational_expression LE_OP shift_expression) (COMMENT relational_expression "=>" "." relational_expression GREATER_OP shift_expression) (COMMENT relational_expression "=>" "." relational_expression LESS_OP shift_expression) (COMMENT relational_expression "=>" "." shift_expression) (COMMENT shift_expression "=>" "." shift_expression RIGHT_OP additive_expression) (COMMENT shift_expression "=>" "." shift_expression LEFT_OP additive_expression) (COMMENT shift_expression "=>" "." additive_expression) (COMMENT additive_expression "=>" "." additive_expression MINUS multiplicative_expression) (COMMENT additive_expression "=>" "." additive_expression PLUS multiplicative_expression) (COMMENT additive_expression "=>" "." multiplicative_expression) (COMMENT multiplicative_expression "=>" "." multiplicative_expression AMPERSAND cast_expression) (COMMENT multiplicative_expression "=>" "." multiplicative_expression FORWARD_SLASH cast_expression) (COMMENT multiplicative_expression "=>" "." multiplicative_expression STAR cast_expression) (COMMENT multiplicative_expression "=>" "." cast_expression) (COMMENT cast_expression "=>" "." LPAREN type_name RPAREN cast_expression) (COMMENT cast_expression "=>" "." unary_expression) (COMMENT unary_operator "=>" "." BANG) (COMMENT unary_operator "=>" "." TWIDLE) (COMMENT unary_operator "=>" "." MINUS) (COMMENT unary_operator "=>" "." PLUS) (COMMENT unary_operator "=>" "." STAR) (COMMENT unary_operator "=>" "." AMPERSAND) (COMMENT unary_expression "=>" "." SIZEOF LPAREN type_name RPAREN) (COMMENT unary_expression "=>" "." SIZEOF unary_expression) (COMMENT unary_expression "=>" "." unary_operator cast_expression) (COMMENT unary_expression "=>" "." DEC_OP unary_expression) (COMMENT unary_expression "=>" "." INC_OP unary_expression) (COMMENT unary_expression "=>" "." postfix_expression) (COMMENT argument_expression_list "=>" "." argument_expression_list COMMA assignment_expression) (COMMENT argument_expression_list "=>" "." assignment_expression) (COMMENT postfix_expression "=>" "." postfix_expression DEC_OP) (COMMENT postfix_expression "=>" "." postfix_expression INC_OP) (COMMENT postfix_expression "=>" "." postfix_expression PTR_OP IDENTIFIER) (COMMENT postfix_expression "=>" "." postfix_expression DOT IDENTIFIER) (COMMENT postfix_expression "=>" postfix_expression LPAREN "." argument_expression_list RPAREN) (COMMENT postfix_expression "=>" "." postfix_expression LPAREN argument_expression_list RPAREN) (COMMENT postfix_expression "=>" postfix_expression LPAREN "." RPAREN) (COMMENT postfix_expression "=>" "." postfix_expression LPAREN RPAREN) (COMMENT postfix_expression "=>" "." postfix_expression LBRACK expression RBRACK) (COMMENT postfix_expression "=>" "." primary_expression) (COMMENT primary_expression "=>" "." LPAREN expression RPAREN) (COMMENT primary_expression "=>" "." STRING_LITERAL) (COMMENT primary_expression "=>" "." CONSTANT) (COMMENT primary_expression "=>" "." IDENTIFIER) (SHIFT (IDENTIFIER) s68) (SHIFT (CONSTANT) s69) (SHIFT (STRING_LITERAL) s70) (SHIFT (SIZEOF) s71) (SHIFT (INC_OP) s72) (SHIFT (DEC_OP) s73) (SHIFT (LPAREN) s74) (SHIFT (RPAREN) s214) (SHIFT (AMPERSAND) s75) (SHIFT (STAR) s76) (SHIFT (PLUS) s77) (SHIFT (MINUS) s78) (SHIFT (TWIDLE) s79) (SHIFT (BANG) s80) (GOTO primary_expression s51) (GOTO postfix_expression s52) (GOTO argument_expression_list s212) (GOTO unary_expression s81) (GOTO unary_operator s54) (GOTO cast_expression s55) (GOTO multiplicative_expression s56) (GOTO additive_expression s57) (GOTO shift_expression s58) (GOTO relational_expression s59) (GOTO equality_expression s60) (GOTO and_expression s61) (GOTO exclusive_or_expression s62) (GOTO inclusive_or_expression s63) (GOTO logical_and_expression s64) (GOTO logical_or_expression s65) (GOTO conditional_expression s82) (GOTO assignment_expression s213))
   (STATE s207 (COMMENT expression "=>" "." expression COMMA assignment_expression) (COMMENT expression "=>" "." assignment_expression) (COMMENT assignment_expression "=>" "." unary_expression assignment_operator assignment_expression) (COMMENT assignment_expression "=>" "." conditional_expression) (COMMENT conditional_expression "=>" "." logical_or_expression QMARK expression COLON conditional_expression) (COMMENT conditional_expression "=>" "." logical_or_expression) (COMMENT logical_or_expression "=>" "." logical_or_expression OR_OP logical_and_expression) (COMMENT logical_or_expression "=>" "." logical_and_expression) (COMMENT logical_and_expression "=>" "." logical_and_expression AND_OP inclusive_or_expression) (COMMENT logical_and_expression "=>" "." inclusive_or_expression) (COMMENT inclusive_or_expression "=>" "." inclusive_or_expression PIPE exclusive_or_expression) (COMMENT inclusive_or_expression "=>" "." exclusive_or_expression) (COMMENT exclusive_or_expression "=>" "." exclusive_or_expression CARROT and_expression) (COMMENT exclusive_or_expression "=>" "." and_expression) (COMMENT and_expression "=>" "." and_expression AMPERSAND equality_expression) (COMMENT and_expression "=>" "." equality_expression) (COMMENT equality_expression "=>" "." equality_expression NE_OP relational_expression) (COMMENT equality_expression "=>" "." equality_expression EQ_OP relational_expression) (COMMENT equality_expression "=>" "." relational_expression) (COMMENT relational_expression "=>" "." relational_expression GE_OP shift_expression) (COMMENT relational_expression "=>" "." relational_expression LE_OP shift_expression) (COMMENT relational_expression "=>" "." relational_expression GREATER_OP shift_expression) (COMMENT relational_expression "=>" "." relational_expression LESS_OP shift_expression) (COMMENT relational_expression "=>" "." shift_expression) (COMMENT shift_expression "=>" "." shift_expression RIGHT_OP additive_expression) (COMMENT shift_expression "=>" "." shift_expression LEFT_OP additive_expression) (COMMENT shift_expression "=>" "." additive_expression) (COMMENT additive_expression "=>" "." additive_expression MINUS multiplicative_expression) (COMMENT additive_expression "=>" "." additive_expression PLUS multiplicative_expression) (COMMENT additive_expression "=>" "." multiplicative_expression) (COMMENT multiplicative_expression "=>" "." multiplicative_expression AMPERSAND cast_expression) (COMMENT multiplicative_expression "=>" "." multiplicative_expression FORWARD_SLASH cast_expression) (COMMENT multiplicative_expression "=>" "." multiplicative_expression STAR cast_expression) (COMMENT multiplicative_expression "=>" "." cast_expression) (COMMENT cast_expression "=>" "." LPAREN type_name RPAREN cast_expression) (COMMENT cast_expression "=>" "." unary_expression) (COMMENT unary_operator "=>" "." BANG) (COMMENT unary_operator "=>" "." TWIDLE) (COMMENT unary_operator "=>" "." MINUS) (COMMENT unary_operator "=>" "." PLUS) (COMMENT unary_operator "=>" "." STAR) (COMMENT unary_operator "=>" "." AMPERSAND) (COMMENT unary_expression "=>" "." SIZEOF LPAREN type_name RPAREN) (COMMENT unary_expression "=>" "." SIZEOF unary_expression) (COMMENT unary_expression "=>" "." unary_operator cast_expression) (COMMENT unary_expression "=>" "." DEC_OP unary_expression) (COMMENT unary_expression "=>" "." INC_OP unary_expression) (COMMENT unary_expression "=>" "." postfix_expression) (COMMENT postfix_expression "=>" "." postfix_expression DEC_OP) (COMMENT postfix_expression "=>" "." postfix_expression INC_OP) (COMMENT postfix_expression "=>" "." postfix_expression PTR_OP IDENTIFIER) (COMMENT postfix_expression "=>" "." postfix_expression DOT IDENTIFIER) (COMMENT postfix_expression "=>" "." postfix_expression LPAREN argument_expression_list RPAREN) (COMMENT postfix_expression "=>" "." postfix_expression LPAREN RPAREN) (COMMENT postfix_expression "=>" postfix_expression LBRACK "." expression RBRACK) (COMMENT postfix_expression "=>" "." postfix_expression LBRACK expression RBRACK) (COMMENT postfix_expression "=>" "." primary_expression) (COMMENT primary_expression "=>" "." LPAREN expression RPAREN) (COMMENT primary_expression "=>" "." STRING_LITERAL) (COMMENT primary_expression "=>" "." CONSTANT) (COMMENT primary_expression "=>" "." IDENTIFIER) (SHIFT (IDENTIFIER) s68) (SHIFT (CONSTANT) s69) (SHIFT (STRING_LITERAL) s70) (SHIFT (SIZEOF) s71) (SHIFT (INC_OP) s72) (SHIFT (DEC_OP) s73) (SHIFT (LPAREN) s74) (SHIFT (AMPERSAND) s75) (SHIFT (STAR) s76) (SHIFT (PLUS) s77) (SHIFT (MINUS) s78) (SHIFT (TWIDLE) s79) (SHIFT (BANG) s80) (GOTO primary_expression s51) (GOTO postfix_expression s52) (GOTO unary_expression s81) (GOTO unary_operator s54) (GOTO cast_expression s55) (GOTO multiplicative_expression s56) (GOTO additive_expression s57) (GOTO shift_expression s58) (GOTO relational_expression s59) (GOTO equality_expression s60) (GOTO and_expression s61) (GOTO exclusive_or_expression s62) (GOTO inclusive_or_expression s63) (GOTO logical_and_expression s64) (GOTO logical_or_expression s65) (GOTO conditional_expression s82) (GOTO assignment_expression s83) (GOTO expression s210))
   (STATE s208 (COMMENT postfix_expression "=>" postfix_expression DOT "." IDENTIFIER) (SHIFT (IDENTIFIER) s209))
   (STATE s209 (COMMENT postfix_expression "=>" postfix_expression DOT IDENTIFIER ".") (REDUCE () r10))
   (STATE s210 (COMMENT expression "=>" expression "." COMMA assignment_expression) (COMMENT postfix_expression "=>" postfix_expression LBRACK expression "." RBRACK) (SHIFT (RBRACK) s211) (SHIFT (COMMA) s140))
   (STATE s211 (COMMENT postfix_expression "=>" postfix_expression LBRACK expression RBRACK ".") (REDUCE () r7))
   (STATE s212 (COMMENT argument_expression_list "=>" argument_expression_list "." COMMA assignment_expression) (COMMENT postfix_expression "=>" postfix_expression LPAREN argument_expression_list "." RPAREN) (SHIFT (RPAREN) s215) (SHIFT (COMMA) s216))
   (STATE s213 (COMMENT argument_expression_list "=>" assignment_expression ".") (REDUCE () r14))
   (STATE s214 (COMMENT postfix_expression "=>" postfix_expression LPAREN RPAREN ".") (REDUCE () r8))
   (STATE s215 (COMMENT postfix_expression "=>" postfix_expression LPAREN argument_expression_list RPAREN ".") (REDUCE () r9))
   (STATE s216 (COMMENT assignment_expression "=>" "." unary_expression assignment_operator assignment_expression) (COMMENT assignment_expression "=>" "." conditional_expression) (COMMENT conditional_expression "=>" "." logical_or_expression QMARK expression COLON conditional_expression) (COMMENT conditional_expression "=>" "." logical_or_expression) (COMMENT logical_or_expression "=>" "." logical_or_expression OR_OP logical_and_expression) (COMMENT logical_or_expression "=>" "." logical_and_expression) (COMMENT logical_and_expression "=>" "." logical_and_expression AND_OP inclusive_or_expression) (COMMENT logical_and_expression "=>" "." inclusive_or_expression) (COMMENT inclusive_or_expression "=>" "." inclusive_or_expression PIPE exclusive_or_expression) (COMMENT inclusive_or_expression "=>" "." exclusive_or_expression) (COMMENT exclusive_or_expression "=>" "." exclusive_or_expression CARROT and_expression) (COMMENT exclusive_or_expression "=>" "." and_expression) (COMMENT and_expression "=>" "." and_expression AMPERSAND equality_expression) (COMMENT and_expression "=>" "." equality_expression) (COMMENT equality_expression "=>" "." equality_expression NE_OP relational_expression) (COMMENT equality_expression "=>" "." equality_expression EQ_OP relational_expression) (COMMENT equality_expression "=>" "." relational_expression) (COMMENT relational_expression "=>" "." relational_expression GE_OP shift_expression) (COMMENT relational_expression "=>" "." relational_expression LE_OP shift_expression) (COMMENT relational_expression "=>" "." relational_expression GREATER_OP shift_expression) (COMMENT relational_expression "=>" "." relational_expression LESS_OP shift_expression) (COMMENT relational_expression "=>" "." shift_expression) (COMMENT shift_expression "=>" "." shift_expression RIGHT_OP additive_expression) (COMMENT shift_expression "=>" "." shift_expression LEFT_OP additive_expression) (COMMENT shift_expression "=>" "." additive_expression) (COMMENT additive_expression "=>" "." additive_expression MINUS multiplicative_expression) (COMMENT additive_expression "=>" "." additive_expression PLUS multiplicative_expression) (COMMENT additive_expression "=>" "." multiplicative_expression) (COMMENT multiplicative_expression "=>" "." multiplicative_expression AMPERSAND cast_expression) (COMMENT multiplicative_expression "=>" "." multiplicative_expression FORWARD_SLASH cast_expression) (COMMENT multiplicative_expression "=>" "." multiplicative_expression STAR cast_expression) (COMMENT multiplicative_expression "=>" "." cast_expression) (COMMENT cast_expression "=>" "." LPAREN type_name RPAREN cast_expression) (COMMENT cast_expression "=>" "." unary_expression) (COMMENT unary_operator "=>" "." BANG) (COMMENT unary_operator "=>" "." TWIDLE) (COMMENT unary_operator "=>" "." MINUS) (COMMENT unary_operator "=>" "." PLUS) (COMMENT unary_operator "=>" "." STAR) (COMMENT unary_operator "=>" "." AMPERSAND) (COMMENT unary_expression "=>" "." SIZEOF LPAREN type_name RPAREN) (COMMENT unary_expression "=>" "." SIZEOF unary_expression) (COMMENT unary_expression "=>" "." unary_operator cast_expression) (COMMENT unary_expression "=>" "." DEC_OP unary_expression) (COMMENT unary_expression "=>" "." INC_OP unary_expression) (COMMENT unary_expression "=>" "." postfix_expression) (COMMENT argument_expression_list "=>" argument_expression_list COMMA "." assignment_expression) (COMMENT postfix_expression "=>" "." postfix_expression DEC_OP) (COMMENT postfix_expression "=>" "." postfix_expression INC_OP) (COMMENT postfix_expression "=>" "." postfix_expression PTR_OP IDENTIFIER) (COMMENT postfix_expression "=>" "." postfix_expression DOT IDENTIFIER) (COMMENT postfix_expression "=>" "." postfix_expression LPAREN argument_expression_list RPAREN) (COMMENT postfix_expression "=>" "." postfix_expression LPAREN RPAREN) (COMMENT postfix_expression "=>" "." postfix_expression LBRACK expression RBRACK) (COMMENT postfix_expression "=>" "." primary_expression) (COMMENT primary_expression "=>" "." LPAREN expression RPAREN) (COMMENT primary_expression "=>" "." STRING_LITERAL) (COMMENT primary_expression "=>" "." CONSTANT) (COMMENT primary_expression "=>" "." IDENTIFIER) (SHIFT (IDENTIFIER) s68) (SHIFT (CONSTANT) s69) (SHIFT (STRING_LITERAL) s70) (SHIFT (SIZEOF) s71) (SHIFT (INC_OP) s72) (SHIFT (DEC_OP) s73) (SHIFT (LPAREN) s74) (SHIFT (AMPERSAND) s75) (SHIFT (STAR) s76) (SHIFT (PLUS) s77) (SHIFT (MINUS) s78) (SHIFT (TWIDLE) s79) (SHIFT (BANG) s80) (GOTO primary_expression s51) (GOTO postfix_expression s52) (GOTO unary_expression s81) (GOTO unary_operator s54) (GOTO cast_expression s55) (GOTO multiplicative_expression s56) (GOTO additive_expression s57) (GOTO shift_expression s58) (GOTO relational_expression s59) (GOTO equality_expression s60) (GOTO and_expression s61) (GOTO exclusive_or_expression s62) (GOTO inclusive_or_expression s63) (GOTO logical_and_expression s64) (GOTO logical_or_expression s65) (GOTO conditional_expression s82) (GOTO assignment_expression s217))
   (STATE s217 (COMMENT argument_expression_list "=>" argument_expression_list COMMA assignment_expression ".") (REDUCE () r15))
   (STATE s218 (COMMENT postfix_expression "=>" postfix_expression PTR_OP IDENTIFIER ".") (REDUCE () r11))
   (STATE s219 (COMMENT enum_specifier "=>" ENUM LCURLY enumerator_list RCURLY ".") (REDUCE () r122))
   (STATE s220 (COMMENT enumerator "=>" "." IDENTIFIER EQUAL_SIGN constant_expression) (COMMENT enumerator "=>" "." IDENTIFIER) (COMMENT enumerator_list "=>" enumerator_list COMMA "." enumerator) (SHIFT (IDENTIFIER) s49) (GOTO enumerator s221))
   (STATE s221 (COMMENT enumerator_list "=>" enumerator_list COMMA enumerator ".") (REDUCE () r126))
   (STATE s222 (COMMENT enumerator "=>" "." IDENTIFIER EQUAL_SIGN constant_expression) (COMMENT enumerator "=>" "." IDENTIFIER) (COMMENT enumerator_list "=>" "." enumerator_list COMMA enumerator) (COMMENT enumerator_list "=>" "." enumerator) (COMMENT enum_specifier "=>" ENUM IDENTIFIER LCURLY "." enumerator_list RCURLY) (SHIFT (IDENTIFIER) s49) (GOTO enumerator_list s223) (GOTO enumerator s48))
   (STATE s223 (COMMENT enumerator_list "=>" enumerator_list "." COMMA enumerator) (COMMENT enum_specifier "=>" ENUM IDENTIFIER LCURLY enumerator_list "." RCURLY) (SHIFT (RCURLY) s224) (SHIFT (COMMA) s220))
   (STATE s224 (COMMENT enum_specifier "=>" ENUM IDENTIFIER LCURLY enumerator_list RCURLY ".") (REDUCE () r123))
   (STATE s225 (COMMENT translation_unit "=>" translation_unit external_declaration ".") (REDUCE () r206))
   (STATE s226 (COMMENT *start "=>" translation_unit *EOF* ".") (REDUCE () r1))
   (STATE s227 (COMMENT declaration_list "=>" declaration ".") (REDUCE () r187))
   (STATE s228 (COMMENT pointer "=>" "." STAR type_qualifier_list pointer) (COMMENT pointer "=>" "." STAR pointer) (COMMENT pointer "=>" "." STAR type_qualifier_list) (COMMENT pointer "=>" "." STAR) (COMMENT direct_declarator "=>" "." direct_declarator LPAREN RPAREN) (COMMENT direct_declarator "=>" "." direct_declarator LPAREN identifier_list RPAREN) (COMMENT direct_declarator "=>" "." direct_declarator LPAREN parameter_type_list RPAREN) (COMMENT direct_declarator "=>" "." direct_declarator LBRACK RBRACK) (COMMENT direct_declarator "=>" "." direct_declarator LBRACK constant_expression RBRACK) (COMMENT direct_declarator "=>" "." LPAREN declarator RPAREN) (COMMENT direct_declarator "=>" "." IDENTIFIER) (COMMENT declarator "=>" "." direct_declarator) (COMMENT declarator "=>" "." pointer direct_declarator) (COMMENT init_declarator "=>" "." declarator EQUAL_SIGN initializer) (COMMENT init_declarator "=>" "." declarator) (COMMENT init_declarator_list "=>" "." init_declarator_list COMMA init_declarator) (COMMENT init_declarator_list "=>" "." init_declarator) (COMMENT declaration "=>" declaration_specifiers "." init_declarator_list SEMICOLON) (COMMENT declaration "=>" declaration_specifiers "." SEMICOLON) (SHIFT (IDENTIFIER) s15) (SHIFT (LPAREN) s36) (SHIFT (STAR) s37) (SHIFT (SEMICOLON) s309) (GOTO init_declarator_list s306) (GOTO init_declarator s307) (GOTO declarator s308) (GOTO direct_declarator s10) (GOTO pointer s11))
   (STATE s229 (COMMENT function_definition "=>" declarator compound_statement ".") (REDUCE () r212))
   (STATE s230 (COMMENT function_definition "=>" declarator declaration_list "." compound_statement) (COMMENT declaration_list "=>" declaration_list "." declaration) (COMMENT compound_statement "=>" "." LCURLY declaration_list statement_list RCURLY) (COMMENT compound_statement "=>" "." LCURLY declaration_list RCURLY) (COMMENT compound_statement "=>" "." LCURLY statement_list RCURLY) (COMMENT compound_statement "=>" "." LCURLY RCURLY) (COMMENT type_qualifier "=>" "." VOLATILE) (COMMENT type_qualifier "=>" "." CONST) (COMMENT enum_specifier "=>" "." ENUM IDENTIFIER) (COMMENT enum_specifier "=>" "." ENUM IDENTIFIER LCURLY enumerator_list RCURLY) (COMMENT enum_specifier "=>" "." ENUM LCURLY enumerator_list RCURLY) (COMMENT struct_or_union "=>" "." UNION) (COMMENT struct_or_union "=>" "." STRUCT) (COMMENT struct_or_union_specifier "=>" "." struct_or_union IDENTIFIER) (COMMENT struct_or_union_specifier "=>" "." struct_or_union LCURLY struct_declaration_list RCURLY) (COMMENT struct_or_union_specifier "=>" "." struct_or_union IDENTIFIER LCURLY struct_declaration_list RCURLY) (COMMENT type_specifier "=>" "." TYPE_NAME) (COMMENT type_specifier "=>" "." enum_specifier) (COMMENT type_specifier "=>" "." struct_or_union_specifier) (COMMENT type_specifier "=>" "." UNSIGNED) (COMMENT type_specifier "=>" "." SIGNED) (COMMENT type_specifier "=>" "." DOUBLE) (COMMENT type_specifier "=>" "." FLOAT) (COMMENT type_specifier "=>" "." LONG) (COMMENT type_specifier "=>" "." INT) (COMMENT type_specifier "=>" "." SHORT) (COMMENT type_specifier "=>" "." CHAR) (COMMENT type_specifier "=>" "." VOID) (COMMENT storage_class_specifier "=>" "." REGISTER) (COMMENT storage_class_specifier "=>" "." AUTO) (COMMENT storage_class_specifier "=>" "." STATIC) (COMMENT storage_class_specifier "=>" "." EXTERN) (COMMENT storage_class_specifier "=>" "." TYPEDEF) (COMMENT declaration_specifiers "=>" "." type_qualifier declaration_specifiers) (COMMENT declaration_specifiers "=>" "." type_qualifier) (COMMENT declaration_specifiers "=>" "." type_specifier declaration_specifiers) (COMMENT declaration_specifiers "=>" "." type_specifier) (COMMENT declaration_specifiers "=>" "." storage_class_specifier declaration_specifiers) (COMMENT declaration_specifiers "=>" "." storage_class_specifier) (COMMENT declaration "=>" "." declaration_specifiers init_declarator_list SEMICOLON) (COMMENT declaration "=>" "." declaration_specifiers SEMICOLON) (SHIFT (TYPE_NAME) s16) (SHIFT (TYPEDEF) s17) (SHIFT (EXTERN) s18) (SHIFT (STATIC) s19) (SHIFT (AUTO) s20) (SHIFT (REGISTER) s21) (SHIFT (CHAR) s22) (SHIFT (SHORT) s23) (SHIFT (INT) s24) (SHIFT (LONG) s25) (SHIFT (SIGNED) s26) (SHIFT (UNSIGNED) s27) (SHIFT (FLOAT) s28) (SHIFT (DOUBLE) s29) (SHIFT (CONST) s30) (SHIFT (VOLATILE) s31) (SHIFT (VOID) s32) (SHIFT (STRUCT) s33) (SHIFT (UNION) s34) (SHIFT (ENUM) s35) (SHIFT (LCURLY) s231) (GOTO declaration s300) (GOTO declaration_specifiers s228) (GOTO storage_class_specifier s3) (GOTO type_specifier s4) (GOTO struct_or_union_specifier s5) (GOTO struct_or_union s6) (GOTO enum_specifier s7) (GOTO type_qualifier s8) (GOTO compound_statement s305))
   (STATE s231 (COMMENT jump_statement "=>" "." RETURN expression SEMICOLON) (COMMENT jump_statement "=>" "." RETURN SEMICOLON) (COMMENT jump_statement "=>" "." BREAK SEMICOLON) (COMMENT jump_statement "=>" "." CONTINUE SEMICOLON) (COMMENT jump_statement "=>" "." GOTO IDENTIFIER SEMICOLON) (COMMENT iteration_statement "=>" "." FOR LPAREN expression_statement expression_statement expression RPAREN statement) (COMMENT iteration_statement "=>" "." FOR LPAREN expression_statement expression_statement RPAREN statement) (COMMENT iteration_statement "=>" "." DO statement WHILE LPAREN expression RPAREN SEMICOLON) (COMMENT iteration_statement "=>" "." WHILE LPAREN expression RPAREN statement) (COMMENT selection_statement "=>" "." SWITCH LPAREN expression RPAREN statement) (COMMENT selection_statement "=>" "." IF LPAREN expression RPAREN statement ELSE statement) (COMMENT selection_statement "=>" "." IF LPAREN expression RPAREN statement) (COMMENT expression_statement "=>" "." expression SEMICOLON) (COMMENT expression_statement "=>" "." SEMICOLON) (COMMENT statement_list "=>" "." statement_list statement) (COMMENT statement_list "=>" "." statement) (COMMENT declaration_list "=>" "." declaration_list declaration) (COMMENT declaration_list "=>" "." declaration) (COMMENT compound_statement "=>" LCURLY "." declaration_list statement_list RCURLY) (COMMENT compound_statement "=>" "." LCURLY declaration_list statement_list RCURLY) (COMMENT compound_statement "=>" LCURLY "." declaration_list RCURLY) (COMMENT compound_statement "=>" "." LCURLY declaration_list RCURLY) (COMMENT compound_statement "=>" LCURLY "." statement_list RCURLY) (COMMENT compound_statement "=>" "." LCURLY statement_list RCURLY) (COMMENT compound_statement "=>" LCURLY "." RCURLY) (COMMENT compound_statement "=>" "." LCURLY RCURLY) (COMMENT labeled_statement "=>" "." DEFAULT COLON statement) (COMMENT labeled_statement "=>" "." CASE constant_expression COLON statement) (COMMENT labeled_statement "=>" "." IDENTIFIER COLON statement) (COMMENT statement "=>" "." jump_statement) (COMMENT statement "=>" "." iteration_statement) (COMMENT statement "=>" "." selection_statement) (COMMENT statement "=>" "." expression_statement) (COMMENT statement "=>" "." compound_statement) (COMMENT statement "=>" "." labeled_statement) (COMMENT type_qualifier "=>" "." VOLATILE) (COMMENT type_qualifier "=>" "." CONST) (COMMENT enum_specifier "=>" "." ENUM IDENTIFIER) (COMMENT enum_specifier "=>" "." ENUM IDENTIFIER LCURLY enumerator_list RCURLY) (COMMENT enum_specifier "=>" "." ENUM LCURLY enumerator_list RCURLY) (COMMENT struct_or_union "=>" "." UNION) (COMMENT struct_or_union "=>" "." STRUCT) (COMMENT struct_or_union_specifier "=>" "." struct_or_union IDENTIFIER) (COMMENT struct_or_union_specifier "=>" "." struct_or_union LCURLY struct_declaration_list RCURLY) (COMMENT struct_or_union_specifier "=>" "." struct_or_union IDENTIFIER LCURLY struct_declaration_list RCURLY) (COMMENT type_specifier "=>" "." TYPE_NAME) (COMMENT type_specifier "=>" "." enum_specifier) (COMMENT type_specifier "=>" "." struct_or_union_specifier) (COMMENT type_specifier "=>" "." UNSIGNED) (COMMENT type_specifier "=>" "." SIGNED) (COMMENT type_specifier "=>" "." DOUBLE) (COMMENT type_specifier "=>" "." FLOAT) (COMMENT type_specifier "=>" "." LONG) (COMMENT type_specifier "=>" "." INT) (COMMENT type_specifier "=>" "." SHORT) (COMMENT type_specifier "=>" "." CHAR) (COMMENT type_specifier "=>" "." VOID) (COMMENT storage_class_specifier "=>" "." REGISTER) (COMMENT storage_class_specifier "=>" "." AUTO) (COMMENT storage_class_specifier "=>" "." STATIC) (COMMENT storage_class_specifier "=>" "." EXTERN) (COMMENT storage_class_specifier "=>" "." TYPEDEF) (COMMENT declaration_specifiers "=>" "." type_qualifier declaration_specifiers) (COMMENT declaration_specifiers "=>" "." type_qualifier) (COMMENT declaration_specifiers "=>" "." type_specifier declaration_specifiers) (COMMENT declaration_specifiers "=>" "." type_specifier) (COMMENT declaration_specifiers "=>" "." storage_class_specifier declaration_specifiers) (COMMENT declaration_specifiers "=>" "." storage_class_specifier) (COMMENT declaration "=>" "." declaration_specifiers init_declarator_list SEMICOLON) (COMMENT declaration "=>" "." declaration_specifiers SEMICOLON) (COMMENT expression "=>" "." expression COMMA assignment_expression) (COMMENT expression "=>" "." assignment_expression) (COMMENT assignment_expression "=>" "." unary_expression assignment_operator assignment_expression) (COMMENT assignment_expression "=>" "." conditional_expression) (COMMENT conditional_expression "=>" "." logical_or_expression QMARK expression COLON conditional_expression) (COMMENT conditional_expression "=>" "." logical_or_expression) (COMMENT logical_or_expression "=>" "." logical_or_expression OR_OP logical_and_expression) (COMMENT logical_or_expression "=>" "." logical_and_expression) (COMMENT logical_and_expression "=>" "." logical_and_expression AND_OP inclusive_or_expression) (COMMENT logical_and_expression "=>" "." inclusive_or_expression) (COMMENT inclusive_or_expression "=>" "." inclusive_or_expression PIPE exclusive_or_expression) (COMMENT inclusive_or_expression "=>" "." exclusive_or_expression) (COMMENT exclusive_or_expression "=>" "." exclusive_or_expression CARROT and_expression) (COMMENT exclusive_or_expression "=>" "." and_expression) (COMMENT and_expression "=>" "." and_expression AMPERSAND equality_expression) (COMMENT and_expression "=>" "." equality_expression) (COMMENT equality_expression "=>" "." equality_expression NE_OP relational_expression) (COMMENT equality_expression "=>" "." equality_expression EQ_OP relational_expression) (COMMENT equality_expression "=>" "." relational_expression) (COMMENT relational_expression "=>" "." relational_expression GE_OP shift_expression) (COMMENT relational_expression "=>" "." relational_expression LE_OP shift_expression) (COMMENT relational_expression "=>" "." relational_expression GREATER_OP shift_expression) (COMMENT relational_expression "=>" "." relational_expression LESS_OP shift_expression) (COMMENT relational_expression "=>" "." shift_expression) (COMMENT shift_expression "=>" "." shift_expression RIGHT_OP additive_expression) (COMMENT shift_expression "=>" "." shift_expression LEFT_OP additive_expression) (COMMENT shift_expression "=>" "." additive_expression) (COMMENT additive_expression "=>" "." additive_expression MINUS multiplicative_expression) (COMMENT additive_expression "=>" "." additive_expression PLUS multiplicative_expression) (COMMENT additive_expression "=>" "." multiplicative_expression) (COMMENT multiplicative_expression "=>" "." multiplicative_expression AMPERSAND cast_expression) (COMMENT multiplicative_expression "=>" "." multiplicative_expression FORWARD_SLASH cast_expression) (COMMENT multiplicative_expression "=>" "." multiplicative_expression STAR cast_expression) (COMMENT multiplicative_expression "=>" "." cast_expression) (COMMENT cast_expression "=>" "." LPAREN type_name RPAREN cast_expression) (COMMENT cast_expression "=>" "." unary_expression) (COMMENT unary_operator "=>" "." BANG) (COMMENT unary_operator "=>" "." TWIDLE) (COMMENT unary_operator "=>" "." MINUS) (COMMENT unary_operator "=>" "." PLUS) (COMMENT unary_operator "=>" "." STAR) (COMMENT unary_operator "=>" "." AMPERSAND) (COMMENT unary_expression "=>" "." SIZEOF LPAREN type_name RPAREN) (COMMENT unary_expression "=>" "." SIZEOF unary_expression) (COMMENT unary_expression "=>" "." unary_operator cast_expression) (COMMENT unary_expression "=>" "." DEC_OP unary_expression) (COMMENT unary_expression "=>" "." INC_OP unary_expression) (COMMENT unary_expression "=>" "." postfix_expression) (COMMENT postfix_expression "=>" "." postfix_expression DEC_OP) (COMMENT postfix_expression "=>" "." postfix_expression INC_OP) (COMMENT postfix_expression "=>" "." postfix_expression PTR_OP IDENTIFIER) (COMMENT postfix_expression "=>" "." postfix_expression DOT IDENTIFIER) (COMMENT postfix_expression "=>" "." postfix_expression LPAREN argument_expression_list RPAREN) (COMMENT postfix_expression "=>" "." postfix_expression LPAREN RPAREN) (COMMENT postfix_expression "=>" "." postfix_expression LBRACK expression RBRACK) (COMMENT postfix_expression "=>" "." primary_expression) (COMMENT primary_expression "=>" "." LPAREN expression RPAREN) (COMMENT primary_expression "=>" "." STRING_LITERAL) (COMMENT primary_expression "=>" "." CONSTANT) (COMMENT primary_expression "=>" "." IDENTIFIER) (SHIFT (IDENTIFIER) s242) (SHIFT (CONSTANT) s69) (SHIFT (STRING_LITERAL) s70) (SHIFT (SIZEOF) s71) (SHIFT (INC_OP) s72) (SHIFT (DEC_OP) s73) (SHIFT (TYPE_NAME) s16) (SHIFT (TYPEDEF) s17) (SHIFT (EXTERN) s18) (SHIFT (STATIC) s19) (SHIFT (AUTO) s20) (SHIFT (REGISTER) s21) (SHIFT (CHAR) s22) (SHIFT (SHORT) s23) (SHIFT (INT) s24) (SHIFT (LONG) s25) (SHIFT (SIGNED) s26) (SHIFT (UNSIGNED) s27) (SHIFT (FLOAT) s28) (SHIFT (DOUBLE) s29) (SHIFT (CONST) s30) (SHIFT (VOLATILE) s31) (SHIFT (VOID) s32) (SHIFT (STRUCT) s33) (SHIFT (UNION) s34) (SHIFT (ENUM) s35) (SHIFT (CASE) s243) (SHIFT (DEFAULT) s244) (SHIFT (IF) s245) (SHIFT (SWITCH) s246) (SHIFT (WHILE) s247) (SHIFT (DO) s248) (SHIFT (FOR) s249) (SHIFT (GOTO) s250) (SHIFT (CONTINUE) s251) (SHIFT (BREAK) s252) (SHIFT (RETURN) s253) (SHIFT (LPAREN) s74) (SHIFT (LCURLY) s231) (SHIFT (RCURLY) s254) (SHIFT (AMPERSAND) s75) (SHIFT (STAR) s76) (SHIFT (PLUS) s77) (SHIFT (MINUS) s78) (SHIFT (TWIDLE) s79) (SHIFT (BANG) s80) (SHIFT (SEMICOLON) s255) (GOTO primary_expression s51) (GOTO postfix_expression s52) (GOTO unary_expression s81) (GOTO unary_operator s54) (GOTO cast_expression s55) (GOTO multiplicative_expression s56) (GOTO additive_expression s57) (GOTO shift_expression s58) (GOTO relational_expression s59) (GOTO equality_expression s60) (GOTO and_expression s61) (GOTO exclusive_or_expression s62) (GOTO inclusive_or_expression s63) (GOTO logical_and_expression s64) (GOTO logical_or_expression s65) (GOTO conditional_expression s82) (GOTO assignment_expression s83) (GOTO expression s232) (GOTO declaration s227) (GOTO declaration_specifiers s228) (GOTO storage_class_specifier s3) (GOTO type_specifier s4) (GOTO struct_or_union_specifier s5) (GOTO struct_or_union s6) (GOTO enum_specifier s7) (GOTO type_qualifier s8) (GOTO statement s233) (GOTO labeled_statement s234) (GOTO compound_statement s235) (GOTO declaration_list s236) (GOTO statement_list s237) (GOTO expression_statement s238) (GOTO selection_statement s239) (GOTO iteration_statement s240) (GOTO jump_statement s241))
   (STATE s232 (COMMENT expression_statement "=>" expression "." SEMICOLON) (COMMENT expression "=>" expression "." COMMA assignment_expression) (SHIFT (COMMA) s140) (SHIFT (SEMICOLON) s304))
   (STATE s233 (COMMENT statement_list "=>" statement ".") (REDUCE () r189))
   (STATE s234 (COMMENT statement "=>" labeled_statement ".") (REDUCE () r174))
   (STATE s235 (COMMENT statement "=>" compound_statement ".") (REDUCE () r175))
   (STATE s236 (COMMENT jump_statement "=>" "." RETURN expression SEMICOLON) (COMMENT jump_statement "=>" "." RETURN SEMICOLON) (COMMENT jump_statement "=>" "." BREAK SEMICOLON) (COMMENT jump_statement "=>" "." CONTINUE SEMICOLON) (COMMENT jump_statement "=>" "." GOTO IDENTIFIER SEMICOLON) (COMMENT iteration_statement "=>" "." FOR LPAREN expression_statement expression_statement expression RPAREN statement) (COMMENT iteration_statement "=>" "." FOR LPAREN expression_statement expression_statement RPAREN statement) (COMMENT iteration_statement "=>" "." DO statement WHILE LPAREN expression RPAREN SEMICOLON) (COMMENT iteration_statement "=>" "." WHILE LPAREN expression RPAREN statement) (COMMENT selection_statement "=>" "." SWITCH LPAREN expression RPAREN statement) (COMMENT selection_statement "=>" "." IF LPAREN expression RPAREN statement ELSE statement) (COMMENT selection_statement "=>" "." IF LPAREN expression RPAREN statement) (COMMENT expression_statement "=>" "." expression SEMICOLON) (COMMENT expression_statement "=>" "." SEMICOLON) (COMMENT statement_list "=>" "." statement_list statement) (COMMENT statement_list "=>" "." statement) (COMMENT declaration_list "=>" declaration_list "." declaration) (COMMENT compound_statement "=>" LCURLY declaration_list "." statement_list RCURLY) (COMMENT compound_statement "=>" "." LCURLY declaration_list statement_list RCURLY) (COMMENT compound_statement "=>" LCURLY declaration_list "." RCURLY) (COMMENT compound_statement "=>" "." LCURLY declaration_list RCURLY) (COMMENT compound_statement "=>" "." LCURLY statement_list RCURLY) (COMMENT compound_statement "=>" "." LCURLY RCURLY) (COMMENT labeled_statement "=>" "." DEFAULT COLON statement) (COMMENT labeled_statement "=>" "." CASE constant_expression COLON statement) (COMMENT labeled_statement "=>" "." IDENTIFIER COLON statement) (COMMENT statement "=>" "." jump_statement) (COMMENT statement "=>" "." iteration_statement) (COMMENT statement "=>" "." selection_statement) (COMMENT statement "=>" "." expression_statement) (COMMENT statement "=>" "." compound_statement) (COMMENT statement "=>" "." labeled_statement) (COMMENT type_qualifier "=>" "." VOLATILE) (COMMENT type_qualifier "=>" "." CONST) (COMMENT enum_specifier "=>" "." ENUM IDENTIFIER) (COMMENT enum_specifier "=>" "." ENUM IDENTIFIER LCURLY enumerator_list RCURLY) (COMMENT enum_specifier "=>" "." ENUM LCURLY enumerator_list RCURLY) (COMMENT struct_or_union "=>" "." UNION) (COMMENT struct_or_union "=>" "." STRUCT) (COMMENT struct_or_union_specifier "=>" "." struct_or_union IDENTIFIER) (COMMENT struct_or_union_specifier "=>" "." struct_or_union LCURLY struct_declaration_list RCURLY) (COMMENT struct_or_union_specifier "=>" "." struct_or_union IDENTIFIER LCURLY struct_declaration_list RCURLY) (COMMENT type_specifier "=>" "." TYPE_NAME) (COMMENT type_specifier "=>" "." enum_specifier) (COMMENT type_specifier "=>" "." struct_or_union_specifier) (COMMENT type_specifier "=>" "." UNSIGNED) (COMMENT type_specifier "=>" "." SIGNED) (COMMENT type_specifier "=>" "." DOUBLE) (COMMENT type_specifier "=>" "." FLOAT) (COMMENT type_specifier "=>" "." LONG) (COMMENT type_specifier "=>" "." INT) (COMMENT type_specifier "=>" "." SHORT) (COMMENT type_specifier "=>" "." CHAR) (COMMENT type_specifier "=>" "." VOID) (COMMENT storage_class_specifier "=>" "." REGISTER) (COMMENT storage_class_specifier "=>" "." AUTO) (COMMENT storage_class_specifier "=>" "." STATIC) (COMMENT storage_class_specifier "=>" "." EXTERN) (COMMENT storage_class_specifier "=>" "." TYPEDEF) (COMMENT declaration_specifiers "=>" "." type_qualifier declaration_specifiers) (COMMENT declaration_specifiers "=>" "." type_qualifier) (COMMENT declaration_specifiers "=>" "." type_specifier declaration_specifiers) (COMMENT declaration_specifiers "=>" "." type_specifier) (COMMENT declaration_specifiers "=>" "." storage_class_specifier declaration_specifiers) (COMMENT declaration_specifiers "=>" "." storage_class_specifier) (COMMENT declaration "=>" "." declaration_specifiers init_declarator_list SEMICOLON) (COMMENT declaration "=>" "." declaration_specifiers SEMICOLON) (COMMENT expression "=>" "." expression COMMA assignment_expression) (COMMENT expression "=>" "." assignment_expression) (COMMENT assignment_expression "=>" "." unary_expression assignment_operator assignment_expression) (COMMENT assignment_expression "=>" "." conditional_expression) (COMMENT conditional_expression "=>" "." logical_or_expression QMARK expression COLON conditional_expression) (COMMENT conditional_expression "=>" "." logical_or_expression) (COMMENT logical_or_expression "=>" "." logical_or_expression OR_OP logical_and_expression) (COMMENT logical_or_expression "=>" "." logical_and_expression) (COMMENT logical_and_expression "=>" "." logical_and_expression AND_OP inclusive_or_expression) (COMMENT logical_and_expression "=>" "." inclusive_or_expression) (COMMENT inclusive_or_expression "=>" "." inclusive_or_expression PIPE exclusive_or_expression) (COMMENT inclusive_or_expression "=>" "." exclusive_or_expression) (COMMENT exclusive_or_expression "=>" "." exclusive_or_expression CARROT and_expression) (COMMENT exclusive_or_expression "=>" "." and_expression) (COMMENT and_expression "=>" "." and_expression AMPERSAND equality_expression) (COMMENT and_expression "=>" "." equality_expression) (COMMENT equality_expression "=>" "." equality_expression NE_OP relational_expression) (COMMENT equality_expression "=>" "." equality_expression EQ_OP relational_expression) (COMMENT equality_expression "=>" "." relational_expression) (COMMENT relational_expression "=>" "." relational_expression GE_OP shift_expression) (COMMENT relational_expression "=>" "." relational_expression LE_OP shift_expression) (COMMENT relational_expression "=>" "." relational_expression GREATER_OP shift_expression) (COMMENT relational_expression "=>" "." relational_expression LESS_OP shift_expression) (COMMENT relational_expression "=>" "." shift_expression) (COMMENT shift_expression "=>" "." shift_expression RIGHT_OP additive_expression) (COMMENT shift_expression "=>" "." shift_expression LEFT_OP additive_expression) (COMMENT shift_expression "=>" "." additive_expression) (COMMENT additive_expression "=>" "." additive_expression MINUS multiplicative_expression) (COMMENT additive_expression "=>" "." additive_expression PLUS multiplicative_expression) (COMMENT additive_expression "=>" "." multiplicative_expression) (COMMENT multiplicative_expression "=>" "." multiplicative_expression AMPERSAND cast_expression) (COMMENT multiplicative_expression "=>" "." multiplicative_expression FORWARD_SLASH cast_expression) (COMMENT multiplicative_expression "=>" "." multiplicative_expression STAR cast_expression) (COMMENT multiplicative_expression "=>" "." cast_expression) (COMMENT cast_expression "=>" "." LPAREN type_name RPAREN cast_expression) (COMMENT cast_expression "=>" "." unary_expression) (COMMENT unary_operator "=>" "." BANG) (COMMENT unary_operator "=>" "." TWIDLE) (COMMENT unary_operator "=>" "." MINUS) (COMMENT unary_operator "=>" "." PLUS) (COMMENT unary_operator "=>" "." STAR) (COMMENT unary_operator "=>" "." AMPERSAND) (COMMENT unary_expression "=>" "." SIZEOF LPAREN type_name RPAREN) (COMMENT unary_expression "=>" "." SIZEOF unary_expression) (COMMENT unary_expression "=>" "." unary_operator cast_expression) (COMMENT unary_expression "=>" "." DEC_OP unary_expression) (COMMENT unary_expression "=>" "." INC_OP unary_expression) (COMMENT unary_expression "=>" "." postfix_expression) (COMMENT postfix_expression "=>" "." postfix_expression DEC_OP) (COMMENT postfix_expression "=>" "." postfix_expression INC_OP) (COMMENT postfix_expression "=>" "." postfix_expression PTR_OP IDENTIFIER) (COMMENT postfix_expression "=>" "." postfix_expression DOT IDENTIFIER) (COMMENT postfix_expression "=>" "." postfix_expression LPAREN argument_expression_list RPAREN) (COMMENT postfix_expression "=>" "." postfix_expression LPAREN RPAREN) (COMMENT postfix_expression "=>" "." postfix_expression LBRACK expression RBRACK) (COMMENT postfix_expression "=>" "." primary_expression) (COMMENT primary_expression "=>" "." LPAREN expression RPAREN) (COMMENT primary_expression "=>" "." STRING_LITERAL) (COMMENT primary_expression "=>" "." CONSTANT) (COMMENT primary_expression "=>" "." IDENTIFIER) (SHIFT (IDENTIFIER) s242) (SHIFT (CONSTANT) s69) (SHIFT (STRING_LITERAL) s70) (SHIFT (SIZEOF) s71) (SHIFT (INC_OP) s72) (SHIFT (DEC_OP) s73) (SHIFT (TYPE_NAME) s16) (SHIFT (TYPEDEF) s17) (SHIFT (EXTERN) s18) (SHIFT (STATIC) s19) (SHIFT (AUTO) s20) (SHIFT (REGISTER) s21) (SHIFT (CHAR) s22) (SHIFT (SHORT) s23) (SHIFT (INT) s24) (SHIFT (LONG) s25) (SHIFT (SIGNED) s26) (SHIFT (UNSIGNED) s27) (SHIFT (FLOAT) s28) (SHIFT (DOUBLE) s29) (SHIFT (CONST) s30) (SHIFT (VOLATILE) s31) (SHIFT (VOID) s32) (SHIFT (STRUCT) s33) (SHIFT (UNION) s34) (SHIFT (ENUM) s35) (SHIFT (CASE) s243) (SHIFT (DEFAULT) s244) (SHIFT (IF) s245) (SHIFT (SWITCH) s246) (SHIFT (WHILE) s247) (SHIFT (DO) s248) (SHIFT (FOR) s249) (SHIFT (GOTO) s250) (SHIFT (CONTINUE) s251) (SHIFT (BREAK) s252) (SHIFT (RETURN) s253) (SHIFT (LPAREN) s74) (SHIFT (LCURLY) s231) (SHIFT (RCURLY) s302) (SHIFT (AMPERSAND) s75) (SHIFT (STAR) s76) (SHIFT (PLUS) s77) (SHIFT (MINUS) s78) (SHIFT (TWIDLE) s79) (SHIFT (BANG) s80) (SHIFT (SEMICOLON) s255) (GOTO primary_expression s51) (GOTO postfix_expression s52) (GOTO unary_expression s81) (GOTO unary_operator s54) (GOTO cast_expression s55) (GOTO multiplicative_expression s56) (GOTO additive_expression s57) (GOTO shift_expression s58) (GOTO relational_expression s59) (GOTO equality_expression s60) (GOTO and_expression s61) (GOTO exclusive_or_expression s62) (GOTO inclusive_or_expression s63) (GOTO logical_and_expression s64) (GOTO logical_or_expression s65) (GOTO conditional_expression s82) (GOTO assignment_expression s83) (GOTO expression s232) (GOTO declaration s300) (GOTO declaration_specifiers s228) (GOTO storage_class_specifier s3) (GOTO type_specifier s4) (GOTO struct_or_union_specifier s5) (GOTO struct_or_union s6) (GOTO enum_specifier s7) (GOTO type_qualifier s8) (GOTO statement s233) (GOTO labeled_statement s234) (GOTO compound_statement s235) (GOTO statement_list s301) (GOTO expression_statement s238) (GOTO selection_statement s239) (GOTO iteration_statement s240) (GOTO jump_statement s241))
   (STATE s237 (COMMENT jump_statement "=>" "." RETURN expression SEMICOLON) (COMMENT jump_statement "=>" "." RETURN SEMICOLON) (COMMENT jump_statement "=>" "." BREAK SEMICOLON) (COMMENT jump_statement "=>" "." CONTINUE SEMICOLON) (COMMENT jump_statement "=>" "." GOTO IDENTIFIER SEMICOLON) (COMMENT iteration_statement "=>" "." FOR LPAREN expression_statement expression_statement expression RPAREN statement) (COMMENT iteration_statement "=>" "." FOR LPAREN expression_statement expression_statement RPAREN statement) (COMMENT iteration_statement "=>" "." DO statement WHILE LPAREN expression RPAREN SEMICOLON) (COMMENT iteration_statement "=>" "." WHILE LPAREN expression RPAREN statement) (COMMENT selection_statement "=>" "." SWITCH LPAREN expression RPAREN statement) (COMMENT selection_statement "=>" "." IF LPAREN expression RPAREN statement ELSE statement) (COMMENT selection_statement "=>" "." IF LPAREN expression RPAREN statement) (COMMENT expression_statement "=>" "." expression SEMICOLON) (COMMENT expression_statement "=>" "." SEMICOLON) (COMMENT statement_list "=>" statement_list "." statement) (COMMENT compound_statement "=>" "." LCURLY declaration_list statement_list RCURLY) (COMMENT compound_statement "=>" "." LCURLY declaration_list RCURLY) (COMMENT compound_statement "=>" LCURLY statement_list "." RCURLY) (COMMENT compound_statement "=>" "." LCURLY statement_list RCURLY) (COMMENT compound_statement "=>" "." LCURLY RCURLY) (COMMENT labeled_statement "=>" "." DEFAULT COLON statement) (COMMENT labeled_statement "=>" "." CASE constant_expression COLON statement) (COMMENT labeled_statement "=>" "." IDENTIFIER COLON statement) (COMMENT statement "=>" "." jump_statement) (COMMENT statement "=>" "." iteration_statement) (COMMENT statement "=>" "." selection_statement) (COMMENT statement "=>" "." expression_statement) (COMMENT statement "=>" "." compound_statement) (COMMENT statement "=>" "." labeled_statement) (COMMENT expression "=>" "." expression COMMA assignment_expression) (COMMENT expression "=>" "." assignment_expression) (COMMENT assignment_expression "=>" "." unary_expression assignment_operator assignment_expression) (COMMENT assignment_expression "=>" "." conditional_expression) (COMMENT conditional_expression "=>" "." logical_or_expression QMARK expression COLON conditional_expression) (COMMENT conditional_expression "=>" "." logical_or_expression) (COMMENT logical_or_expression "=>" "." logical_or_expression OR_OP logical_and_expression) (COMMENT logical_or_expression "=>" "." logical_and_expression) (COMMENT logical_and_expression "=>" "." logical_and_expression AND_OP inclusive_or_expression) (COMMENT logical_and_expression "=>" "." inclusive_or_expression) (COMMENT inclusive_or_expression "=>" "." inclusive_or_expression PIPE exclusive_or_expression) (COMMENT inclusive_or_expression "=>" "." exclusive_or_expression) (COMMENT exclusive_or_expression "=>" "." exclusive_or_expression CARROT and_expression) (COMMENT exclusive_or_expression "=>" "." and_expression) (COMMENT and_expression "=>" "." and_expression AMPERSAND equality_expression) (COMMENT and_expression "=>" "." equality_expression) (COMMENT equality_expression "=>" "." equality_expression NE_OP relational_expression) (COMMENT equality_expression "=>" "." equality_expression EQ_OP relational_expression) (COMMENT equality_expression "=>" "." relational_expression) (COMMENT relational_expression "=>" "." relational_expression GE_OP shift_expression) (COMMENT relational_expression "=>" "." relational_expression LE_OP shift_expression) (COMMENT relational_expression "=>" "." relational_expression GREATER_OP shift_expression) (COMMENT relational_expression "=>" "." relational_expression LESS_OP shift_expression) (COMMENT relational_expression "=>" "." shift_expression) (COMMENT shift_expression "=>" "." shift_expression RIGHT_OP additive_expression) (COMMENT shift_expression "=>" "." shift_expression LEFT_OP additive_expression) (COMMENT shift_expression "=>" "." additive_expression) (COMMENT additive_expression "=>" "." additive_expression MINUS multiplicative_expression) (COMMENT additive_expression "=>" "." additive_expression PLUS multiplicative_expression) (COMMENT additive_expression "=>" "." multiplicative_expression) (COMMENT multiplicative_expression "=>" "." multiplicative_expression AMPERSAND cast_expression) (COMMENT multiplicative_expression "=>" "." multiplicative_expression FORWARD_SLASH cast_expression) (COMMENT multiplicative_expression "=>" "." multiplicative_expression STAR cast_expression) (COMMENT multiplicative_expression "=>" "." cast_expression) (COMMENT cast_expression "=>" "." LPAREN type_name RPAREN cast_expression) (COMMENT cast_expression "=>" "." unary_expression) (COMMENT unary_operator "=>" "." BANG) (COMMENT unary_operator "=>" "." TWIDLE) (COMMENT unary_operator "=>" "." MINUS) (COMMENT unary_operator "=>" "." PLUS) (COMMENT unary_operator "=>" "." STAR) (COMMENT unary_operator "=>" "." AMPERSAND) (COMMENT unary_expression "=>" "." SIZEOF LPAREN type_name RPAREN) (COMMENT unary_expression "=>" "." SIZEOF unary_expression) (COMMENT unary_expression "=>" "." unary_operator cast_expression) (COMMENT unary_expression "=>" "." DEC_OP unary_expression) (COMMENT unary_expression "=>" "." INC_OP unary_expression) (COMMENT unary_expression "=>" "." postfix_expression) (COMMENT postfix_expression "=>" "." postfix_expression DEC_OP) (COMMENT postfix_expression "=>" "." postfix_expression INC_OP) (COMMENT postfix_expression "=>" "." postfix_expression PTR_OP IDENTIFIER) (COMMENT postfix_expression "=>" "." postfix_expression DOT IDENTIFIER) (COMMENT postfix_expression "=>" "." postfix_expression LPAREN argument_expression_list RPAREN) (COMMENT postfix_expression "=>" "." postfix_expression LPAREN RPAREN) (COMMENT postfix_expression "=>" "." postfix_expression LBRACK expression RBRACK) (COMMENT postfix_expression "=>" "." primary_expression) (COMMENT primary_expression "=>" "." LPAREN expression RPAREN) (COMMENT primary_expression "=>" "." STRING_LITERAL) (COMMENT primary_expression "=>" "." CONSTANT) (COMMENT primary_expression "=>" "." IDENTIFIER) (SHIFT (IDENTIFIER) s242) (SHIFT (CONSTANT) s69) (SHIFT (STRING_LITERAL) s70) (SHIFT (SIZEOF) s71) (SHIFT (INC_OP) s72) (SHIFT (DEC_OP) s73) (SHIFT (CASE) s243) (SHIFT (DEFAULT) s244) (SHIFT (IF) s245) (SHIFT (SWITCH) s246) (SHIFT (WHILE) s247) (SHIFT (DO) s248) (SHIFT (FOR) s249) (SHIFT (GOTO) s250) (SHIFT (CONTINUE) s251) (SHIFT (BREAK) s252) (SHIFT (RETURN) s253) (SHIFT (LPAREN) s74) (SHIFT (LCURLY) s231) (SHIFT (RCURLY) s299) (SHIFT (AMPERSAND) s75) (SHIFT (STAR) s76) (SHIFT (PLUS) s77) (SHIFT (MINUS) s78) (SHIFT (TWIDLE) s79) (SHIFT (BANG) s80) (SHIFT (SEMICOLON) s255) (GOTO primary_expression s51) (GOTO postfix_expression s52) (GOTO unary_expression s81) (GOTO unary_operator s54) (GOTO cast_expression s55) (GOTO multiplicative_expression s56) (GOTO additive_expression s57) (GOTO shift_expression s58) (GOTO relational_expression s59) (GOTO equality_expression s60) (GOTO and_expression s61) (GOTO exclusive_or_expression s62) (GOTO inclusive_or_expression s63) (GOTO logical_and_expression s64) (GOTO logical_or_expression s65) (GOTO conditional_expression s82) (GOTO assignment_expression s83) (GOTO expression s232) (GOTO statement s298) (GOTO labeled_statement s234) (GOTO compound_statement s235) (GOTO expression_statement s238) (GOTO selection_statement s239) (GOTO iteration_statement s240) (GOTO jump_statement s241))
   (STATE s238 (COMMENT statement "=>" expression_statement ".") (REDUCE () r176))
   (STATE s239 (COMMENT statement "=>" selection_statement ".") (REDUCE () r177))
   (STATE s240 (COMMENT statement "=>" iteration_statement ".") (REDUCE () r178))
   (STATE s241 (COMMENT statement "=>" jump_statement ".") (REDUCE () r179))
   (STATE s242 (COMMENT labeled_statement "=>" IDENTIFIER "." COLON statement) (COMMENT primary_expression "=>" IDENTIFIER ".") (REDUCE (PTR_OP) r2) (REDUCE (INC_OP) r2) (REDUCE (DEC_OP) r2) (REDUCE (LEFT_OP) r2) (REDUCE (RIGHT_OP) r2) (REDUCE (LE_OP) r2) (REDUCE (GE_OP) r2) (REDUCE (EQ_OP) r2) (REDUCE (NE_OP) r2) (REDUCE (AND_OP) r2) (REDUCE (OR_OP) r2) (REDUCE (MUL_ASSIGN) r2) (REDUCE (DIV_ASSIGN) r2) (REDUCE (MOD_ASSIGN) r2) (REDUCE (ADD_ASSIGN) r2) (REDUCE (SUB_ASSIGN) r2) (REDUCE (LEFT_ASSIGN) r2) (REDUCE (RIGHT_ASSIGN) r2) (REDUCE (AND_ASSIGN) r2) (REDUCE (XOR_ASSIGN) r2) (REDUCE (OR_ASSIGN) r2) (REDUCE (LPAREN) r2) (REDUCE (LBRACK) r2) (REDUCE (DOT) r2) (REDUCE (COMMA) r2) (REDUCE (AMPERSAND) r2) (REDUCE (STAR) r2) (REDUCE (PLUS) r2) (REDUCE (MINUS) r2) (REDUCE (FORWARD_SLASH) r2) (REDUCE (LESS_OP) r2) (REDUCE (GREATER_OP) r2) (REDUCE (CARROT) r2) (REDUCE (PIPE) r2) (REDUCE (QMARK) r2) (SHIFT (COLON) s296) (REDUCE (EQUAL_SIGN) r2) (REDUCE (SEMICOLON) r2))
   (STATE s243 (COMMENT labeled_statement "=>" CASE "." constant_expression COLON statement) (COMMENT constant_expression "=>" "." conditional_expression) (COMMENT conditional_expression "=>" "." logical_or_expression QMARK expression COLON conditional_expression) (COMMENT conditional_expression "=>" "." logical_or_expression) (COMMENT logical_or_expression "=>" "." logical_or_expression OR_OP logical_and_expression) (COMMENT logical_or_expression "=>" "." logical_and_expression) (COMMENT logical_and_expression "=>" "." logical_and_expression AND_OP inclusive_or_expression) (COMMENT logical_and_expression "=>" "." inclusive_or_expression) (COMMENT inclusive_or_expression "=>" "." inclusive_or_expression PIPE exclusive_or_expression) (COMMENT inclusive_or_expression "=>" "." exclusive_or_expression) (COMMENT exclusive_or_expression "=>" "." exclusive_or_expression CARROT and_expression) (COMMENT exclusive_or_expression "=>" "." and_expression) (COMMENT and_expression "=>" "." and_expression AMPERSAND equality_expression) (COMMENT and_expression "=>" "." equality_expression) (COMMENT equality_expression "=>" "." equality_expression NE_OP relational_expression) (COMMENT equality_expression "=>" "." equality_expression EQ_OP relational_expression) (COMMENT equality_expression "=>" "." relational_expression) (COMMENT relational_expression "=>" "." relational_expression GE_OP shift_expression) (COMMENT relational_expression "=>" "." relational_expression LE_OP shift_expression) (COMMENT relational_expression "=>" "." relational_expression GREATER_OP shift_expression) (COMMENT relational_expression "=>" "." relational_expression LESS_OP shift_expression) (COMMENT relational_expression "=>" "." shift_expression) (COMMENT shift_expression "=>" "." shift_expression RIGHT_OP additive_expression) (COMMENT shift_expression "=>" "." shift_expression LEFT_OP additive_expression) (COMMENT shift_expression "=>" "." additive_expression) (COMMENT additive_expression "=>" "." additive_expression MINUS multiplicative_expression) (COMMENT additive_expression "=>" "." additive_expression PLUS multiplicative_expression) (COMMENT additive_expression "=>" "." multiplicative_expression) (COMMENT multiplicative_expression "=>" "." multiplicative_expression AMPERSAND cast_expression) (COMMENT multiplicative_expression "=>" "." multiplicative_expression FORWARD_SLASH cast_expression) (COMMENT multiplicative_expression "=>" "." multiplicative_expression STAR cast_expression) (COMMENT multiplicative_expression "=>" "." cast_expression) (COMMENT cast_expression "=>" "." LPAREN type_name RPAREN cast_expression) (COMMENT cast_expression "=>" "." unary_expression) (COMMENT unary_operator "=>" "." BANG) (COMMENT unary_operator "=>" "." TWIDLE) (COMMENT unary_operator "=>" "." MINUS) (COMMENT unary_operator "=>" "." PLUS) (COMMENT unary_operator "=>" "." STAR) (COMMENT unary_operator "=>" "." AMPERSAND) (COMMENT unary_expression "=>" "." SIZEOF LPAREN type_name RPAREN) (COMMENT unary_expression "=>" "." SIZEOF unary_expression) (COMMENT unary_expression "=>" "." unary_operator cast_expression) (COMMENT unary_expression "=>" "." DEC_OP unary_expression) (COMMENT unary_expression "=>" "." INC_OP unary_expression) (COMMENT unary_expression "=>" "." postfix_expression) (COMMENT postfix_expression "=>" "." postfix_expression DEC_OP) (COMMENT postfix_expression "=>" "." postfix_expression INC_OP) (COMMENT postfix_expression "=>" "." postfix_expression PTR_OP IDENTIFIER) (COMMENT postfix_expression "=>" "." postfix_expression DOT IDENTIFIER) (COMMENT postfix_expression "=>" "." postfix_expression LPAREN argument_expression_list RPAREN) (COMMENT postfix_expression "=>" "." postfix_expression LPAREN RPAREN) (COMMENT postfix_expression "=>" "." postfix_expression LBRACK expression RBRACK) (COMMENT postfix_expression "=>" "." primary_expression) (COMMENT primary_expression "=>" "." LPAREN expression RPAREN) (COMMENT primary_expression "=>" "." STRING_LITERAL) (COMMENT primary_expression "=>" "." CONSTANT) (COMMENT primary_expression "=>" "." IDENTIFIER) (SHIFT (IDENTIFIER) s68) (SHIFT (CONSTANT) s69) (SHIFT (STRING_LITERAL) s70) (SHIFT (SIZEOF) s71) (SHIFT (INC_OP) s72) (SHIFT (DEC_OP) s73) (SHIFT (LPAREN) s74) (SHIFT (AMPERSAND) s75) (SHIFT (STAR) s76) (SHIFT (PLUS) s77) (SHIFT (MINUS) s78) (SHIFT (TWIDLE) s79) (SHIFT (BANG) s80) (GOTO primary_expression s51) (GOTO postfix_expression s52) (GOTO unary_expression s53) (GOTO unary_operator s54) (GOTO cast_expression s55) (GOTO multiplicative_expression s56) (GOTO additive_expression s57) (GOTO shift_expression s58) (GOTO relational_expression s59) (GOTO equality_expression s60) (GOTO and_expression s61) (GOTO exclusive_or_expression s62) (GOTO inclusive_or_expression s63) (GOTO logical_and_expression s64) (GOTO logical_or_expression s65) (GOTO conditional_expression s66) (GOTO constant_expression s293))
   (STATE s244 (COMMENT labeled_statement "=>" DEFAULT "." COLON statement) (SHIFT (COLON) s291))
   (STATE s245 (COMMENT selection_statement "=>" IF "." LPAREN expression RPAREN statement ELSE statement) (COMMENT selection_statement "=>" IF "." LPAREN expression RPAREN statement) (SHIFT (LPAREN) s285))
   (STATE s246 (COMMENT selection_statement "=>" SWITCH "." LPAREN expression RPAREN statement) (SHIFT (LPAREN) s281))
   (STATE s247 (COMMENT iteration_statement "=>" WHILE "." LPAREN expression RPAREN statement) (SHIFT (LPAREN) s277))
   (STATE s248 (COMMENT jump_statement "=>" "." RETURN expression SEMICOLON) (COMMENT jump_statement "=>" "." RETURN SEMICOLON) (COMMENT jump_statement "=>" "." BREAK SEMICOLON) (COMMENT jump_statement "=>" "." CONTINUE SEMICOLON) (COMMENT jump_statement "=>" "." GOTO IDENTIFIER SEMICOLON) (COMMENT iteration_statement "=>" "." FOR LPAREN expression_statement expression_statement expression RPAREN statement) (COMMENT iteration_statement "=>" "." FOR LPAREN expression_statement expression_statement RPAREN statement) (COMMENT iteration_statement "=>" DO "." statement WHILE LPAREN expression RPAREN SEMICOLON) (COMMENT iteration_statement "=>" "." DO statement WHILE LPAREN expression RPAREN SEMICOLON) (COMMENT iteration_statement "=>" "." WHILE LPAREN expression RPAREN statement) (COMMENT selection_statement "=>" "." SWITCH LPAREN expression RPAREN statement) (COMMENT selection_statement "=>" "." IF LPAREN expression RPAREN statement ELSE statement) (COMMENT selection_statement "=>" "." IF LPAREN expression RPAREN statement) (COMMENT expression_statement "=>" "." expression SEMICOLON) (COMMENT expression_statement "=>" "." SEMICOLON) (COMMENT compound_statement "=>" "." LCURLY declaration_list statement_list RCURLY) (COMMENT compound_statement "=>" "." LCURLY declaration_list RCURLY) (COMMENT compound_statement "=>" "." LCURLY statement_list RCURLY) (COMMENT compound_statement "=>" "." LCURLY RCURLY) (COMMENT labeled_statement "=>" "." DEFAULT COLON statement) (COMMENT labeled_statement "=>" "." CASE constant_expression COLON statement) (COMMENT labeled_statement "=>" "." IDENTIFIER COLON statement) (COMMENT statement "=>" "." jump_statement) (COMMENT statement "=>" "." iteration_statement) (COMMENT statement "=>" "." selection_statement) (COMMENT statement "=>" "." expression_statement) (COMMENT statement "=>" "." compound_statement) (COMMENT statement "=>" "." labeled_statement) (COMMENT expression "=>" "." expression COMMA assignment_expression) (COMMENT expression "=>" "." assignment_expression) (COMMENT assignment_expression "=>" "." unary_expression assignment_operator assignment_expression) (COMMENT assignment_expression "=>" "." conditional_expression) (COMMENT conditional_expression "=>" "." logical_or_expression QMARK expression COLON conditional_expression) (COMMENT conditional_expression "=>" "." logical_or_expression) (COMMENT logical_or_expression "=>" "." logical_or_expression OR_OP logical_and_expression) (COMMENT logical_or_expression "=>" "." logical_and_expression) (COMMENT logical_and_expression "=>" "." logical_and_expression AND_OP inclusive_or_expression) (COMMENT logical_and_expression "=>" "." inclusive_or_expression) (COMMENT inclusive_or_expression "=>" "." inclusive_or_expression PIPE exclusive_or_expression) (COMMENT inclusive_or_expression "=>" "." exclusive_or_expression) (COMMENT exclusive_or_expression "=>" "." exclusive_or_expression CARROT and_expression) (COMMENT exclusive_or_expression "=>" "." and_expression) (COMMENT and_expression "=>" "." and_expression AMPERSAND equality_expression) (COMMENT and_expression "=>" "." equality_expression) (COMMENT equality_expression "=>" "." equality_expression NE_OP relational_expression) (COMMENT equality_expression "=>" "." equality_expression EQ_OP relational_expression) (COMMENT equality_expression "=>" "." relational_expression) (COMMENT relational_expression "=>" "." relational_expression GE_OP shift_expression) (COMMENT relational_expression "=>" "." relational_expression LE_OP shift_expression) (COMMENT relational_expression "=>" "." relational_expression GREATER_OP shift_expression) (COMMENT relational_expression "=>" "." relational_expression LESS_OP shift_expression) (COMMENT relational_expression "=>" "." shift_expression) (COMMENT shift_expression "=>" "." shift_expression RIGHT_OP additive_expression) (COMMENT shift_expression "=>" "." shift_expression LEFT_OP additive_expression) (COMMENT shift_expression "=>" "." additive_expression) (COMMENT additive_expression "=>" "." additive_expression MINUS multiplicative_expression) (COMMENT additive_expression "=>" "." additive_expression PLUS multiplicative_expression) (COMMENT additive_expression "=>" "." multiplicative_expression) (COMMENT multiplicative_expression "=>" "." multiplicative_expression AMPERSAND cast_expression) (COMMENT multiplicative_expression "=>" "." multiplicative_expression FORWARD_SLASH cast_expression) (COMMENT multiplicative_expression "=>" "." multiplicative_expression STAR cast_expression) (COMMENT multiplicative_expression "=>" "." cast_expression) (COMMENT cast_expression "=>" "." LPAREN type_name RPAREN cast_expression) (COMMENT cast_expression "=>" "." unary_expression) (COMMENT unary_operator "=>" "." BANG) (COMMENT unary_operator "=>" "." TWIDLE) (COMMENT unary_operator "=>" "." MINUS) (COMMENT unary_operator "=>" "." PLUS) (COMMENT unary_operator "=>" "." STAR) (COMMENT unary_operator "=>" "." AMPERSAND) (COMMENT unary_expression "=>" "." SIZEOF LPAREN type_name RPAREN) (COMMENT unary_expression "=>" "." SIZEOF unary_expression) (COMMENT unary_expression "=>" "." unary_operator cast_expression) (COMMENT unary_expression "=>" "." DEC_OP unary_expression) (COMMENT unary_expression "=>" "." INC_OP unary_expression) (COMMENT unary_expression "=>" "." postfix_expression) (COMMENT postfix_expression "=>" "." postfix_expression DEC_OP) (COMMENT postfix_expression "=>" "." postfix_expression INC_OP) (COMMENT postfix_expression "=>" "." postfix_expression PTR_OP IDENTIFIER) (COMMENT postfix_expression "=>" "." postfix_expression DOT IDENTIFIER) (COMMENT postfix_expression "=>" "." postfix_expression LPAREN argument_expression_list RPAREN) (COMMENT postfix_expression "=>" "." postfix_expression LPAREN RPAREN) (COMMENT postfix_expression "=>" "." postfix_expression LBRACK expression RBRACK) (COMMENT postfix_expression "=>" "." primary_expression) (COMMENT primary_expression "=>" "." LPAREN expression RPAREN) (COMMENT primary_expression "=>" "." STRING_LITERAL) (COMMENT primary_expression "=>" "." CONSTANT) (COMMENT primary_expression "=>" "." IDENTIFIER) (SHIFT (IDENTIFIER) s242) (SHIFT (CONSTANT) s69) (SHIFT (STRING_LITERAL) s70) (SHIFT (SIZEOF) s71) (SHIFT (INC_OP) s72) (SHIFT (DEC_OP) s73) (SHIFT (CASE) s243) (SHIFT (DEFAULT) s244) (SHIFT (IF) s245) (SHIFT (SWITCH) s246) (SHIFT (WHILE) s247) (SHIFT (DO) s248) (SHIFT (FOR) s249) (SHIFT (GOTO) s250) (SHIFT (CONTINUE) s251) (SHIFT (BREAK) s252) (SHIFT (RETURN) s253) (SHIFT (LPAREN) s74) (SHIFT (LCURLY) s231) (SHIFT (AMPERSAND) s75) (SHIFT (STAR) s76) (SHIFT (PLUS) s77) (SHIFT (MINUS) s78) (SHIFT (TWIDLE) s79) (SHIFT (BANG) s80) (SHIFT (SEMICOLON) s255) (GOTO primary_expression s51) (GOTO postfix_expression s52) (GOTO unary_expression s81) (GOTO unary_operator s54) (GOTO cast_expression s55) (GOTO multiplicative_expression s56) (GOTO additive_expression s57) (GOTO shift_expression s58) (GOTO relational_expression s59) (GOTO equality_expression s60) (GOTO and_expression s61) (GOTO exclusive_or_expression s62) (GOTO inclusive_or_expression s63) (GOTO logical_and_expression s64) (GOTO logical_or_expression s65) (GOTO conditional_expression s82) (GOTO assignment_expression s83) (GOTO expression s232) (GOTO statement s271) (GOTO labeled_statement s234) (GOTO compound_statement s235) (GOTO expression_statement s238) (GOTO selection_statement s239) (GOTO iteration_statement s240) (GOTO jump_statement s241))
   (STATE s249 (COMMENT iteration_statement "=>" FOR "." LPAREN expression_statement expression_statement expression RPAREN statement) (COMMENT iteration_statement "=>" FOR "." LPAREN expression_statement expression_statement RPAREN statement) (SHIFT (LPAREN) s263))
   (STATE s250 (COMMENT jump_statement "=>" GOTO "." IDENTIFIER SEMICOLON) (SHIFT (IDENTIFIER) s261))
   (STATE s251 (COMMENT jump_statement "=>" CONTINUE "." SEMICOLON) (SHIFT (SEMICOLON) s260))
   (STATE s252 (COMMENT jump_statement "=>" BREAK "." SEMICOLON) (SHIFT (SEMICOLON) s259))
   (STATE s253 (COMMENT jump_statement "=>" RETURN "." expression SEMICOLON) (COMMENT jump_statement "=>" RETURN "." SEMICOLON) (COMMENT expression "=>" "." expression COMMA assignment_expression) (COMMENT expression "=>" "." assignment_expression) (COMMENT assignment_expression "=>" "." unary_expression assignment_operator assignment_expression) (COMMENT assignment_expression "=>" "." conditional_expression) (COMMENT conditional_expression "=>" "." logical_or_expression QMARK expression COLON conditional_expression) (COMMENT conditional_expression "=>" "." logical_or_expression) (COMMENT logical_or_expression "=>" "." logical_or_expression OR_OP logical_and_expression) (COMMENT logical_or_expression "=>" "." logical_and_expression) (COMMENT logical_and_expression "=>" "." logical_and_expression AND_OP inclusive_or_expression) (COMMENT logical_and_expression "=>" "." inclusive_or_expression) (COMMENT inclusive_or_expression "=>" "." inclusive_or_expression PIPE exclusive_or_expression) (COMMENT inclusive_or_expression "=>" "." exclusive_or_expression) (COMMENT exclusive_or_expression "=>" "." exclusive_or_expression CARROT and_expression) (COMMENT exclusive_or_expression "=>" "." and_expression) (COMMENT and_expression "=>" "." and_expression AMPERSAND equality_expression) (COMMENT and_expression "=>" "." equality_expression) (COMMENT equality_expression "=>" "." equality_expression NE_OP relational_expression) (COMMENT equality_expression "=>" "." equality_expression EQ_OP relational_expression) (COMMENT equality_expression "=>" "." relational_expression) (COMMENT relational_expression "=>" "." relational_expression GE_OP shift_expression) (COMMENT relational_expression "=>" "." relational_expression LE_OP shift_expression) (COMMENT relational_expression "=>" "." relational_expression GREATER_OP shift_expression) (COMMENT relational_expression "=>" "." relational_expression LESS_OP shift_expression) (COMMENT relational_expression "=>" "." shift_expression) (COMMENT shift_expression "=>" "." shift_expression RIGHT_OP additive_expression) (COMMENT shift_expression "=>" "." shift_expression LEFT_OP additive_expression) (COMMENT shift_expression "=>" "." additive_expression) (COMMENT additive_expression "=>" "." additive_expression MINUS multiplicative_expression) (COMMENT additive_expression "=>" "." additive_expression PLUS multiplicative_expression) (COMMENT additive_expression "=>" "." multiplicative_expression) (COMMENT multiplicative_expression "=>" "." multiplicative_expression AMPERSAND cast_expression) (COMMENT multiplicative_expression "=>" "." multiplicative_expression FORWARD_SLASH cast_expression) (COMMENT multiplicative_expression "=>" "." multiplicative_expression STAR cast_expression) (COMMENT multiplicative_expression "=>" "." cast_expression) (COMMENT cast_expression "=>" "." LPAREN type_name RPAREN cast_expression) (COMMENT cast_expression "=>" "." unary_expression) (COMMENT unary_operator "=>" "." BANG) (COMMENT unary_operator "=>" "." TWIDLE) (COMMENT unary_operator "=>" "." MINUS) (COMMENT unary_operator "=>" "." PLUS) (COMMENT unary_operator "=>" "." STAR) (COMMENT unary_operator "=>" "." AMPERSAND) (COMMENT unary_expression "=>" "." SIZEOF LPAREN type_name RPAREN) (COMMENT unary_expression "=>" "." SIZEOF unary_expression) (COMMENT unary_expression "=>" "." unary_operator cast_expression) (COMMENT unary_expression "=>" "." DEC_OP unary_expression) (COMMENT unary_expression "=>" "." INC_OP unary_expression) (COMMENT unary_expression "=>" "." postfix_expression) (COMMENT postfix_expression "=>" "." postfix_expression DEC_OP) (COMMENT postfix_expression "=>" "." postfix_expression INC_OP) (COMMENT postfix_expression "=>" "." postfix_expression PTR_OP IDENTIFIER) (COMMENT postfix_expression "=>" "." postfix_expression DOT IDENTIFIER) (COMMENT postfix_expression "=>" "." postfix_expression LPAREN argument_expression_list RPAREN) (COMMENT postfix_expression "=>" "." postfix_expression LPAREN RPAREN) (COMMENT postfix_expression "=>" "." postfix_expression LBRACK expression RBRACK) (COMMENT postfix_expression "=>" "." primary_expression) (COMMENT primary_expression "=>" "." LPAREN expression RPAREN) (COMMENT primary_expression "=>" "." STRING_LITERAL) (COMMENT primary_expression "=>" "." CONSTANT) (COMMENT primary_expression "=>" "." IDENTIFIER) (SHIFT (IDENTIFIER) s68) (SHIFT (CONSTANT) s69) (SHIFT (STRING_LITERAL) s70) (SHIFT (SIZEOF) s71) (SHIFT (INC_OP) s72) (SHIFT (DEC_OP) s73) (SHIFT (LPAREN) s74) (SHIFT (AMPERSAND) s75) (SHIFT (STAR) s76) (SHIFT (PLUS) s77) (SHIFT (MINUS) s78) (SHIFT (TWIDLE) s79) (SHIFT (BANG) s80) (SHIFT (SEMICOLON) s257) (GOTO primary_expression s51) (GOTO postfix_expression s52) (GOTO unary_expression s81) (GOTO unary_operator s54) (GOTO cast_expression s55) (GOTO multiplicative_expression s56) (GOTO additive_expression s57) (GOTO shift_expression s58) (GOTO relational_expression s59) (GOTO equality_expression s60) (GOTO and_expression s61) (GOTO exclusive_or_expression s62) (GOTO inclusive_or_expression s63) (GOTO logical_and_expression s64) (GOTO logical_or_expression s65) (GOTO conditional_expression s82) (GOTO assignment_expression s83) (GOTO expression s256))
   (STATE s254 (COMMENT compound_statement "=>" LCURLY RCURLY ".") (REDUCE () r183))
   (STATE s255 (COMMENT expression_statement "=>" SEMICOLON ".") (REDUCE () r191))
   (STATE s256 (COMMENT jump_statement "=>" RETURN expression "." SEMICOLON) (COMMENT expression "=>" expression "." COMMA assignment_expression) (SHIFT (COMMA) s140) (SHIFT (SEMICOLON) s258))
   (STATE s257 (COMMENT jump_statement "=>" RETURN SEMICOLON ".") (REDUCE () r203))
   (STATE s258 (COMMENT jump_statement "=>" RETURN expression SEMICOLON ".") (REDUCE () r204))
   (STATE s259 (COMMENT jump_statement "=>" BREAK SEMICOLON ".") (REDUCE () r202))
   (STATE s260 (COMMENT jump_statement "=>" CONTINUE SEMICOLON ".") (REDUCE () r201))
   (STATE s261 (COMMENT jump_statement "=>" GOTO IDENTIFIER "." SEMICOLON) (SHIFT (SEMICOLON) s262))
   (STATE s262 (COMMENT jump_statement "=>" GOTO IDENTIFIER SEMICOLON ".") (REDUCE () r200))
   (STATE s263 (COMMENT iteration_statement "=>" FOR LPAREN "." expression_statement expression_statement expression RPAREN statement) (COMMENT iteration_statement "=>" FOR LPAREN "." expression_statement expression_statement RPAREN statement) (COMMENT expression_statement "=>" "." expression SEMICOLON) (COMMENT expression_statement "=>" "." SEMICOLON) (COMMENT expression "=>" "." expression COMMA assignment_expression) (COMMENT expression "=>" "." assignment_expression) (COMMENT assignment_expression "=>" "." unary_expression assignment_operator assignment_expression) (COMMENT assignment_expression "=>" "." conditional_expression) (COMMENT conditional_expression "=>" "." logical_or_expression QMARK expression COLON conditional_expression) (COMMENT conditional_expression "=>" "." logical_or_expression) (COMMENT logical_or_expression "=>" "." logical_or_expression OR_OP logical_and_expression) (COMMENT logical_or_expression "=>" "." logical_and_expression) (COMMENT logical_and_expression "=>" "." logical_and_expression AND_OP inclusive_or_expression) (COMMENT logical_and_expression "=>" "." inclusive_or_expression) (COMMENT inclusive_or_expression "=>" "." inclusive_or_expression PIPE exclusive_or_expression) (COMMENT inclusive_or_expression "=>" "." exclusive_or_expression) (COMMENT exclusive_or_expression "=>" "." exclusive_or_expression CARROT and_expression) (COMMENT exclusive_or_expression "=>" "." and_expression) (COMMENT and_expression "=>" "." and_expression AMPERSAND equality_expression) (COMMENT and_expression "=>" "." equality_expression) (COMMENT equality_expression "=>" "." equality_expression NE_OP relational_expression) (COMMENT equality_expression "=>" "." equality_expression EQ_OP relational_expression) (COMMENT equality_expression "=>" "." relational_expression) (COMMENT relational_expression "=>" "." relational_expression GE_OP shift_expression) (COMMENT relational_expression "=>" "." relational_expression LE_OP shift_expression) (COMMENT relational_expression "=>" "." relational_expression GREATER_OP shift_expression) (COMMENT relational_expression "=>" "." relational_expression LESS_OP shift_expression) (COMMENT relational_expression "=>" "." shift_expression) (COMMENT shift_expression "=>" "." shift_expression RIGHT_OP additive_expression) (COMMENT shift_expression "=>" "." shift_expression LEFT_OP additive_expression) (COMMENT shift_expression "=>" "." additive_expression) (COMMENT additive_expression "=>" "." additive_expression MINUS multiplicative_expression) (COMMENT additive_expression "=>" "." additive_expression PLUS multiplicative_expression) (COMMENT additive_expression "=>" "." multiplicative_expression) (COMMENT multiplicative_expression "=>" "." multiplicative_expression AMPERSAND cast_expression) (COMMENT multiplicative_expression "=>" "." multiplicative_expression FORWARD_SLASH cast_expression) (COMMENT multiplicative_expression "=>" "." multiplicative_expression STAR cast_expression) (COMMENT multiplicative_expression "=>" "." cast_expression) (COMMENT cast_expression "=>" "." LPAREN type_name RPAREN cast_expression) (COMMENT cast_expression "=>" "." unary_expression) (COMMENT unary_operator "=>" "." BANG) (COMMENT unary_operator "=>" "." TWIDLE) (COMMENT unary_operator "=>" "." MINUS) (COMMENT unary_operator "=>" "." PLUS) (COMMENT unary_operator "=>" "." STAR) (COMMENT unary_operator "=>" "." AMPERSAND) (COMMENT unary_expression "=>" "." SIZEOF LPAREN type_name RPAREN) (COMMENT unary_expression "=>" "." SIZEOF unary_expression) (COMMENT unary_expression "=>" "." unary_operator cast_expression) (COMMENT unary_expression "=>" "." DEC_OP unary_expression) (COMMENT unary_expression "=>" "." INC_OP unary_expression) (COMMENT unary_expression "=>" "." postfix_expression) (COMMENT postfix_expression "=>" "." postfix_expression DEC_OP) (COMMENT postfix_expression "=>" "." postfix_expression INC_OP) (COMMENT postfix_expression "=>" "." postfix_expression PTR_OP IDENTIFIER) (COMMENT postfix_expression "=>" "." postfix_expression DOT IDENTIFIER) (COMMENT postfix_expression "=>" "." postfix_expression LPAREN argument_expression_list RPAREN) (COMMENT postfix_expression "=>" "." postfix_expression LPAREN RPAREN) (COMMENT postfix_expression "=>" "." postfix_expression LBRACK expression RBRACK) (COMMENT postfix_expression "=>" "." primary_expression) (COMMENT primary_expression "=>" "." LPAREN expression RPAREN) (COMMENT primary_expression "=>" "." STRING_LITERAL) (COMMENT primary_expression "=>" "." CONSTANT) (COMMENT primary_expression "=>" "." IDENTIFIER) (SHIFT (IDENTIFIER) s68) (SHIFT (CONSTANT) s69) (SHIFT (STRING_LITERAL) s70) (SHIFT (SIZEOF) s71) (SHIFT (INC_OP) s72) (SHIFT (DEC_OP) s73) (SHIFT (LPAREN) s74) (SHIFT (AMPERSAND) s75) (SHIFT (STAR) s76) (SHIFT (PLUS) s77) (SHIFT (MINUS) s78) (SHIFT (TWIDLE) s79) (SHIFT (BANG) s80) (SHIFT (SEMICOLON) s255) (GOTO primary_expression s51) (GOTO postfix_expression s52) (GOTO unary_expression s81) (GOTO unary_operator s54) (GOTO cast_expression s55) (GOTO multiplicative_expression s56) (GOTO additive_expression s57) (GOTO shift_expression s58) (GOTO relational_expression s59) (GOTO equality_expression s60) (GOTO and_expression s61) (GOTO exclusive_or_expression s62) (GOTO inclusive_or_expression s63) (GOTO logical_and_expression s64) (GOTO logical_or_expression s65) (GOTO conditional_expression s82) (GOTO assignment_expression s83) (GOTO expression s232) (GOTO expression_statement s264))
   (STATE s264 (COMMENT iteration_statement "=>" FOR LPAREN expression_statement "." expression_statement expression RPAREN statement) (COMMENT iteration_statement "=>" FOR LPAREN expression_statement "." expression_statement RPAREN statement) (COMMENT expression_statement "=>" "." expression SEMICOLON) (COMMENT expression_statement "=>" "." SEMICOLON) (COMMENT expression "=>" "." expression COMMA assignment_expression) (COMMENT expression "=>" "." assignment_expression) (COMMENT assignment_expression "=>" "." unary_expression assignment_operator assignment_expression) (COMMENT assignment_expression "=>" "." conditional_expression) (COMMENT conditional_expression "=>" "." logical_or_expression QMARK expression COLON conditional_expression) (COMMENT conditional_expression "=>" "." logical_or_expression) (COMMENT logical_or_expression "=>" "." logical_or_expression OR_OP logical_and_expression) (COMMENT logical_or_expression "=>" "." logical_and_expression) (COMMENT logical_and_expression "=>" "." logical_and_expression AND_OP inclusive_or_expression) (COMMENT logical_and_expression "=>" "." inclusive_or_expression) (COMMENT inclusive_or_expression "=>" "." inclusive_or_expression PIPE exclusive_or_expression) (COMMENT inclusive_or_expression "=>" "." exclusive_or_expression) (COMMENT exclusive_or_expression "=>" "." exclusive_or_expression CARROT and_expression) (COMMENT exclusive_or_expression "=>" "." and_expression) (COMMENT and_expression "=>" "." and_expression AMPERSAND equality_expression) (COMMENT and_expression "=>" "." equality_expression) (COMMENT equality_expression "=>" "." equality_expression NE_OP relational_expression) (COMMENT equality_expression "=>" "." equality_expression EQ_OP relational_expression) (COMMENT equality_expression "=>" "." relational_expression) (COMMENT relational_expression "=>" "." relational_expression GE_OP shift_expression) (COMMENT relational_expression "=>" "." relational_expression LE_OP shift_expression) (COMMENT relational_expression "=>" "." relational_expression GREATER_OP shift_expression) (COMMENT relational_expression "=>" "." relational_expression LESS_OP shift_expression) (COMMENT relational_expression "=>" "." shift_expression) (COMMENT shift_expression "=>" "." shift_expression RIGHT_OP additive_expression) (COMMENT shift_expression "=>" "." shift_expression LEFT_OP additive_expression) (COMMENT shift_expression "=>" "." additive_expression) (COMMENT additive_expression "=>" "." additive_expression MINUS multiplicative_expression) (COMMENT additive_expression "=>" "." additive_expression PLUS multiplicative_expression) (COMMENT additive_expression "=>" "." multiplicative_expression) (COMMENT multiplicative_expression "=>" "." multiplicative_expression AMPERSAND cast_expression) (COMMENT multiplicative_expression "=>" "." multiplicative_expression FORWARD_SLASH cast_expression) (COMMENT multiplicative_expression "=>" "." multiplicative_expression STAR cast_expression) (COMMENT multiplicative_expression "=>" "." cast_expression) (COMMENT cast_expression "=>" "." LPAREN type_name RPAREN cast_expression) (COMMENT cast_expression "=>" "." unary_expression) (COMMENT unary_operator "=>" "." BANG) (COMMENT unary_operator "=>" "." TWIDLE) (COMMENT unary_operator "=>" "." MINUS) (COMMENT unary_operator "=>" "." PLUS) (COMMENT unary_operator "=>" "." STAR) (COMMENT unary_operator "=>" "." AMPERSAND) (COMMENT unary_expression "=>" "." SIZEOF LPAREN type_name RPAREN) (COMMENT unary_expression "=>" "." SIZEOF unary_expression) (COMMENT unary_expression "=>" "." unary_operator cast_expression) (COMMENT unary_expression "=>" "." DEC_OP unary_expression) (COMMENT unary_expression "=>" "." INC_OP unary_expression) (COMMENT unary_expression "=>" "." postfix_expression) (COMMENT postfix_expression "=>" "." postfix_expression DEC_OP) (COMMENT postfix_expression "=>" "." postfix_expression INC_OP) (COMMENT postfix_expression "=>" "." postfix_expression PTR_OP IDENTIFIER) (COMMENT postfix_expression "=>" "." postfix_expression DOT IDENTIFIER) (COMMENT postfix_expression "=>" "." postfix_expression LPAREN argument_expression_list RPAREN) (COMMENT postfix_expression "=>" "." postfix_expression LPAREN RPAREN) (COMMENT postfix_expression "=>" "." postfix_expression LBRACK expression RBRACK) (COMMENT postfix_expression "=>" "." primary_expression) (COMMENT primary_expression "=>" "." LPAREN expression RPAREN) (COMMENT primary_expression "=>" "." STRING_LITERAL) (COMMENT primary_expression "=>" "." CONSTANT) (COMMENT primary_expression "=>" "." IDENTIFIER) (SHIFT (IDENTIFIER) s68) (SHIFT (CONSTANT) s69) (SHIFT (STRING_LITERAL) s70) (SHIFT (SIZEOF) s71) (SHIFT (INC_OP) s72) (SHIFT (DEC_OP) s73) (SHIFT (LPAREN) s74) (SHIFT (AMPERSAND) s75) (SHIFT (STAR) s76) (SHIFT (PLUS) s77) (SHIFT (MINUS) s78) (SHIFT (TWIDLE) s79) (SHIFT (BANG) s80) (SHIFT (SEMICOLON) s255) (GOTO primary_expression s51) (GOTO postfix_expression s52) (GOTO unary_expression s81) (GOTO unary_operator s54) (GOTO cast_expression s55) (GOTO multiplicative_expression s56) (GOTO additive_expression s57) (GOTO shift_expression s58) (GOTO relational_expression s59) (GOTO equality_expression s60) (GOTO and_expression s61) (GOTO exclusive_or_expression s62) (GOTO inclusive_or_expression s63) (GOTO logical_and_expression s64) (GOTO logical_or_expression s65) (GOTO conditional_expression s82) (GOTO assignment_expression s83) (GOTO expression s232) (GOTO expression_statement s265))
   (STATE s265 (COMMENT iteration_statement "=>" FOR LPAREN expression_statement expression_statement "." expression RPAREN statement) (COMMENT iteration_statement "=>" FOR LPAREN expression_statement expression_statement "." RPAREN statement) (COMMENT expression "=>" "." expression COMMA assignment_expression) (COMMENT expression "=>" "." assignment_expression) (COMMENT assignment_expression "=>" "." unary_expression assignment_operator assignment_expression) (COMMENT assignment_expression "=>" "." conditional_expression) (COMMENT conditional_expression "=>" "." logical_or_expression QMARK expression COLON conditional_expression) (COMMENT conditional_expression "=>" "." logical_or_expression) (COMMENT logical_or_expression "=>" "." logical_or_expression OR_OP logical_and_expression) (COMMENT logical_or_expression "=>" "." logical_and_expression) (COMMENT logical_and_expression "=>" "." logical_and_expression AND_OP inclusive_or_expression) (COMMENT logical_and_expression "=>" "." inclusive_or_expression) (COMMENT inclusive_or_expression "=>" "." inclusive_or_expression PIPE exclusive_or_expression) (COMMENT inclusive_or_expression "=>" "." exclusive_or_expression) (COMMENT exclusive_or_expression "=>" "." exclusive_or_expression CARROT and_expression) (COMMENT exclusive_or_expression "=>" "." and_expression) (COMMENT and_expression "=>" "." and_expression AMPERSAND equality_expression) (COMMENT and_expression "=>" "." equality_expression) (COMMENT equality_expression "=>" "." equality_expression NE_OP relational_expression) (COMMENT equality_expression "=>" "." equality_expression EQ_OP relational_expression) (COMMENT equality_expression "=>" "." relational_expression) (COMMENT relational_expression "=>" "." relational_expression GE_OP shift_expression) (COMMENT relational_expression "=>" "." relational_expression LE_OP shift_expression) (COMMENT relational_expression "=>" "." relational_expression GREATER_OP shift_expression) (COMMENT relational_expression "=>" "." relational_expression LESS_OP shift_expression) (COMMENT relational_expression "=>" "." shift_expression) (COMMENT shift_expression "=>" "." shift_expression RIGHT_OP additive_expression) (COMMENT shift_expression "=>" "." shift_expression LEFT_OP additive_expression) (COMMENT shift_expression "=>" "." additive_expression) (COMMENT additive_expression "=>" "." additive_expression MINUS multiplicative_expression) (COMMENT additive_expression "=>" "." additive_expression PLUS multiplicative_expression) (COMMENT additive_expression "=>" "." multiplicative_expression) (COMMENT multiplicative_expression "=>" "." multiplicative_expression AMPERSAND cast_expression) (COMMENT multiplicative_expression "=>" "." multiplicative_expression FORWARD_SLASH cast_expression) (COMMENT multiplicative_expression "=>" "." multiplicative_expression STAR cast_expression) (COMMENT multiplicative_expression "=>" "." cast_expression) (COMMENT cast_expression "=>" "." LPAREN type_name RPAREN cast_expression) (COMMENT cast_expression "=>" "." unary_expression) (COMMENT unary_operator "=>" "." BANG) (COMMENT unary_operator "=>" "." TWIDLE) (COMMENT unary_operator "=>" "." MINUS) (COMMENT unary_operator "=>" "." PLUS) (COMMENT unary_operator "=>" "." STAR) (COMMENT unary_operator "=>" "." AMPERSAND) (COMMENT unary_expression "=>" "." SIZEOF LPAREN type_name RPAREN) (COMMENT unary_expression "=>" "." SIZEOF unary_expression) (COMMENT unary_expression "=>" "." unary_operator cast_expression) (COMMENT unary_expression "=>" "." DEC_OP unary_expression) (COMMENT unary_expression "=>" "." INC_OP unary_expression) (COMMENT unary_expression "=>" "." postfix_expression) (COMMENT postfix_expression "=>" "." postfix_expression DEC_OP) (COMMENT postfix_expression "=>" "." postfix_expression INC_OP) (COMMENT postfix_expression "=>" "." postfix_expression PTR_OP IDENTIFIER) (COMMENT postfix_expression "=>" "." postfix_expression DOT IDENTIFIER) (COMMENT postfix_expression "=>" "." postfix_expression LPAREN argument_expression_list RPAREN) (COMMENT postfix_expression "=>" "." postfix_expression LPAREN RPAREN) (COMMENT postfix_expression "=>" "." postfix_expression LBRACK expression RBRACK) (COMMENT postfix_expression "=>" "." primary_expression) (COMMENT primary_expression "=>" "." LPAREN expression RPAREN) (COMMENT primary_expression "=>" "." STRING_LITERAL) (COMMENT primary_expression "=>" "." CONSTANT) (COMMENT primary_expression "=>" "." IDENTIFIER) (SHIFT (IDENTIFIER) s68) (SHIFT (CONSTANT) s69) (SHIFT (STRING_LITERAL) s70) (SHIFT (SIZEOF) s71) (SHIFT (INC_OP) s72) (SHIFT (DEC_OP) s73) (SHIFT (LPAREN) s74) (SHIFT (RPAREN) s267) (SHIFT (AMPERSAND) s75) (SHIFT (STAR) s76) (SHIFT (PLUS) s77) (SHIFT (MINUS) s78) (SHIFT (TWIDLE) s79) (SHIFT (BANG) s80) (GOTO primary_expression s51) (GOTO postfix_expression s52) (GOTO unary_expression s81) (GOTO unary_operator s54) (GOTO cast_expression s55) (GOTO multiplicative_expression s56) (GOTO additive_expression s57) (GOTO shift_expression s58) (GOTO relational_expression s59) (GOTO equality_expression s60) (GOTO and_expression s61) (GOTO exclusive_or_expression s62) (GOTO inclusive_or_expression s63) (GOTO logical_and_expression s64) (GOTO logical_or_expression s65) (GOTO conditional_expression s82) (GOTO assignment_expression s83) (GOTO expression s266))
   (STATE s266 (COMMENT iteration_statement "=>" FOR LPAREN expression_statement expression_statement expression "." RPAREN statement) (COMMENT expression "=>" expression "." COMMA assignment_expression) (SHIFT (RPAREN) s269) (SHIFT (COMMA) s140))
   (STATE s267 (COMMENT jump_statement "=>" "." RETURN expression SEMICOLON) (COMMENT jump_statement "=>" "." RETURN SEMICOLON) (COMMENT jump_statement "=>" "." BREAK SEMICOLON) (COMMENT jump_statement "=>" "." CONTINUE SEMICOLON) (COMMENT jump_statement "=>" "." GOTO IDENTIFIER SEMICOLON) (COMMENT iteration_statement "=>" "." FOR LPAREN expression_statement expression_statement expression RPAREN statement) (COMMENT iteration_statement "=>" FOR LPAREN expression_statement expression_statement RPAREN "." statement) (COMMENT iteration_statement "=>" "." FOR LPAREN expression_statement expression_statement RPAREN statement) (COMMENT iteration_statement "=>" "." DO statement WHILE LPAREN expression RPAREN SEMICOLON) (COMMENT iteration_statement "=>" "." WHILE LPAREN expression RPAREN statement) (COMMENT selection_statement "=>" "." SWITCH LPAREN expression RPAREN statement) (COMMENT selection_statement "=>" "." IF LPAREN expression RPAREN statement ELSE statement) (COMMENT selection_statement "=>" "." IF LPAREN expression RPAREN statement) (COMMENT expression_statement "=>" "." expression SEMICOLON) (COMMENT expression_statement "=>" "." SEMICOLON) (COMMENT compound_statement "=>" "." LCURLY declaration_list statement_list RCURLY) (COMMENT compound_statement "=>" "." LCURLY declaration_list RCURLY) (COMMENT compound_statement "=>" "." LCURLY statement_list RCURLY) (COMMENT compound_statement "=>" "." LCURLY RCURLY) (COMMENT labeled_statement "=>" "." DEFAULT COLON statement) (COMMENT labeled_statement "=>" "." CASE constant_expression COLON statement) (COMMENT labeled_statement "=>" "." IDENTIFIER COLON statement) (COMMENT statement "=>" "." jump_statement) (COMMENT statement "=>" "." iteration_statement) (COMMENT statement "=>" "." selection_statement) (COMMENT statement "=>" "." expression_statement) (COMMENT statement "=>" "." compound_statement) (COMMENT statement "=>" "." labeled_statement) (COMMENT expression "=>" "." expression COMMA assignment_expression) (COMMENT expression "=>" "." assignment_expression) (COMMENT assignment_expression "=>" "." unary_expression assignment_operator assignment_expression) (COMMENT assignment_expression "=>" "." conditional_expression) (COMMENT conditional_expression "=>" "." logical_or_expression QMARK expression COLON conditional_expression) (COMMENT conditional_expression "=>" "." logical_or_expression) (COMMENT logical_or_expression "=>" "." logical_or_expression OR_OP logical_and_expression) (COMMENT logical_or_expression "=>" "." logical_and_expression) (COMMENT logical_and_expression "=>" "." logical_and_expression AND_OP inclusive_or_expression) (COMMENT logical_and_expression "=>" "." inclusive_or_expression) (COMMENT inclusive_or_expression "=>" "." inclusive_or_expression PIPE exclusive_or_expression) (COMMENT inclusive_or_expression "=>" "." exclusive_or_expression) (COMMENT exclusive_or_expression "=>" "." exclusive_or_expression CARROT and_expression) (COMMENT exclusive_or_expression "=>" "." and_expression) (COMMENT and_expression "=>" "." and_expression AMPERSAND equality_expression) (COMMENT and_expression "=>" "." equality_expression) (COMMENT equality_expression "=>" "." equality_expression NE_OP relational_expression) (COMMENT equality_expression "=>" "." equality_expression EQ_OP relational_expression) (COMMENT equality_expression "=>" "." relational_expression) (COMMENT relational_expression "=>" "." relational_expression GE_OP shift_expression) (COMMENT relational_expression "=>" "." relational_expression LE_OP shift_expression) (COMMENT relational_expression "=>" "." relational_expression GREATER_OP shift_expression) (COMMENT relational_expression "=>" "." relational_expression LESS_OP shift_expression) (COMMENT relational_expression "=>" "." shift_expression) (COMMENT shift_expression "=>" "." shift_expression RIGHT_OP additive_expression) (COMMENT shift_expression "=>" "." shift_expression LEFT_OP additive_expression) (COMMENT shift_expression "=>" "." additive_expression) (COMMENT additive_expression "=>" "." additive_expression MINUS multiplicative_expression) (COMMENT additive_expression "=>" "." additive_expression PLUS multiplicative_expression) (COMMENT additive_expression "=>" "." multiplicative_expression) (COMMENT multiplicative_expression "=>" "." multiplicative_expression AMPERSAND cast_expression) (COMMENT multiplicative_expression "=>" "." multiplicative_expression FORWARD_SLASH cast_expression) (COMMENT multiplicative_expression "=>" "." multiplicative_expression STAR cast_expression) (COMMENT multiplicative_expression "=>" "." cast_expression) (COMMENT cast_expression "=>" "." LPAREN type_name RPAREN cast_expression) (COMMENT cast_expression "=>" "." unary_expression) (COMMENT unary_operator "=>" "." BANG) (COMMENT unary_operator "=>" "." TWIDLE) (COMMENT unary_operator "=>" "." MINUS) (COMMENT unary_operator "=>" "." PLUS) (COMMENT unary_operator "=>" "." STAR) (COMMENT unary_operator "=>" "." AMPERSAND) (COMMENT unary_expression "=>" "." SIZEOF LPAREN type_name RPAREN) (COMMENT unary_expression "=>" "." SIZEOF unary_expression) (COMMENT unary_expression "=>" "." unary_operator cast_expression) (COMMENT unary_expression "=>" "." DEC_OP unary_expression) (COMMENT unary_expression "=>" "." INC_OP unary_expression) (COMMENT unary_expression "=>" "." postfix_expression) (COMMENT postfix_expression "=>" "." postfix_expression DEC_OP) (COMMENT postfix_expression "=>" "." postfix_expression INC_OP) (COMMENT postfix_expression "=>" "." postfix_expression PTR_OP IDENTIFIER) (COMMENT postfix_expression "=>" "." postfix_expression DOT IDENTIFIER) (COMMENT postfix_expression "=>" "." postfix_expression LPAREN argument_expression_list RPAREN) (COMMENT postfix_expression "=>" "." postfix_expression LPAREN RPAREN) (COMMENT postfix_expression "=>" "." postfix_expression LBRACK expression RBRACK) (COMMENT postfix_expression "=>" "." primary_expression) (COMMENT primary_expression "=>" "." LPAREN expression RPAREN) (COMMENT primary_expression "=>" "." STRING_LITERAL) (COMMENT primary_expression "=>" "." CONSTANT) (COMMENT primary_expression "=>" "." IDENTIFIER) (SHIFT (IDENTIFIER) s242) (SHIFT (CONSTANT) s69) (SHIFT (STRING_LITERAL) s70) (SHIFT (SIZEOF) s71) (SHIFT (INC_OP) s72) (SHIFT (DEC_OP) s73) (SHIFT (CASE) s243) (SHIFT (DEFAULT) s244) (SHIFT (IF) s245) (SHIFT (SWITCH) s246) (SHIFT (WHILE) s247) (SHIFT (DO) s248) (SHIFT (FOR) s249) (SHIFT (GOTO) s250) (SHIFT (CONTINUE) s251) (SHIFT (BREAK) s252) (SHIFT (RETURN) s253) (SHIFT (LPAREN) s74) (SHIFT (LCURLY) s231) (SHIFT (AMPERSAND) s75) (SHIFT (STAR) s76) (SHIFT (PLUS) s77) (SHIFT (MINUS) s78) (SHIFT (TWIDLE) s79) (SHIFT (BANG) s80) (SHIFT (SEMICOLON) s255) (GOTO primary_expression s51) (GOTO postfix_expression s52) (GOTO unary_expression s81) (GOTO unary_operator s54) (GOTO cast_expression s55) (GOTO multiplicative_expression s56) (GOTO additive_expression s57) (GOTO shift_expression s58) (GOTO relational_expression s59) (GOTO equality_expression s60) (GOTO and_expression s61) (GOTO exclusive_or_expression s62) (GOTO inclusive_or_expression s63) (GOTO logical_and_expression s64) (GOTO logical_or_expression s65) (GOTO conditional_expression s82) (GOTO assignment_expression s83) (GOTO expression s232) (GOTO statement s268) (GOTO labeled_statement s234) (GOTO compound_statement s235) (GOTO expression_statement s238) (GOTO selection_statement s239) (GOTO iteration_statement s240) (GOTO jump_statement s241))
   (STATE s268 (COMMENT iteration_statement "=>" FOR LPAREN expression_statement expression_statement RPAREN statement ".") (REDUCE () r198))
   (STATE s269 (COMMENT jump_statement "=>" "." RETURN expression SEMICOLON) (COMMENT jump_statement "=>" "." RETURN SEMICOLON) (COMMENT jump_statement "=>" "." BREAK SEMICOLON) (COMMENT jump_statement "=>" "." CONTINUE SEMICOLON) (COMMENT jump_statement "=>" "." GOTO IDENTIFIER SEMICOLON) (COMMENT iteration_statement "=>" FOR LPAREN expression_statement expression_statement expression RPAREN "." statement) (COMMENT iteration_statement "=>" "." FOR LPAREN expression_statement expression_statement expression RPAREN statement) (COMMENT iteration_statement "=>" "." FOR LPAREN expression_statement expression_statement RPAREN statement) (COMMENT iteration_statement "=>" "." DO statement WHILE LPAREN expression RPAREN SEMICOLON) (COMMENT iteration_statement "=>" "." WHILE LPAREN expression RPAREN statement) (COMMENT selection_statement "=>" "." SWITCH LPAREN expression RPAREN statement) (COMMENT selection_statement "=>" "." IF LPAREN expression RPAREN statement ELSE statement) (COMMENT selection_statement "=>" "." IF LPAREN expression RPAREN statement) (COMMENT expression_statement "=>" "." expression SEMICOLON) (COMMENT expression_statement "=>" "." SEMICOLON) (COMMENT compound_statement "=>" "." LCURLY declaration_list statement_list RCURLY) (COMMENT compound_statement "=>" "." LCURLY declaration_list RCURLY) (COMMENT compound_statement "=>" "." LCURLY statement_list RCURLY) (COMMENT compound_statement "=>" "." LCURLY RCURLY) (COMMENT labeled_statement "=>" "." DEFAULT COLON statement) (COMMENT labeled_statement "=>" "." CASE constant_expression COLON statement) (COMMENT labeled_statement "=>" "." IDENTIFIER COLON statement) (COMMENT statement "=>" "." jump_statement) (COMMENT statement "=>" "." iteration_statement) (COMMENT statement "=>" "." selection_statement) (COMMENT statement "=>" "." expression_statement) (COMMENT statement "=>" "." compound_statement) (COMMENT statement "=>" "." labeled_statement) (COMMENT expression "=>" "." expression COMMA assignment_expression) (COMMENT expression "=>" "." assignment_expression) (COMMENT assignment_expression "=>" "." unary_expression assignment_operator assignment_expression) (COMMENT assignment_expression "=>" "." conditional_expression) (COMMENT conditional_expression "=>" "." logical_or_expression QMARK expression COLON conditional_expression) (COMMENT conditional_expression "=>" "." logical_or_expression) (COMMENT logical_or_expression "=>" "." logical_or_expression OR_OP logical_and_expression) (COMMENT logical_or_expression "=>" "." logical_and_expression) (COMMENT logical_and_expression "=>" "." logical_and_expression AND_OP inclusive_or_expression) (COMMENT logical_and_expression "=>" "." inclusive_or_expression) (COMMENT inclusive_or_expression "=>" "." inclusive_or_expression PIPE exclusive_or_expression) (COMMENT inclusive_or_expression "=>" "." exclusive_or_expression) (COMMENT exclusive_or_expression "=>" "." exclusive_or_expression CARROT and_expression) (COMMENT exclusive_or_expression "=>" "." and_expression) (COMMENT and_expression "=>" "." and_expression AMPERSAND equality_expression) (COMMENT and_expression "=>" "." equality_expression) (COMMENT equality_expression "=>" "." equality_expression NE_OP relational_expression) (COMMENT equality_expression "=>" "." equality_expression EQ_OP relational_expression) (COMMENT equality_expression "=>" "." relational_expression) (COMMENT relational_expression "=>" "." relational_expression GE_OP shift_expression) (COMMENT relational_expression "=>" "." relational_expression LE_OP shift_expression) (COMMENT relational_expression "=>" "." relational_expression GREATER_OP shift_expression) (COMMENT relational_expression "=>" "." relational_expression LESS_OP shift_expression) (COMMENT relational_expression "=>" "." shift_expression) (COMMENT shift_expression "=>" "." shift_expression RIGHT_OP additive_expression) (COMMENT shift_expression "=>" "." shift_expression LEFT_OP additive_expression) (COMMENT shift_expression "=>" "." additive_expression) (COMMENT additive_expression "=>" "." additive_expression MINUS multiplicative_expression) (COMMENT additive_expression "=>" "." additive_expression PLUS multiplicative_expression) (COMMENT additive_expression "=>" "." multiplicative_expression) (COMMENT multiplicative_expression "=>" "." multiplicative_expression AMPERSAND cast_expression) (COMMENT multiplicative_expression "=>" "." multiplicative_expression FORWARD_SLASH cast_expression) (COMMENT multiplicative_expression "=>" "." multiplicative_expression STAR cast_expression) (COMMENT multiplicative_expression "=>" "." cast_expression) (COMMENT cast_expression "=>" "." LPAREN type_name RPAREN cast_expression) (COMMENT cast_expression "=>" "." unary_expression) (COMMENT unary_operator "=>" "." BANG) (COMMENT unary_operator "=>" "." TWIDLE) (COMMENT unary_operator "=>" "." MINUS) (COMMENT unary_operator "=>" "." PLUS) (COMMENT unary_operator "=>" "." STAR) (COMMENT unary_operator "=>" "." AMPERSAND) (COMMENT unary_expression "=>" "." SIZEOF LPAREN type_name RPAREN) (COMMENT unary_expression "=>" "." SIZEOF unary_expression) (COMMENT unary_expression "=>" "." unary_operator cast_expression) (COMMENT unary_expression "=>" "." DEC_OP unary_expression) (COMMENT unary_expression "=>" "." INC_OP unary_expression) (COMMENT unary_expression "=>" "." postfix_expression) (COMMENT postfix_expression "=>" "." postfix_expression DEC_OP) (COMMENT postfix_expression "=>" "." postfix_expression INC_OP) (COMMENT postfix_expression "=>" "." postfix_expression PTR_OP IDENTIFIER) (COMMENT postfix_expression "=>" "." postfix_expression DOT IDENTIFIER) (COMMENT postfix_expression "=>" "." postfix_expression LPAREN argument_expression_list RPAREN) (COMMENT postfix_expression "=>" "." postfix_expression LPAREN RPAREN) (COMMENT postfix_expression "=>" "." postfix_expression LBRACK expression RBRACK) (COMMENT postfix_expression "=>" "." primary_expression) (COMMENT primary_expression "=>" "." LPAREN expression RPAREN) (COMMENT primary_expression "=>" "." STRING_LITERAL) (COMMENT primary_expression "=>" "." CONSTANT) (COMMENT primary_expression "=>" "." IDENTIFIER) (SHIFT (IDENTIFIER) s242) (SHIFT (CONSTANT) s69) (SHIFT (STRING_LITERAL) s70) (SHIFT (SIZEOF) s71) (SHIFT (INC_OP) s72) (SHIFT (DEC_OP) s73) (SHIFT (CASE) s243) (SHIFT (DEFAULT) s244) (SHIFT (IF) s245) (SHIFT (SWITCH) s246) (SHIFT (WHILE) s247) (SHIFT (DO) s248) (SHIFT (FOR) s249) (SHIFT (GOTO) s250) (SHIFT (CONTINUE) s251) (SHIFT (BREAK) s252) (SHIFT (RETURN) s253) (SHIFT (LPAREN) s74) (SHIFT (LCURLY) s231) (SHIFT (AMPERSAND) s75) (SHIFT (STAR) s76) (SHIFT (PLUS) s77) (SHIFT (MINUS) s78) (SHIFT (TWIDLE) s79) (SHIFT (BANG) s80) (SHIFT (SEMICOLON) s255) (GOTO primary_expression s51) (GOTO postfix_expression s52) (GOTO unary_expression s81) (GOTO unary_operator s54) (GOTO cast_expression s55) (GOTO multiplicative_expression s56) (GOTO additive_expression s57) (GOTO shift_expression s58) (GOTO relational_expression s59) (GOTO equality_expression s60) (GOTO and_expression s61) (GOTO exclusive_or_expression s62) (GOTO inclusive_or_expression s63) (GOTO logical_and_expression s64) (GOTO logical_or_expression s65) (GOTO conditional_expression s82) (GOTO assignment_expression s83) (GOTO expression s232) (GOTO statement s270) (GOTO labeled_statement s234) (GOTO compound_statement s235) (GOTO expression_statement s238) (GOTO selection_statement s239) (GOTO iteration_statement s240) (GOTO jump_statement s241))
   (STATE s270 (COMMENT iteration_statement "=>" FOR LPAREN expression_statement expression_statement expression RPAREN statement ".") (REDUCE () r199))
   (STATE s271 (COMMENT iteration_statement "=>" DO statement "." WHILE LPAREN expression RPAREN SEMICOLON) (SHIFT (WHILE) s272))
   (STATE s272 (COMMENT iteration_statement "=>" DO statement WHILE "." LPAREN expression RPAREN SEMICOLON) (SHIFT (LPAREN) s273))
   (STATE s273 (COMMENT iteration_statement "=>" DO statement WHILE LPAREN "." expression RPAREN SEMICOLON) (COMMENT expression "=>" "." expression COMMA assignment_expression) (COMMENT expression "=>" "." assignment_expression) (COMMENT assignment_expression "=>" "." unary_expression assignment_operator assignment_expression) (COMMENT assignment_expression "=>" "." conditional_expression) (COMMENT conditional_expression "=>" "." logical_or_expression QMARK expression COLON conditional_expression) (COMMENT conditional_expression "=>" "." logical_or_expression) (COMMENT logical_or_expression "=>" "." logical_or_expression OR_OP logical_and_expression) (COMMENT logical_or_expression "=>" "." logical_and_expression) (COMMENT logical_and_expression "=>" "." logical_and_expression AND_OP inclusive_or_expression) (COMMENT logical_and_expression "=>" "." inclusive_or_expression) (COMMENT inclusive_or_expression "=>" "." inclusive_or_expression PIPE exclusive_or_expression) (COMMENT inclusive_or_expression "=>" "." exclusive_or_expression) (COMMENT exclusive_or_expression "=>" "." exclusive_or_expression CARROT and_expression) (COMMENT exclusive_or_expression "=>" "." and_expression) (COMMENT and_expression "=>" "." and_expression AMPERSAND equality_expression) (COMMENT and_expression "=>" "." equality_expression) (COMMENT equality_expression "=>" "." equality_expression NE_OP relational_expression) (COMMENT equality_expression "=>" "." equality_expression EQ_OP relational_expression) (COMMENT equality_expression "=>" "." relational_expression) (COMMENT relational_expression "=>" "." relational_expression GE_OP shift_expression) (COMMENT relational_expression "=>" "." relational_expression LE_OP shift_expression) (COMMENT relational_expression "=>" "." relational_expression GREATER_OP shift_expression) (COMMENT relational_expression "=>" "." relational_expression LESS_OP shift_expression) (COMMENT relational_expression "=>" "." shift_expression) (COMMENT shift_expression "=>" "." shift_expression RIGHT_OP additive_expression) (COMMENT shift_expression "=>" "." shift_expression LEFT_OP additive_expression) (COMMENT shift_expression "=>" "." additive_expression) (COMMENT additive_expression "=>" "." additive_expression MINUS multiplicative_expression) (COMMENT additive_expression "=>" "." additive_expression PLUS multiplicative_expression) (COMMENT additive_expression "=>" "." multiplicative_expression) (COMMENT multiplicative_expression "=>" "." multiplicative_expression AMPERSAND cast_expression) (COMMENT multiplicative_expression "=>" "." multiplicative_expression FORWARD_SLASH cast_expression) (COMMENT multiplicative_expression "=>" "." multiplicative_expression STAR cast_expression) (COMMENT multiplicative_expression "=>" "." cast_expression) (COMMENT cast_expression "=>" "." LPAREN type_name RPAREN cast_expression) (COMMENT cast_expression "=>" "." unary_expression) (COMMENT unary_operator "=>" "." BANG) (COMMENT unary_operator "=>" "." TWIDLE) (COMMENT unary_operator "=>" "." MINUS) (COMMENT unary_operator "=>" "." PLUS) (COMMENT unary_operator "=>" "." STAR) (COMMENT unary_operator "=>" "." AMPERSAND) (COMMENT unary_expression "=>" "." SIZEOF LPAREN type_name RPAREN) (COMMENT unary_expression "=>" "." SIZEOF unary_expression) (COMMENT unary_expression "=>" "." unary_operator cast_expression) (COMMENT unary_expression "=>" "." DEC_OP unary_expression) (COMMENT unary_expression "=>" "." INC_OP unary_expression) (COMMENT unary_expression "=>" "." postfix_expression) (COMMENT postfix_expression "=>" "." postfix_expression DEC_OP) (COMMENT postfix_expression "=>" "." postfix_expression INC_OP) (COMMENT postfix_expression "=>" "." postfix_expression PTR_OP IDENTIFIER) (COMMENT postfix_expression "=>" "." postfix_expression DOT IDENTIFIER) (COMMENT postfix_expression "=>" "." postfix_expression LPAREN argument_expression_list RPAREN) (COMMENT postfix_expression "=>" "." postfix_expression LPAREN RPAREN) (COMMENT postfix_expression "=>" "." postfix_expression LBRACK expression RBRACK) (COMMENT postfix_expression "=>" "." primary_expression) (COMMENT primary_expression "=>" "." LPAREN expression RPAREN) (COMMENT primary_expression "=>" "." STRING_LITERAL) (COMMENT primary_expression "=>" "." CONSTANT) (COMMENT primary_expression "=>" "." IDENTIFIER) (SHIFT (IDENTIFIER) s68) (SHIFT (CONSTANT) s69) (SHIFT (STRING_LITERAL) s70) (SHIFT (SIZEOF) s71) (SHIFT (INC_OP) s72) (SHIFT (DEC_OP) s73) (SHIFT (LPAREN) s74) (SHIFT (AMPERSAND) s75) (SHIFT (STAR) s76) (SHIFT (PLUS) s77) (SHIFT (MINUS) s78) (SHIFT (TWIDLE) s79) (SHIFT (BANG) s80) (GOTO primary_expression s51) (GOTO postfix_expression s52) (GOTO unary_expression s81) (GOTO unary_operator s54) (GOTO cast_expression s55) (GOTO multiplicative_expression s56) (GOTO additive_expression s57) (GOTO shift_expression s58) (GOTO relational_expression s59) (GOTO equality_expression s60) (GOTO and_expression s61) (GOTO exclusive_or_expression s62) (GOTO inclusive_or_expression s63) (GOTO logical_and_expression s64) (GOTO logical_or_expression s65) (GOTO conditional_expression s82) (GOTO assignment_expression s83) (GOTO expression s274))
   (STATE s274 (COMMENT iteration_statement "=>" DO statement WHILE LPAREN expression "." RPAREN SEMICOLON) (COMMENT expression "=>" expression "." COMMA assignment_expression) (SHIFT (RPAREN) s275) (SHIFT (COMMA) s140))
   (STATE s275 (COMMENT iteration_statement "=>" DO statement WHILE LPAREN expression RPAREN "." SEMICOLON) (SHIFT (SEMICOLON) s276))
   (STATE s276 (COMMENT iteration_statement "=>" DO statement WHILE LPAREN expression RPAREN SEMICOLON ".") (REDUCE () r197))
   (STATE s277 (COMMENT iteration_statement "=>" WHILE LPAREN "." expression RPAREN statement) (COMMENT expression "=>" "." expression COMMA assignment_expression) (COMMENT expression "=>" "." assignment_expression) (COMMENT assignment_expression "=>" "." unary_expression assignment_operator assignment_expression) (COMMENT assignment_expression "=>" "." conditional_expression) (COMMENT conditional_expression "=>" "." logical_or_expression QMARK expression COLON conditional_expression) (COMMENT conditional_expression "=>" "." logical_or_expression) (COMMENT logical_or_expression "=>" "." logical_or_expression OR_OP logical_and_expression) (COMMENT logical_or_expression "=>" "." logical_and_expression) (COMMENT logical_and_expression "=>" "." logical_and_expression AND_OP inclusive_or_expression) (COMMENT logical_and_expression "=>" "." inclusive_or_expression) (COMMENT inclusive_or_expression "=>" "." inclusive_or_expression PIPE exclusive_or_expression) (COMMENT inclusive_or_expression "=>" "." exclusive_or_expression) (COMMENT exclusive_or_expression "=>" "." exclusive_or_expression CARROT and_expression) (COMMENT exclusive_or_expression "=>" "." and_expression) (COMMENT and_expression "=>" "." and_expression AMPERSAND equality_expression) (COMMENT and_expression "=>" "." equality_expression) (COMMENT equality_expression "=>" "." equality_expression NE_OP relational_expression) (COMMENT equality_expression "=>" "." equality_expression EQ_OP relational_expression) (COMMENT equality_expression "=>" "." relational_expression) (COMMENT relational_expression "=>" "." relational_expression GE_OP shift_expression) (COMMENT relational_expression "=>" "." relational_expression LE_OP shift_expression) (COMMENT relational_expression "=>" "." relational_expression GREATER_OP shift_expression) (COMMENT relational_expression "=>" "." relational_expression LESS_OP shift_expression) (COMMENT relational_expression "=>" "." shift_expression) (COMMENT shift_expression "=>" "." shift_expression RIGHT_OP additive_expression) (COMMENT shift_expression "=>" "." shift_expression LEFT_OP additive_expression) (COMMENT shift_expression "=>" "." additive_expression) (COMMENT additive_expression "=>" "." additive_expression MINUS multiplicative_expression) (COMMENT additive_expression "=>" "." additive_expression PLUS multiplicative_expression) (COMMENT additive_expression "=>" "." multiplicative_expression) (COMMENT multiplicative_expression "=>" "." multiplicative_expression AMPERSAND cast_expression) (COMMENT multiplicative_expression "=>" "." multiplicative_expression FORWARD_SLASH cast_expression) (COMMENT multiplicative_expression "=>" "." multiplicative_expression STAR cast_expression) (COMMENT multiplicative_expression "=>" "." cast_expression) (COMMENT cast_expression "=>" "." LPAREN type_name RPAREN cast_expression) (COMMENT cast_expression "=>" "." unary_expression) (COMMENT unary_operator "=>" "." BANG) (COMMENT unary_operator "=>" "." TWIDLE) (COMMENT unary_operator "=>" "." MINUS) (COMMENT unary_operator "=>" "." PLUS) (COMMENT unary_operator "=>" "." STAR) (COMMENT unary_operator "=>" "." AMPERSAND) (COMMENT unary_expression "=>" "." SIZEOF LPAREN type_name RPAREN) (COMMENT unary_expression "=>" "." SIZEOF unary_expression) (COMMENT unary_expression "=>" "." unary_operator cast_expression) (COMMENT unary_expression "=>" "." DEC_OP unary_expression) (COMMENT unary_expression "=>" "." INC_OP unary_expression) (COMMENT unary_expression "=>" "." postfix_expression) (COMMENT postfix_expression "=>" "." postfix_expression DEC_OP) (COMMENT postfix_expression "=>" "." postfix_expression INC_OP) (COMMENT postfix_expression "=>" "." postfix_expression PTR_OP IDENTIFIER) (COMMENT postfix_expression "=>" "." postfix_expression DOT IDENTIFIER) (COMMENT postfix_expression "=>" "." postfix_expression LPAREN argument_expression_list RPAREN) (COMMENT postfix_expression "=>" "." postfix_expression LPAREN RPAREN) (COMMENT postfix_expression "=>" "." postfix_expression LBRACK expression RBRACK) (COMMENT postfix_expression "=>" "." primary_expression) (COMMENT primary_expression "=>" "." LPAREN expression RPAREN) (COMMENT primary_expression "=>" "." STRING_LITERAL) (COMMENT primary_expression "=>" "." CONSTANT) (COMMENT primary_expression "=>" "." IDENTIFIER) (SHIFT (IDENTIFIER) s68) (SHIFT (CONSTANT) s69) (SHIFT (STRING_LITERAL) s70) (SHIFT (SIZEOF) s71) (SHIFT (INC_OP) s72) (SHIFT (DEC_OP) s73) (SHIFT (LPAREN) s74) (SHIFT (AMPERSAND) s75) (SHIFT (STAR) s76) (SHIFT (PLUS) s77) (SHIFT (MINUS) s78) (SHIFT (TWIDLE) s79) (SHIFT (BANG) s80) (GOTO primary_expression s51) (GOTO postfix_expression s52) (GOTO unary_expression s81) (GOTO unary_operator s54) (GOTO cast_expression s55) (GOTO multiplicative_expression s56) (GOTO additive_expression s57) (GOTO shift_expression s58) (GOTO relational_expression s59) (GOTO equality_expression s60) (GOTO and_expression s61) (GOTO exclusive_or_expression s62) (GOTO inclusive_or_expression s63) (GOTO logical_and_expression s64) (GOTO logical_or_expression s65) (GOTO conditional_expression s82) (GOTO assignment_expression s83) (GOTO expression s278))
   (STATE s278 (COMMENT iteration_statement "=>" WHILE LPAREN expression "." RPAREN statement) (COMMENT expression "=>" expression "." COMMA assignment_expression) (SHIFT (RPAREN) s279) (SHIFT (COMMA) s140))
   (STATE s279 (COMMENT jump_statement "=>" "." RETURN expression SEMICOLON) (COMMENT jump_statement "=>" "." RETURN SEMICOLON) (COMMENT jump_statement "=>" "." BREAK SEMICOLON) (COMMENT jump_statement "=>" "." CONTINUE SEMICOLON) (COMMENT jump_statement "=>" "." GOTO IDENTIFIER SEMICOLON) (COMMENT iteration_statement "=>" "." FOR LPAREN expression_statement expression_statement expression RPAREN statement) (COMMENT iteration_statement "=>" "." FOR LPAREN expression_statement expression_statement RPAREN statement) (COMMENT iteration_statement "=>" "." DO statement WHILE LPAREN expression RPAREN SEMICOLON) (COMMENT iteration_statement "=>" WHILE LPAREN expression RPAREN "." statement) (COMMENT iteration_statement "=>" "." WHILE LPAREN expression RPAREN statement) (COMMENT selection_statement "=>" "." SWITCH LPAREN expression RPAREN statement) (COMMENT selection_statement "=>" "." IF LPAREN expression RPAREN statement ELSE statement) (COMMENT selection_statement "=>" "." IF LPAREN expression RPAREN statement) (COMMENT expression_statement "=>" "." expression SEMICOLON) (COMMENT expression_statement "=>" "." SEMICOLON) (COMMENT compound_statement "=>" "." LCURLY declaration_list statement_list RCURLY) (COMMENT compound_statement "=>" "." LCURLY declaration_list RCURLY) (COMMENT compound_statement "=>" "." LCURLY statement_list RCURLY) (COMMENT compound_statement "=>" "." LCURLY RCURLY) (COMMENT labeled_statement "=>" "." DEFAULT COLON statement) (COMMENT labeled_statement "=>" "." CASE constant_expression COLON statement) (COMMENT labeled_statement "=>" "." IDENTIFIER COLON statement) (COMMENT statement "=>" "." jump_statement) (COMMENT statement "=>" "." iteration_statement) (COMMENT statement "=>" "." selection_statement) (COMMENT statement "=>" "." expression_statement) (COMMENT statement "=>" "." compound_statement) (COMMENT statement "=>" "." labeled_statement) (COMMENT expression "=>" "." expression COMMA assignment_expression) (COMMENT expression "=>" "." assignment_expression) (COMMENT assignment_expression "=>" "." unary_expression assignment_operator assignment_expression) (COMMENT assignment_expression "=>" "." conditional_expression) (COMMENT conditional_expression "=>" "." logical_or_expression QMARK expression COLON conditional_expression) (COMMENT conditional_expression "=>" "." logical_or_expression) (COMMENT logical_or_expression "=>" "." logical_or_expression OR_OP logical_and_expression) (COMMENT logical_or_expression "=>" "." logical_and_expression) (COMMENT logical_and_expression "=>" "." logical_and_expression AND_OP inclusive_or_expression) (COMMENT logical_and_expression "=>" "." inclusive_or_expression) (COMMENT inclusive_or_expression "=>" "." inclusive_or_expression PIPE exclusive_or_expression) (COMMENT inclusive_or_expression "=>" "." exclusive_or_expression) (COMMENT exclusive_or_expression "=>" "." exclusive_or_expression CARROT and_expression) (COMMENT exclusive_or_expression "=>" "." and_expression) (COMMENT and_expression "=>" "." and_expression AMPERSAND equality_expression) (COMMENT and_expression "=>" "." equality_expression) (COMMENT equality_expression "=>" "." equality_expression NE_OP relational_expression) (COMMENT equality_expression "=>" "." equality_expression EQ_OP relational_expression) (COMMENT equality_expression "=>" "." relational_expression) (COMMENT relational_expression "=>" "." relational_expression GE_OP shift_expression) (COMMENT relational_expression "=>" "." relational_expression LE_OP shift_expression) (COMMENT relational_expression "=>" "." relational_expression GREATER_OP shift_expression) (COMMENT relational_expression "=>" "." relational_expression LESS_OP shift_expression) (COMMENT relational_expression "=>" "." shift_expression) (COMMENT shift_expression "=>" "." shift_expression RIGHT_OP additive_expression) (COMMENT shift_expression "=>" "." shift_expression LEFT_OP additive_expression) (COMMENT shift_expression "=>" "." additive_expression) (COMMENT additive_expression "=>" "." additive_expression MINUS multiplicative_expression) (COMMENT additive_expression "=>" "." additive_expression PLUS multiplicative_expression) (COMMENT additive_expression "=>" "." multiplicative_expression) (COMMENT multiplicative_expression "=>" "." multiplicative_expression AMPERSAND cast_expression) (COMMENT multiplicative_expression "=>" "." multiplicative_expression FORWARD_SLASH cast_expression) (COMMENT multiplicative_expression "=>" "." multiplicative_expression STAR cast_expression) (COMMENT multiplicative_expression "=>" "." cast_expression) (COMMENT cast_expression "=>" "." LPAREN type_name RPAREN cast_expression) (COMMENT cast_expression "=>" "." unary_expression) (COMMENT unary_operator "=>" "." BANG) (COMMENT unary_operator "=>" "." TWIDLE) (COMMENT unary_operator "=>" "." MINUS) (COMMENT unary_operator "=>" "." PLUS) (COMMENT unary_operator "=>" "." STAR) (COMMENT unary_operator "=>" "." AMPERSAND) (COMMENT unary_expression "=>" "." SIZEOF LPAREN type_name RPAREN) (COMMENT unary_expression "=>" "." SIZEOF unary_expression) (COMMENT unary_expression "=>" "." unary_operator cast_expression) (COMMENT unary_expression "=>" "." DEC_OP unary_expression) (COMMENT unary_expression "=>" "." INC_OP unary_expression) (COMMENT unary_expression "=>" "." postfix_expression) (COMMENT postfix_expression "=>" "." postfix_expression DEC_OP) (COMMENT postfix_expression "=>" "." postfix_expression INC_OP) (COMMENT postfix_expression "=>" "." postfix_expression PTR_OP IDENTIFIER) (COMMENT postfix_expression "=>" "." postfix_expression DOT IDENTIFIER) (COMMENT postfix_expression "=>" "." postfix_expression LPAREN argument_expression_list RPAREN) (COMMENT postfix_expression "=>" "." postfix_expression LPAREN RPAREN) (COMMENT postfix_expression "=>" "." postfix_expression LBRACK expression RBRACK) (COMMENT postfix_expression "=>" "." primary_expression) (COMMENT primary_expression "=>" "." LPAREN expression RPAREN) (COMMENT primary_expression "=>" "." STRING_LITERAL) (COMMENT primary_expression "=>" "." CONSTANT) (COMMENT primary_expression "=>" "." IDENTIFIER) (SHIFT (IDENTIFIER) s242) (SHIFT (CONSTANT) s69) (SHIFT (STRING_LITERAL) s70) (SHIFT (SIZEOF) s71) (SHIFT (INC_OP) s72) (SHIFT (DEC_OP) s73) (SHIFT (CASE) s243) (SHIFT (DEFAULT) s244) (SHIFT (IF) s245) (SHIFT (SWITCH) s246) (SHIFT (WHILE) s247) (SHIFT (DO) s248) (SHIFT (FOR) s249) (SHIFT (GOTO) s250) (SHIFT (CONTINUE) s251) (SHIFT (BREAK) s252) (SHIFT (RETURN) s253) (SHIFT (LPAREN) s74) (SHIFT (LCURLY) s231) (SHIFT (AMPERSAND) s75) (SHIFT (STAR) s76) (SHIFT (PLUS) s77) (SHIFT (MINUS) s78) (SHIFT (TWIDLE) s79) (SHIFT (BANG) s80) (SHIFT (SEMICOLON) s255) (GOTO primary_expression s51) (GOTO postfix_expression s52) (GOTO unary_expression s81) (GOTO unary_operator s54) (GOTO cast_expression s55) (GOTO multiplicative_expression s56) (GOTO additive_expression s57) (GOTO shift_expression s58) (GOTO relational_expression s59) (GOTO equality_expression s60) (GOTO and_expression s61) (GOTO exclusive_or_expression s62) (GOTO inclusive_or_expression s63) (GOTO logical_and_expression s64) (GOTO logical_or_expression s65) (GOTO conditional_expression s82) (GOTO assignment_expression s83) (GOTO expression s232) (GOTO statement s280) (GOTO labeled_statement s234) (GOTO compound_statement s235) (GOTO expression_statement s238) (GOTO selection_statement s239) (GOTO iteration_statement s240) (GOTO jump_statement s241))
   (STATE s280 (COMMENT iteration_statement "=>" WHILE LPAREN expression RPAREN statement ".") (REDUCE () r196))
   (STATE s281 (COMMENT selection_statement "=>" SWITCH LPAREN "." expression RPAREN statement) (COMMENT expression "=>" "." expression COMMA assignment_expression) (COMMENT expression "=>" "." assignment_expression) (COMMENT assignment_expression "=>" "." unary_expression assignment_operator assignment_expression) (COMMENT assignment_expression "=>" "." conditional_expression) (COMMENT conditional_expression "=>" "." logical_or_expression QMARK expression COLON conditional_expression) (COMMENT conditional_expression "=>" "." logical_or_expression) (COMMENT logical_or_expression "=>" "." logical_or_expression OR_OP logical_and_expression) (COMMENT logical_or_expression "=>" "." logical_and_expression) (COMMENT logical_and_expression "=>" "." logical_and_expression AND_OP inclusive_or_expression) (COMMENT logical_and_expression "=>" "." inclusive_or_expression) (COMMENT inclusive_or_expression "=>" "." inclusive_or_expression PIPE exclusive_or_expression) (COMMENT inclusive_or_expression "=>" "." exclusive_or_expression) (COMMENT exclusive_or_expression "=>" "." exclusive_or_expression CARROT and_expression) (COMMENT exclusive_or_expression "=>" "." and_expression) (COMMENT and_expression "=>" "." and_expression AMPERSAND equality_expression) (COMMENT and_expression "=>" "." equality_expression) (COMMENT equality_expression "=>" "." equality_expression NE_OP relational_expression) (COMMENT equality_expression "=>" "." equality_expression EQ_OP relational_expression) (COMMENT equality_expression "=>" "." relational_expression) (COMMENT relational_expression "=>" "." relational_expression GE_OP shift_expression) (COMMENT relational_expression "=>" "." relational_expression LE_OP shift_expression) (COMMENT relational_expression "=>" "." relational_expression GREATER_OP shift_expression) (COMMENT relational_expression "=>" "." relational_expression LESS_OP shift_expression) (COMMENT relational_expression "=>" "." shift_expression) (COMMENT shift_expression "=>" "." shift_expression RIGHT_OP additive_expression) (COMMENT shift_expression "=>" "." shift_expression LEFT_OP additive_expression) (COMMENT shift_expression "=>" "." additive_expression) (COMMENT additive_expression "=>" "." additive_expression MINUS multiplicative_expression) (COMMENT additive_expression "=>" "." additive_expression PLUS multiplicative_expression) (COMMENT additive_expression "=>" "." multiplicative_expression) (COMMENT multiplicative_expression "=>" "." multiplicative_expression AMPERSAND cast_expression) (COMMENT multiplicative_expression "=>" "." multiplicative_expression FORWARD_SLASH cast_expression) (COMMENT multiplicative_expression "=>" "." multiplicative_expression STAR cast_expression) (COMMENT multiplicative_expression "=>" "." cast_expression) (COMMENT cast_expression "=>" "." LPAREN type_name RPAREN cast_expression) (COMMENT cast_expression "=>" "." unary_expression) (COMMENT unary_operator "=>" "." BANG) (COMMENT unary_operator "=>" "." TWIDLE) (COMMENT unary_operator "=>" "." MINUS) (COMMENT unary_operator "=>" "." PLUS) (COMMENT unary_operator "=>" "." STAR) (COMMENT unary_operator "=>" "." AMPERSAND) (COMMENT unary_expression "=>" "." SIZEOF LPAREN type_name RPAREN) (COMMENT unary_expression "=>" "." SIZEOF unary_expression) (COMMENT unary_expression "=>" "." unary_operator cast_expression) (COMMENT unary_expression "=>" "." DEC_OP unary_expression) (COMMENT unary_expression "=>" "." INC_OP unary_expression) (COMMENT unary_expression "=>" "." postfix_expression) (COMMENT postfix_expression "=>" "." postfix_expression DEC_OP) (COMMENT postfix_expression "=>" "." postfix_expression INC_OP) (COMMENT postfix_expression "=>" "." postfix_expression PTR_OP IDENTIFIER) (COMMENT postfix_expression "=>" "." postfix_expression DOT IDENTIFIER) (COMMENT postfix_expression "=>" "." postfix_expression LPAREN argument_expression_list RPAREN) (COMMENT postfix_expression "=>" "." postfix_expression LPAREN RPAREN) (COMMENT postfix_expression "=>" "." postfix_expression LBRACK expression RBRACK) (COMMENT postfix_expression "=>" "." primary_expression) (COMMENT primary_expression "=>" "." LPAREN expression RPAREN) (COMMENT primary_expression "=>" "." STRING_LITERAL) (COMMENT primary_expression "=>" "." CONSTANT) (COMMENT primary_expression "=>" "." IDENTIFIER) (SHIFT (IDENTIFIER) s68) (SHIFT (CONSTANT) s69) (SHIFT (STRING_LITERAL) s70) (SHIFT (SIZEOF) s71) (SHIFT (INC_OP) s72) (SHIFT (DEC_OP) s73) (SHIFT (LPAREN) s74) (SHIFT (AMPERSAND) s75) (SHIFT (STAR) s76) (SHIFT (PLUS) s77) (SHIFT (MINUS) s78) (SHIFT (TWIDLE) s79) (SHIFT (BANG) s80) (GOTO primary_expression s51) (GOTO postfix_expression s52) (GOTO unary_expression s81) (GOTO unary_operator s54) (GOTO cast_expression s55) (GOTO multiplicative_expression s56) (GOTO additive_expression s57) (GOTO shift_expression s58) (GOTO relational_expression s59) (GOTO equality_expression s60) (GOTO and_expression s61) (GOTO exclusive_or_expression s62) (GOTO inclusive_or_expression s63) (GOTO logical_and_expression s64) (GOTO logical_or_expression s65) (GOTO conditional_expression s82) (GOTO assignment_expression s83) (GOTO expression s282))
   (STATE s282 (COMMENT selection_statement "=>" SWITCH LPAREN expression "." RPAREN statement) (COMMENT expression "=>" expression "." COMMA assignment_expression) (SHIFT (RPAREN) s283) (SHIFT (COMMA) s140))
   (STATE s283 (COMMENT jump_statement "=>" "." RETURN expression SEMICOLON) (COMMENT jump_statement "=>" "." RETURN SEMICOLON) (COMMENT jump_statement "=>" "." BREAK SEMICOLON) (COMMENT jump_statement "=>" "." CONTINUE SEMICOLON) (COMMENT jump_statement "=>" "." GOTO IDENTIFIER SEMICOLON) (COMMENT iteration_statement "=>" "." FOR LPAREN expression_statement expression_statement expression RPAREN statement) (COMMENT iteration_statement "=>" "." FOR LPAREN expression_statement expression_statement RPAREN statement) (COMMENT iteration_statement "=>" "." DO statement WHILE LPAREN expression RPAREN SEMICOLON) (COMMENT iteration_statement "=>" "." WHILE LPAREN expression RPAREN statement) (COMMENT selection_statement "=>" SWITCH LPAREN expression RPAREN "." statement) (COMMENT selection_statement "=>" "." SWITCH LPAREN expression RPAREN statement) (COMMENT selection_statement "=>" "." IF LPAREN expression RPAREN statement ELSE statement) (COMMENT selection_statement "=>" "." IF LPAREN expression RPAREN statement) (COMMENT expression_statement "=>" "." expression SEMICOLON) (COMMENT expression_statement "=>" "." SEMICOLON) (COMMENT compound_statement "=>" "." LCURLY declaration_list statement_list RCURLY) (COMMENT compound_statement "=>" "." LCURLY declaration_list RCURLY) (COMMENT compound_statement "=>" "." LCURLY statement_list RCURLY) (COMMENT compound_statement "=>" "." LCURLY RCURLY) (COMMENT labeled_statement "=>" "." DEFAULT COLON statement) (COMMENT labeled_statement "=>" "." CASE constant_expression COLON statement) (COMMENT labeled_statement "=>" "." IDENTIFIER COLON statement) (COMMENT statement "=>" "." jump_statement) (COMMENT statement "=>" "." iteration_statement) (COMMENT statement "=>" "." selection_statement) (COMMENT statement "=>" "." expression_statement) (COMMENT statement "=>" "." compound_statement) (COMMENT statement "=>" "." labeled_statement) (COMMENT expression "=>" "." expression COMMA assignment_expression) (COMMENT expression "=>" "." assignment_expression) (COMMENT assignment_expression "=>" "." unary_expression assignment_operator assignment_expression) (COMMENT assignment_expression "=>" "." conditional_expression) (COMMENT conditional_expression "=>" "." logical_or_expression QMARK expression COLON conditional_expression) (COMMENT conditional_expression "=>" "." logical_or_expression) (COMMENT logical_or_expression "=>" "." logical_or_expression OR_OP logical_and_expression) (COMMENT logical_or_expression "=>" "." logical_and_expression) (COMMENT logical_and_expression "=>" "." logical_and_expression AND_OP inclusive_or_expression) (COMMENT logical_and_expression "=>" "." inclusive_or_expression) (COMMENT inclusive_or_expression "=>" "." inclusive_or_expression PIPE exclusive_or_expression) (COMMENT inclusive_or_expression "=>" "." exclusive_or_expression) (COMMENT exclusive_or_expression "=>" "." exclusive_or_expression CARROT and_expression) (COMMENT exclusive_or_expression "=>" "." and_expression) (COMMENT and_expression "=>" "." and_expression AMPERSAND equality_expression) (COMMENT and_expression "=>" "." equality_expression) (COMMENT equality_expression "=>" "." equality_expression NE_OP relational_expression) (COMMENT equality_expression "=>" "." equality_expression EQ_OP relational_expression) (COMMENT equality_expression "=>" "." relational_expression) (COMMENT relational_expression "=>" "." relational_expression GE_OP shift_expression) (COMMENT relational_expression "=>" "." relational_expression LE_OP shift_expression) (COMMENT relational_expression "=>" "." relational_expression GREATER_OP shift_expression) (COMMENT relational_expression "=>" "." relational_expression LESS_OP shift_expression) (COMMENT relational_expression "=>" "." shift_expression) (COMMENT shift_expression "=>" "." shift_expression RIGHT_OP additive_expression) (COMMENT shift_expression "=>" "." shift_expression LEFT_OP additive_expression) (COMMENT shift_expression "=>" "." additive_expression) (COMMENT additive_expression "=>" "." additive_expression MINUS multiplicative_expression) (COMMENT additive_expression "=>" "." additive_expression PLUS multiplicative_expression) (COMMENT additive_expression "=>" "." multiplicative_expression) (COMMENT multiplicative_expression "=>" "." multiplicative_expression AMPERSAND cast_expression) (COMMENT multiplicative_expression "=>" "." multiplicative_expression FORWARD_SLASH cast_expression) (COMMENT multiplicative_expression "=>" "." multiplicative_expression STAR cast_expression) (COMMENT multiplicative_expression "=>" "." cast_expression) (COMMENT cast_expression "=>" "." LPAREN type_name RPAREN cast_expression) (COMMENT cast_expression "=>" "." unary_expression) (COMMENT unary_operator "=>" "." BANG) (COMMENT unary_operator "=>" "." TWIDLE) (COMMENT unary_operator "=>" "." MINUS) (COMMENT unary_operator "=>" "." PLUS) (COMMENT unary_operator "=>" "." STAR) (COMMENT unary_operator "=>" "." AMPERSAND) (COMMENT unary_expression "=>" "." SIZEOF LPAREN type_name RPAREN) (COMMENT unary_expression "=>" "." SIZEOF unary_expression) (COMMENT unary_expression "=>" "." unary_operator cast_expression) (COMMENT unary_expression "=>" "." DEC_OP unary_expression) (COMMENT unary_expression "=>" "." INC_OP unary_expression) (COMMENT unary_expression "=>" "." postfix_expression) (COMMENT postfix_expression "=>" "." postfix_expression DEC_OP) (COMMENT postfix_expression "=>" "." postfix_expression INC_OP) (COMMENT postfix_expression "=>" "." postfix_expression PTR_OP IDENTIFIER) (COMMENT postfix_expression "=>" "." postfix_expression DOT IDENTIFIER) (COMMENT postfix_expression "=>" "." postfix_expression LPAREN argument_expression_list RPAREN) (COMMENT postfix_expression "=>" "." postfix_expression LPAREN RPAREN) (COMMENT postfix_expression "=>" "." postfix_expression LBRACK expression RBRACK) (COMMENT postfix_expression "=>" "." primary_expression) (COMMENT primary_expression "=>" "." LPAREN expression RPAREN) (COMMENT primary_expression "=>" "." STRING_LITERAL) (COMMENT primary_expression "=>" "." CONSTANT) (COMMENT primary_expression "=>" "." IDENTIFIER) (SHIFT (IDENTIFIER) s242) (SHIFT (CONSTANT) s69) (SHIFT (STRING_LITERAL) s70) (SHIFT (SIZEOF) s71) (SHIFT (INC_OP) s72) (SHIFT (DEC_OP) s73) (SHIFT (CASE) s243) (SHIFT (DEFAULT) s244) (SHIFT (IF) s245) (SHIFT (SWITCH) s246) (SHIFT (WHILE) s247) (SHIFT (DO) s248) (SHIFT (FOR) s249) (SHIFT (GOTO) s250) (SHIFT (CONTINUE) s251) (SHIFT (BREAK) s252) (SHIFT (RETURN) s253) (SHIFT (LPAREN) s74) (SHIFT (LCURLY) s231) (SHIFT (AMPERSAND) s75) (SHIFT (STAR) s76) (SHIFT (PLUS) s77) (SHIFT (MINUS) s78) (SHIFT (TWIDLE) s79) (SHIFT (BANG) s80) (SHIFT (SEMICOLON) s255) (GOTO primary_expression s51) (GOTO postfix_expression s52) (GOTO unary_expression s81) (GOTO unary_operator s54) (GOTO cast_expression s55) (GOTO multiplicative_expression s56) (GOTO additive_expression s57) (GOTO shift_expression s58) (GOTO relational_expression s59) (GOTO equality_expression s60) (GOTO and_expression s61) (GOTO exclusive_or_expression s62) (GOTO inclusive_or_expression s63) (GOTO logical_and_expression s64) (GOTO logical_or_expression s65) (GOTO conditional_expression s82) (GOTO assignment_expression s83) (GOTO expression s232) (GOTO statement s284) (GOTO labeled_statement s234) (GOTO compound_statement s235) (GOTO expression_statement s238) (GOTO selection_statement s239) (GOTO iteration_statement s240) (GOTO jump_statement s241))
   (STATE s284 (COMMENT selection_statement "=>" SWITCH LPAREN expression RPAREN statement ".") (REDUCE () r195))
   (STATE s285 (COMMENT selection_statement "=>" IF LPAREN "." expression RPAREN statement ELSE statement) (COMMENT selection_statement "=>" IF LPAREN "." expression RPAREN statement) (COMMENT expression "=>" "." expression COMMA assignment_expression) (COMMENT expression "=>" "." assignment_expression) (COMMENT assignment_expression "=>" "." unary_expression assignment_operator assignment_expression) (COMMENT assignment_expression "=>" "." conditional_expression) (COMMENT conditional_expression "=>" "." logical_or_expression QMARK expression COLON conditional_expression) (COMMENT conditional_expression "=>" "." logical_or_expression) (COMMENT logical_or_expression "=>" "." logical_or_expression OR_OP logical_and_expression) (COMMENT logical_or_expression "=>" "." logical_and_expression) (COMMENT logical_and_expression "=>" "." logical_and_expression AND_OP inclusive_or_expression) (COMMENT logical_and_expression "=>" "." inclusive_or_expression) (COMMENT inclusive_or_expression "=>" "." inclusive_or_expression PIPE exclusive_or_expression) (COMMENT inclusive_or_expression "=>" "." exclusive_or_expression) (COMMENT exclusive_or_expression "=>" "." exclusive_or_expression CARROT and_expression) (COMMENT exclusive_or_expression "=>" "." and_expression) (COMMENT and_expression "=>" "." and_expression AMPERSAND equality_expression) (COMMENT and_expression "=>" "." equality_expression) (COMMENT equality_expression "=>" "." equality_expression NE_OP relational_expression) (COMMENT equality_expression "=>" "." equality_expression EQ_OP relational_expression) (COMMENT equality_expression "=>" "." relational_expression) (COMMENT relational_expression "=>" "." relational_expression GE_OP shift_expression) (COMMENT relational_expression "=>" "." relational_expression LE_OP shift_expression) (COMMENT relational_expression "=>" "." relational_expression GREATER_OP shift_expression) (COMMENT relational_expression "=>" "." relational_expression LESS_OP shift_expression) (COMMENT relational_expression "=>" "." shift_expression) (COMMENT shift_expression "=>" "." shift_expression RIGHT_OP additive_expression) (COMMENT shift_expression "=>" "." shift_expression LEFT_OP additive_expression) (COMMENT shift_expression "=>" "." additive_expression) (COMMENT additive_expression "=>" "." additive_expression MINUS multiplicative_expression) (COMMENT additive_expression "=>" "." additive_expression PLUS multiplicative_expression) (COMMENT additive_expression "=>" "." multiplicative_expression) (COMMENT multiplicative_expression "=>" "." multiplicative_expression AMPERSAND cast_expression) (COMMENT multiplicative_expression "=>" "." multiplicative_expression FORWARD_SLASH cast_expression) (COMMENT multiplicative_expression "=>" "." multiplicative_expression STAR cast_expression) (COMMENT multiplicative_expression "=>" "." cast_expression) (COMMENT cast_expression "=>" "." LPAREN type_name RPAREN cast_expression) (COMMENT cast_expression "=>" "." unary_expression) (COMMENT unary_operator "=>" "." BANG) (COMMENT unary_operator "=>" "." TWIDLE) (COMMENT unary_operator "=>" "." MINUS) (COMMENT unary_operator "=>" "." PLUS) (COMMENT unary_operator "=>" "." STAR) (COMMENT unary_operator "=>" "." AMPERSAND) (COMMENT unary_expression "=>" "." SIZEOF LPAREN type_name RPAREN) (COMMENT unary_expression "=>" "." SIZEOF unary_expression) (COMMENT unary_expression "=>" "." unary_operator cast_expression) (COMMENT unary_expression "=>" "." DEC_OP unary_expression) (COMMENT unary_expression "=>" "." INC_OP unary_expression) (COMMENT unary_expression "=>" "." postfix_expression) (COMMENT postfix_expression "=>" "." postfix_expression DEC_OP) (COMMENT postfix_expression "=>" "." postfix_expression INC_OP) (COMMENT postfix_expression "=>" "." postfix_expression PTR_OP IDENTIFIER) (COMMENT postfix_expression "=>" "." postfix_expression DOT IDENTIFIER) (COMMENT postfix_expression "=>" "." postfix_expression LPAREN argument_expression_list RPAREN) (COMMENT postfix_expression "=>" "." postfix_expression LPAREN RPAREN) (COMMENT postfix_expression "=>" "." postfix_expression LBRACK expression RBRACK) (COMMENT postfix_expression "=>" "." primary_expression) (COMMENT primary_expression "=>" "." LPAREN expression RPAREN) (COMMENT primary_expression "=>" "." STRING_LITERAL) (COMMENT primary_expression "=>" "." CONSTANT) (COMMENT primary_expression "=>" "." IDENTIFIER) (SHIFT (IDENTIFIER) s68) (SHIFT (CONSTANT) s69) (SHIFT (STRING_LITERAL) s70) (SHIFT (SIZEOF) s71) (SHIFT (INC_OP) s72) (SHIFT (DEC_OP) s73) (SHIFT (LPAREN) s74) (SHIFT (AMPERSAND) s75) (SHIFT (STAR) s76) (SHIFT (PLUS) s77) (SHIFT (MINUS) s78) (SHIFT (TWIDLE) s79) (SHIFT (BANG) s80) (GOTO primary_expression s51) (GOTO postfix_expression s52) (GOTO unary_expression s81) (GOTO unary_operator s54) (GOTO cast_expression s55) (GOTO multiplicative_expression s56) (GOTO additive_expression s57) (GOTO shift_expression s58) (GOTO relational_expression s59) (GOTO equality_expression s60) (GOTO and_expression s61) (GOTO exclusive_or_expression s62) (GOTO inclusive_or_expression s63) (GOTO logical_and_expression s64) (GOTO logical_or_expression s65) (GOTO conditional_expression s82) (GOTO assignment_expression s83) (GOTO expression s286))
   (STATE s286 (COMMENT selection_statement "=>" IF LPAREN expression "." RPAREN statement ELSE statement) (COMMENT selection_statement "=>" IF LPAREN expression "." RPAREN statement) (COMMENT expression "=>" expression "." COMMA assignment_expression) (SHIFT (RPAREN) s287) (SHIFT (COMMA) s140))
   (STATE s287 (COMMENT jump_statement "=>" "." RETURN expression SEMICOLON) (COMMENT jump_statement "=>" "." RETURN SEMICOLON) (COMMENT jump_statement "=>" "." BREAK SEMICOLON) (COMMENT jump_statement "=>" "." CONTINUE SEMICOLON) (COMMENT jump_statement "=>" "." GOTO IDENTIFIER SEMICOLON) (COMMENT iteration_statement "=>" "." FOR LPAREN expression_statement expression_statement expression RPAREN statement) (COMMENT iteration_statement "=>" "." FOR LPAREN expression_statement expression_statement RPAREN statement) (COMMENT iteration_statement "=>" "." DO statement WHILE LPAREN expression RPAREN SEMICOLON) (COMMENT iteration_statement "=>" "." WHILE LPAREN expression RPAREN statement) (COMMENT selection_statement "=>" "." SWITCH LPAREN expression RPAREN statement) (COMMENT selection_statement "=>" IF LPAREN expression RPAREN "." statement ELSE statement) (COMMENT selection_statement "=>" "." IF LPAREN expression RPAREN statement ELSE statement) (COMMENT selection_statement "=>" IF LPAREN expression RPAREN "." statement) (COMMENT selection_statement "=>" "." IF LPAREN expression RPAREN statement) (COMMENT expression_statement "=>" "." expression SEMICOLON) (COMMENT expression_statement "=>" "." SEMICOLON) (COMMENT compound_statement "=>" "." LCURLY declaration_list statement_list RCURLY) (COMMENT compound_statement "=>" "." LCURLY declaration_list RCURLY) (COMMENT compound_statement "=>" "." LCURLY statement_list RCURLY) (COMMENT compound_statement "=>" "." LCURLY RCURLY) (COMMENT labeled_statement "=>" "." DEFAULT COLON statement) (COMMENT labeled_statement "=>" "." CASE constant_expression COLON statement) (COMMENT labeled_statement "=>" "." IDENTIFIER COLON statement) (COMMENT statement "=>" "." jump_statement) (COMMENT statement "=>" "." iteration_statement) (COMMENT statement "=>" "." selection_statement) (COMMENT statement "=>" "." expression_statement) (COMMENT statement "=>" "." compound_statement) (COMMENT statement "=>" "." labeled_statement) (COMMENT expression "=>" "." expression COMMA assignment_expression) (COMMENT expression "=>" "." assignment_expression) (COMMENT assignment_expression "=>" "." unary_expression assignment_operator assignment_expression) (COMMENT assignment_expression "=>" "." conditional_expression) (COMMENT conditional_expression "=>" "." logical_or_expression QMARK expression COLON conditional_expression) (COMMENT conditional_expression "=>" "." logical_or_expression) (COMMENT logical_or_expression "=>" "." logical_or_expression OR_OP logical_and_expression) (COMMENT logical_or_expression "=>" "." logical_and_expression) (COMMENT logical_and_expression "=>" "." logical_and_expression AND_OP inclusive_or_expression) (COMMENT logical_and_expression "=>" "." inclusive_or_expression) (COMMENT inclusive_or_expression "=>" "." inclusive_or_expression PIPE exclusive_or_expression) (COMMENT inclusive_or_expression "=>" "." exclusive_or_expression) (COMMENT exclusive_or_expression "=>" "." exclusive_or_expression CARROT and_expression) (COMMENT exclusive_or_expression "=>" "." and_expression) (COMMENT and_expression "=>" "." and_expression AMPERSAND equality_expression) (COMMENT and_expression "=>" "." equality_expression) (COMMENT equality_expression "=>" "." equality_expression NE_OP relational_expression) (COMMENT equality_expression "=>" "." equality_expression EQ_OP relational_expression) (COMMENT equality_expression "=>" "." relational_expression) (COMMENT relational_expression "=>" "." relational_expression GE_OP shift_expression) (COMMENT relational_expression "=>" "." relational_expression LE_OP shift_expression) (COMMENT relational_expression "=>" "." relational_expression GREATER_OP shift_expression) (COMMENT relational_expression "=>" "." relational_expression LESS_OP shift_expression) (COMMENT relational_expression "=>" "." shift_expression) (COMMENT shift_expression "=>" "." shift_expression RIGHT_OP additive_expression) (COMMENT shift_expression "=>" "." shift_expression LEFT_OP additive_expression) (COMMENT shift_expression "=>" "." additive_expression) (COMMENT additive_expression "=>" "." additive_expression MINUS multiplicative_expression) (COMMENT additive_expression "=>" "." additive_expression PLUS multiplicative_expression) (COMMENT additive_expression "=>" "." multiplicative_expression) (COMMENT multiplicative_expression "=>" "." multiplicative_expression AMPERSAND cast_expression) (COMMENT multiplicative_expression "=>" "." multiplicative_expression FORWARD_SLASH cast_expression) (COMMENT multiplicative_expression "=>" "." multiplicative_expression STAR cast_expression) (COMMENT multiplicative_expression "=>" "." cast_expression) (COMMENT cast_expression "=>" "." LPAREN type_name RPAREN cast_expression) (COMMENT cast_expression "=>" "." unary_expression) (COMMENT unary_operator "=>" "." BANG) (COMMENT unary_operator "=>" "." TWIDLE) (COMMENT unary_operator "=>" "." MINUS) (COMMENT unary_operator "=>" "." PLUS) (COMMENT unary_operator "=>" "." STAR) (COMMENT unary_operator "=>" "." AMPERSAND) (COMMENT unary_expression "=>" "." SIZEOF LPAREN type_name RPAREN) (COMMENT unary_expression "=>" "." SIZEOF unary_expression) (COMMENT unary_expression "=>" "." unary_operator cast_expression) (COMMENT unary_expression "=>" "." DEC_OP unary_expression) (COMMENT unary_expression "=>" "." INC_OP unary_expression) (COMMENT unary_expression "=>" "." postfix_expression) (COMMENT postfix_expression "=>" "." postfix_expression DEC_OP) (COMMENT postfix_expression "=>" "." postfix_expression INC_OP) (COMMENT postfix_expression "=>" "." postfix_expression PTR_OP IDENTIFIER) (COMMENT postfix_expression "=>" "." postfix_expression DOT IDENTIFIER) (COMMENT postfix_expression "=>" "." postfix_expression LPAREN argument_expression_list RPAREN) (COMMENT postfix_expression "=>" "." postfix_expression LPAREN RPAREN) (COMMENT postfix_expression "=>" "." postfix_expression LBRACK expression RBRACK) (COMMENT postfix_expression "=>" "." primary_expression) (COMMENT primary_expression "=>" "." LPAREN expression RPAREN) (COMMENT primary_expression "=>" "." STRING_LITERAL) (COMMENT primary_expression "=>" "." CONSTANT) (COMMENT primary_expression "=>" "." IDENTIFIER) (SHIFT (IDENTIFIER) s242) (SHIFT (CONSTANT) s69) (SHIFT (STRING_LITERAL) s70) (SHIFT (SIZEOF) s71) (SHIFT (INC_OP) s72) (SHIFT (DEC_OP) s73) (SHIFT (CASE) s243) (SHIFT (DEFAULT) s244) (SHIFT (IF) s245) (SHIFT (SWITCH) s246) (SHIFT (WHILE) s247) (SHIFT (DO) s248) (SHIFT (FOR) s249) (SHIFT (GOTO) s250) (SHIFT (CONTINUE) s251) (SHIFT (BREAK) s252) (SHIFT (RETURN) s253) (SHIFT (LPAREN) s74) (SHIFT (LCURLY) s231) (SHIFT (AMPERSAND) s75) (SHIFT (STAR) s76) (SHIFT (PLUS) s77) (SHIFT (MINUS) s78) (SHIFT (TWIDLE) s79) (SHIFT (BANG) s80) (SHIFT (SEMICOLON) s255) (GOTO primary_expression s51) (GOTO postfix_expression s52) (GOTO unary_expression s81) (GOTO unary_operator s54) (GOTO cast_expression s55) (GOTO multiplicative_expression s56) (GOTO additive_expression s57) (GOTO shift_expression s58) (GOTO relational_expression s59) (GOTO equality_expression s60) (GOTO and_expression s61) (GOTO exclusive_or_expression s62) (GOTO inclusive_or_expression s63) (GOTO logical_and_expression s64) (GOTO logical_or_expression s65) (GOTO conditional_expression s82) (GOTO assignment_expression s83) (GOTO expression s232) (GOTO statement s288) (GOTO labeled_statement s234) (GOTO compound_statement s235) (GOTO expression_statement s238) (GOTO selection_statement s239) (GOTO iteration_statement s240) (GOTO jump_statement s241))
   (STATE s288 (COMMENT selection_statement "=>" IF LPAREN expression RPAREN statement "." ELSE statement) (COMMENT selection_statement "=>" IF LPAREN expression RPAREN statement ".") (REDUCE (IDENTIFIER) r193) (REDUCE (CONSTANT) r193) (REDUCE (STRING_LITERAL) r193) (REDUCE (SIZEOF) r193) (REDUCE (INC_OP) r193) (REDUCE (DEC_OP) r193) (REDUCE (CASE) r193) (REDUCE (DEFAULT) r193) (REDUCE (IF) r193) (COMMENT (REDUCE (ELSE) r193)) (SHIFT (ELSE) s289) (REDUCE (SWITCH) r193) (REDUCE (WHILE) r193) (REDUCE (DO) r193) (REDUCE (FOR) r193) (REDUCE (GOTO) r193) (REDUCE (CONTINUE) r193) (REDUCE (BREAK) r193) (REDUCE (RETURN) r193) (REDUCE (LPAREN) r193) (REDUCE (LCURLY) r193) (REDUCE (RCURLY) r193) (REDUCE (AMPERSAND) r193) (REDUCE (STAR) r193) (REDUCE (PLUS) r193) (REDUCE (MINUS) r193) (REDUCE (TWIDLE) r193) (REDUCE (BANG) r193) (REDUCE (SEMICOLON) r193))
   (STATE s289 (COMMENT jump_statement "=>" "." RETURN expression SEMICOLON) (COMMENT jump_statement "=>" "." RETURN SEMICOLON) (COMMENT jump_statement "=>" "." BREAK SEMICOLON) (COMMENT jump_statement "=>" "." CONTINUE SEMICOLON) (COMMENT jump_statement "=>" "." GOTO IDENTIFIER SEMICOLON) (COMMENT iteration_statement "=>" "." FOR LPAREN expression_statement expression_statement expression RPAREN statement) (COMMENT iteration_statement "=>" "." FOR LPAREN expression_statement expression_statement RPAREN statement) (COMMENT iteration_statement "=>" "." DO statement WHILE LPAREN expression RPAREN SEMICOLON) (COMMENT iteration_statement "=>" "." WHILE LPAREN expression RPAREN statement) (COMMENT selection_statement "=>" "." SWITCH LPAREN expression RPAREN statement) (COMMENT selection_statement "=>" IF LPAREN expression RPAREN statement ELSE "." statement) (COMMENT selection_statement "=>" "." IF LPAREN expression RPAREN statement ELSE statement) (COMMENT selection_statement "=>" "." IF LPAREN expression RPAREN statement) (COMMENT expression_statement "=>" "." expression SEMICOLON) (COMMENT expression_statement "=>" "." SEMICOLON) (COMMENT compound_statement "=>" "." LCURLY declaration_list statement_list RCURLY) (COMMENT compound_statement "=>" "." LCURLY declaration_list RCURLY) (COMMENT compound_statement "=>" "." LCURLY statement_list RCURLY) (COMMENT compound_statement "=>" "." LCURLY RCURLY) (COMMENT labeled_statement "=>" "." DEFAULT COLON statement) (COMMENT labeled_statement "=>" "." CASE constant_expression COLON statement) (COMMENT labeled_statement "=>" "." IDENTIFIER COLON statement) (COMMENT statement "=>" "." jump_statement) (COMMENT statement "=>" "." iteration_statement) (COMMENT statement "=>" "." selection_statement) (COMMENT statement "=>" "." expression_statement) (COMMENT statement "=>" "." compound_statement) (COMMENT statement "=>" "." labeled_statement) (COMMENT expression "=>" "." expression COMMA assignment_expression) (COMMENT expression "=>" "." assignment_expression) (COMMENT assignment_expression "=>" "." unary_expression assignment_operator assignment_expression) (COMMENT assignment_expression "=>" "." conditional_expression) (COMMENT conditional_expression "=>" "." logical_or_expression QMARK expression COLON conditional_expression) (COMMENT conditional_expression "=>" "." logical_or_expression) (COMMENT logical_or_expression "=>" "." logical_or_expression OR_OP logical_and_expression) (COMMENT logical_or_expression "=>" "." logical_and_expression) (COMMENT logical_and_expression "=>" "." logical_and_expression AND_OP inclusive_or_expression) (COMMENT logical_and_expression "=>" "." inclusive_or_expression) (COMMENT inclusive_or_expression "=>" "." inclusive_or_expression PIPE exclusive_or_expression) (COMMENT inclusive_or_expression "=>" "." exclusive_or_expression) (COMMENT exclusive_or_expression "=>" "." exclusive_or_expression CARROT and_expression) (COMMENT exclusive_or_expression "=>" "." and_expression) (COMMENT and_expression "=>" "." and_expression AMPERSAND equality_expression) (COMMENT and_expression "=>" "." equality_expression) (COMMENT equality_expression "=>" "." equality_expression NE_OP relational_expression) (COMMENT equality_expression "=>" "." equality_expression EQ_OP relational_expression) (COMMENT equality_expression "=>" "." relational_expression) (COMMENT relational_expression "=>" "." relational_expression GE_OP shift_expression) (COMMENT relational_expression "=>" "." relational_expression LE_OP shift_expression) (COMMENT relational_expression "=>" "." relational_expression GREATER_OP shift_expression) (COMMENT relational_expression "=>" "." relational_expression LESS_OP shift_expression) (COMMENT relational_expression "=>" "." shift_expression) (COMMENT shift_expression "=>" "." shift_expression RIGHT_OP additive_expression) (COMMENT shift_expression "=>" "." shift_expression LEFT_OP additive_expression) (COMMENT shift_expression "=>" "." additive_expression) (COMMENT additive_expression "=>" "." additive_expression MINUS multiplicative_expression) (COMMENT additive_expression "=>" "." additive_expression PLUS multiplicative_expression) (COMMENT additive_expression "=>" "." multiplicative_expression) (COMMENT multiplicative_expression "=>" "." multiplicative_expression AMPERSAND cast_expression) (COMMENT multiplicative_expression "=>" "." multiplicative_expression FORWARD_SLASH cast_expression) (COMMENT multiplicative_expression "=>" "." multiplicative_expression STAR cast_expression) (COMMENT multiplicative_expression "=>" "." cast_expression) (COMMENT cast_expression "=>" "." LPAREN type_name RPAREN cast_expression) (COMMENT cast_expression "=>" "." unary_expression) (COMMENT unary_operator "=>" "." BANG) (COMMENT unary_operator "=>" "." TWIDLE) (COMMENT unary_operator "=>" "." MINUS) (COMMENT unary_operator "=>" "." PLUS) (COMMENT unary_operator "=>" "." STAR) (COMMENT unary_operator "=>" "." AMPERSAND) (COMMENT unary_expression "=>" "." SIZEOF LPAREN type_name RPAREN) (COMMENT unary_expression "=>" "." SIZEOF unary_expression) (COMMENT unary_expression "=>" "." unary_operator cast_expression) (COMMENT unary_expression "=>" "." DEC_OP unary_expression) (COMMENT unary_expression "=>" "." INC_OP unary_expression) (COMMENT unary_expression "=>" "." postfix_expression) (COMMENT postfix_expression "=>" "." postfix_expression DEC_OP) (COMMENT postfix_expression "=>" "." postfix_expression INC_OP) (COMMENT postfix_expression "=>" "." postfix_expression PTR_OP IDENTIFIER) (COMMENT postfix_expression "=>" "." postfix_expression DOT IDENTIFIER) (COMMENT postfix_expression "=>" "." postfix_expression LPAREN argument_expression_list RPAREN) (COMMENT postfix_expression "=>" "." postfix_expression LPAREN RPAREN) (COMMENT postfix_expression "=>" "." postfix_expression LBRACK expression RBRACK) (COMMENT postfix_expression "=>" "." primary_expression) (COMMENT primary_expression "=>" "." LPAREN expression RPAREN) (COMMENT primary_expression "=>" "." STRING_LITERAL) (COMMENT primary_expression "=>" "." CONSTANT) (COMMENT primary_expression "=>" "." IDENTIFIER) (SHIFT (IDENTIFIER) s242) (SHIFT (CONSTANT) s69) (SHIFT (STRING_LITERAL) s70) (SHIFT (SIZEOF) s71) (SHIFT (INC_OP) s72) (SHIFT (DEC_OP) s73) (SHIFT (CASE) s243) (SHIFT (DEFAULT) s244) (SHIFT (IF) s245) (SHIFT (SWITCH) s246) (SHIFT (WHILE) s247) (SHIFT (DO) s248) (SHIFT (FOR) s249) (SHIFT (GOTO) s250) (SHIFT (CONTINUE) s251) (SHIFT (BREAK) s252) (SHIFT (RETURN) s253) (SHIFT (LPAREN) s74) (SHIFT (LCURLY) s231) (SHIFT (AMPERSAND) s75) (SHIFT (STAR) s76) (SHIFT (PLUS) s77) (SHIFT (MINUS) s78) (SHIFT (TWIDLE) s79) (SHIFT (BANG) s80) (SHIFT (SEMICOLON) s255) (GOTO primary_expression s51) (GOTO postfix_expression s52) (GOTO unary_expression s81) (GOTO unary_operator s54) (GOTO cast_expression s55) (GOTO multiplicative_expression s56) (GOTO additive_expression s57) (GOTO shift_expression s58) (GOTO relational_expression s59) (GOTO equality_expression s60) (GOTO and_expression s61) (GOTO exclusive_or_expression s62) (GOTO inclusive_or_expression s63) (GOTO logical_and_expression s64) (GOTO logical_or_expression s65) (GOTO conditional_expression s82) (GOTO assignment_expression s83) (GOTO expression s232) (GOTO statement s290) (GOTO labeled_statement s234) (GOTO compound_statement s235) (GOTO expression_statement s238) (GOTO selection_statement s239) (GOTO iteration_statement s240) (GOTO jump_statement s241))
   (STATE s290 (COMMENT selection_statement "=>" IF LPAREN expression RPAREN statement ELSE statement ".") (REDUCE () r194))
   (STATE s291 (COMMENT jump_statement "=>" "." RETURN expression SEMICOLON) (COMMENT jump_statement "=>" "." RETURN SEMICOLON) (COMMENT jump_statement "=>" "." BREAK SEMICOLON) (COMMENT jump_statement "=>" "." CONTINUE SEMICOLON) (COMMENT jump_statement "=>" "." GOTO IDENTIFIER SEMICOLON) (COMMENT iteration_statement "=>" "." FOR LPAREN expression_statement expression_statement expression RPAREN statement) (COMMENT iteration_statement "=>" "." FOR LPAREN expression_statement expression_statement RPAREN statement) (COMMENT iteration_statement "=>" "." DO statement WHILE LPAREN expression RPAREN SEMICOLON) (COMMENT iteration_statement "=>" "." WHILE LPAREN expression RPAREN statement) (COMMENT selection_statement "=>" "." SWITCH LPAREN expression RPAREN statement) (COMMENT selection_statement "=>" "." IF LPAREN expression RPAREN statement ELSE statement) (COMMENT selection_statement "=>" "." IF LPAREN expression RPAREN statement) (COMMENT expression_statement "=>" "." expression SEMICOLON) (COMMENT expression_statement "=>" "." SEMICOLON) (COMMENT compound_statement "=>" "." LCURLY declaration_list statement_list RCURLY) (COMMENT compound_statement "=>" "." LCURLY declaration_list RCURLY) (COMMENT compound_statement "=>" "." LCURLY statement_list RCURLY) (COMMENT compound_statement "=>" "." LCURLY RCURLY) (COMMENT labeled_statement "=>" DEFAULT COLON "." statement) (COMMENT labeled_statement "=>" "." DEFAULT COLON statement) (COMMENT labeled_statement "=>" "." CASE constant_expression COLON statement) (COMMENT labeled_statement "=>" "." IDENTIFIER COLON statement) (COMMENT statement "=>" "." jump_statement) (COMMENT statement "=>" "." iteration_statement) (COMMENT statement "=>" "." selection_statement) (COMMENT statement "=>" "." expression_statement) (COMMENT statement "=>" "." compound_statement) (COMMENT statement "=>" "." labeled_statement) (COMMENT expression "=>" "." expression COMMA assignment_expression) (COMMENT expression "=>" "." assignment_expression) (COMMENT assignment_expression "=>" "." unary_expression assignment_operator assignment_expression) (COMMENT assignment_expression "=>" "." conditional_expression) (COMMENT conditional_expression "=>" "." logical_or_expression QMARK expression COLON conditional_expression) (COMMENT conditional_expression "=>" "." logical_or_expression) (COMMENT logical_or_expression "=>" "." logical_or_expression OR_OP logical_and_expression) (COMMENT logical_or_expression "=>" "." logical_and_expression) (COMMENT logical_and_expression "=>" "." logical_and_expression AND_OP inclusive_or_expression) (COMMENT logical_and_expression "=>" "." inclusive_or_expression) (COMMENT inclusive_or_expression "=>" "." inclusive_or_expression PIPE exclusive_or_expression) (COMMENT inclusive_or_expression "=>" "." exclusive_or_expression) (COMMENT exclusive_or_expression "=>" "." exclusive_or_expression CARROT and_expression) (COMMENT exclusive_or_expression "=>" "." and_expression) (COMMENT and_expression "=>" "." and_expression AMPERSAND equality_expression) (COMMENT and_expression "=>" "." equality_expression) (COMMENT equality_expression "=>" "." equality_expression NE_OP relational_expression) (COMMENT equality_expression "=>" "." equality_expression EQ_OP relational_expression) (COMMENT equality_expression "=>" "." relational_expression) (COMMENT relational_expression "=>" "." relational_expression GE_OP shift_expression) (COMMENT relational_expression "=>" "." relational_expression LE_OP shift_expression) (COMMENT relational_expression "=>" "." relational_expression GREATER_OP shift_expression) (COMMENT relational_expression "=>" "." relational_expression LESS_OP shift_expression) (COMMENT relational_expression "=>" "." shift_expression) (COMMENT shift_expression "=>" "." shift_expression RIGHT_OP additive_expression) (COMMENT shift_expression "=>" "." shift_expression LEFT_OP additive_expression) (COMMENT shift_expression "=>" "." additive_expression) (COMMENT additive_expression "=>" "." additive_expression MINUS multiplicative_expression) (COMMENT additive_expression "=>" "." additive_expression PLUS multiplicative_expression) (COMMENT additive_expression "=>" "." multiplicative_expression) (COMMENT multiplicative_expression "=>" "." multiplicative_expression AMPERSAND cast_expression) (COMMENT multiplicative_expression "=>" "." multiplicative_expression FORWARD_SLASH cast_expression) (COMMENT multiplicative_expression "=>" "." multiplicative_expression STAR cast_expression) (COMMENT multiplicative_expression "=>" "." cast_expression) (COMMENT cast_expression "=>" "." LPAREN type_name RPAREN cast_expression) (COMMENT cast_expression "=>" "." unary_expression) (COMMENT unary_operator "=>" "." BANG) (COMMENT unary_operator "=>" "." TWIDLE) (COMMENT unary_operator "=>" "." MINUS) (COMMENT unary_operator "=>" "." PLUS) (COMMENT unary_operator "=>" "." STAR) (COMMENT unary_operator "=>" "." AMPERSAND) (COMMENT unary_expression "=>" "." SIZEOF LPAREN type_name RPAREN) (COMMENT unary_expression "=>" "." SIZEOF unary_expression) (COMMENT unary_expression "=>" "." unary_operator cast_expression) (COMMENT unary_expression "=>" "." DEC_OP unary_expression) (COMMENT unary_expression "=>" "." INC_OP unary_expression) (COMMENT unary_expression "=>" "." postfix_expression) (COMMENT postfix_expression "=>" "." postfix_expression DEC_OP) (COMMENT postfix_expression "=>" "." postfix_expression INC_OP) (COMMENT postfix_expression "=>" "." postfix_expression PTR_OP IDENTIFIER) (COMMENT postfix_expression "=>" "." postfix_expression DOT IDENTIFIER) (COMMENT postfix_expression "=>" "." postfix_expression LPAREN argument_expression_list RPAREN) (COMMENT postfix_expression "=>" "." postfix_expression LPAREN RPAREN) (COMMENT postfix_expression "=>" "." postfix_expression LBRACK expression RBRACK) (COMMENT postfix_expression "=>" "." primary_expression) (COMMENT primary_expression "=>" "." LPAREN expression RPAREN) (COMMENT primary_expression "=>" "." STRING_LITERAL) (COMMENT primary_expression "=>" "." CONSTANT) (COMMENT primary_expression "=>" "." IDENTIFIER) (SHIFT (IDENTIFIER) s242) (SHIFT (CONSTANT) s69) (SHIFT (STRING_LITERAL) s70) (SHIFT (SIZEOF) s71) (SHIFT (INC_OP) s72) (SHIFT (DEC_OP) s73) (SHIFT (CASE) s243) (SHIFT (DEFAULT) s244) (SHIFT (IF) s245) (SHIFT (SWITCH) s246) (SHIFT (WHILE) s247) (SHIFT (DO) s248) (SHIFT (FOR) s249) (SHIFT (GOTO) s250) (SHIFT (CONTINUE) s251) (SHIFT (BREAK) s252) (SHIFT (RETURN) s253) (SHIFT (LPAREN) s74) (SHIFT (LCURLY) s231) (SHIFT (AMPERSAND) s75) (SHIFT (STAR) s76) (SHIFT (PLUS) s77) (SHIFT (MINUS) s78) (SHIFT (TWIDLE) s79) (SHIFT (BANG) s80) (SHIFT (SEMICOLON) s255) (GOTO primary_expression s51) (GOTO postfix_expression s52) (GOTO unary_expression s81) (GOTO unary_operator s54) (GOTO cast_expression s55) (GOTO multiplicative_expression s56) (GOTO additive_expression s57) (GOTO shift_expression s58) (GOTO relational_expression s59) (GOTO equality_expression s60) (GOTO and_expression s61) (GOTO exclusive_or_expression s62) (GOTO inclusive_or_expression s63) (GOTO logical_and_expression s64) (GOTO logical_or_expression s65) (GOTO conditional_expression s82) (GOTO assignment_expression s83) (GOTO expression s232) (GOTO statement s292) (GOTO labeled_statement s234) (GOTO compound_statement s235) (GOTO expression_statement s238) (GOTO selection_statement s239) (GOTO iteration_statement s240) (GOTO jump_statement s241))
   (STATE s292 (COMMENT labeled_statement "=>" DEFAULT COLON statement ".") (REDUCE () r182))
   (STATE s293 (COMMENT labeled_statement "=>" CASE constant_expression "." COLON statement) (SHIFT (COLON) s294))
   (STATE s294 (COMMENT jump_statement "=>" "." RETURN expression SEMICOLON) (COMMENT jump_statement "=>" "." RETURN SEMICOLON) (COMMENT jump_statement "=>" "." BREAK SEMICOLON) (COMMENT jump_statement "=>" "." CONTINUE SEMICOLON) (COMMENT jump_statement "=>" "." GOTO IDENTIFIER SEMICOLON) (COMMENT iteration_statement "=>" "." FOR LPAREN expression_statement expression_statement expression RPAREN statement) (COMMENT iteration_statement "=>" "." FOR LPAREN expression_statement expression_statement RPAREN statement) (COMMENT iteration_statement "=>" "." DO statement WHILE LPAREN expression RPAREN SEMICOLON) (COMMENT iteration_statement "=>" "." WHILE LPAREN expression RPAREN statement) (COMMENT selection_statement "=>" "." SWITCH LPAREN expression RPAREN statement) (COMMENT selection_statement "=>" "." IF LPAREN expression RPAREN statement ELSE statement) (COMMENT selection_statement "=>" "." IF LPAREN expression RPAREN statement) (COMMENT expression_statement "=>" "." expression SEMICOLON) (COMMENT expression_statement "=>" "." SEMICOLON) (COMMENT compound_statement "=>" "." LCURLY declaration_list statement_list RCURLY) (COMMENT compound_statement "=>" "." LCURLY declaration_list RCURLY) (COMMENT compound_statement "=>" "." LCURLY statement_list RCURLY) (COMMENT compound_statement "=>" "." LCURLY RCURLY) (COMMENT labeled_statement "=>" "." DEFAULT COLON statement) (COMMENT labeled_statement "=>" CASE constant_expression COLON "." statement) (COMMENT labeled_statement "=>" "." CASE constant_expression COLON statement) (COMMENT labeled_statement "=>" "." IDENTIFIER COLON statement) (COMMENT statement "=>" "." jump_statement) (COMMENT statement "=>" "." iteration_statement) (COMMENT statement "=>" "." selection_statement) (COMMENT statement "=>" "." expression_statement) (COMMENT statement "=>" "." compound_statement) (COMMENT statement "=>" "." labeled_statement) (COMMENT expression "=>" "." expression COMMA assignment_expression) (COMMENT expression "=>" "." assignment_expression) (COMMENT assignment_expression "=>" "." unary_expression assignment_operator assignment_expression) (COMMENT assignment_expression "=>" "." conditional_expression) (COMMENT conditional_expression "=>" "." logical_or_expression QMARK expression COLON conditional_expression) (COMMENT conditional_expression "=>" "." logical_or_expression) (COMMENT logical_or_expression "=>" "." logical_or_expression OR_OP logical_and_expression) (COMMENT logical_or_expression "=>" "." logical_and_expression) (COMMENT logical_and_expression "=>" "." logical_and_expression AND_OP inclusive_or_expression) (COMMENT logical_and_expression "=>" "." inclusive_or_expression) (COMMENT inclusive_or_expression "=>" "." inclusive_or_expression PIPE exclusive_or_expression) (COMMENT inclusive_or_expression "=>" "." exclusive_or_expression) (COMMENT exclusive_or_expression "=>" "." exclusive_or_expression CARROT and_expression) (COMMENT exclusive_or_expression "=>" "." and_expression) (COMMENT and_expression "=>" "." and_expression AMPERSAND equality_expression) (COMMENT and_expression "=>" "." equality_expression) (COMMENT equality_expression "=>" "." equality_expression NE_OP relational_expression) (COMMENT equality_expression "=>" "." equality_expression EQ_OP relational_expression) (COMMENT equality_expression "=>" "." relational_expression) (COMMENT relational_expression "=>" "." relational_expression GE_OP shift_expression) (COMMENT relational_expression "=>" "." relational_expression LE_OP shift_expression) (COMMENT relational_expression "=>" "." relational_expression GREATER_OP shift_expression) (COMMENT relational_expression "=>" "." relational_expression LESS_OP shift_expression) (COMMENT relational_expression "=>" "." shift_expression) (COMMENT shift_expression "=>" "." shift_expression RIGHT_OP additive_expression) (COMMENT shift_expression "=>" "." shift_expression LEFT_OP additive_expression) (COMMENT shift_expression "=>" "." additive_expression) (COMMENT additive_expression "=>" "." additive_expression MINUS multiplicative_expression) (COMMENT additive_expression "=>" "." additive_expression PLUS multiplicative_expression) (COMMENT additive_expression "=>" "." multiplicative_expression) (COMMENT multiplicative_expression "=>" "." multiplicative_expression AMPERSAND cast_expression) (COMMENT multiplicative_expression "=>" "." multiplicative_expression FORWARD_SLASH cast_expression) (COMMENT multiplicative_expression "=>" "." multiplicative_expression STAR cast_expression) (COMMENT multiplicative_expression "=>" "." cast_expression) (COMMENT cast_expression "=>" "." LPAREN type_name RPAREN cast_expression) (COMMENT cast_expression "=>" "." unary_expression) (COMMENT unary_operator "=>" "." BANG) (COMMENT unary_operator "=>" "." TWIDLE) (COMMENT unary_operator "=>" "." MINUS) (COMMENT unary_operator "=>" "." PLUS) (COMMENT unary_operator "=>" "." STAR) (COMMENT unary_operator "=>" "." AMPERSAND) (COMMENT unary_expression "=>" "." SIZEOF LPAREN type_name RPAREN) (COMMENT unary_expression "=>" "." SIZEOF unary_expression) (COMMENT unary_expression "=>" "." unary_operator cast_expression) (COMMENT unary_expression "=>" "." DEC_OP unary_expression) (COMMENT unary_expression "=>" "." INC_OP unary_expression) (COMMENT unary_expression "=>" "." postfix_expression) (COMMENT postfix_expression "=>" "." postfix_expression DEC_OP) (COMMENT postfix_expression "=>" "." postfix_expression INC_OP) (COMMENT postfix_expression "=>" "." postfix_expression PTR_OP IDENTIFIER) (COMMENT postfix_expression "=>" "." postfix_expression DOT IDENTIFIER) (COMMENT postfix_expression "=>" "." postfix_expression LPAREN argument_expression_list RPAREN) (COMMENT postfix_expression "=>" "." postfix_expression LPAREN RPAREN) (COMMENT postfix_expression "=>" "." postfix_expression LBRACK expression RBRACK) (COMMENT postfix_expression "=>" "." primary_expression) (COMMENT primary_expression "=>" "." LPAREN expression RPAREN) (COMMENT primary_expression "=>" "." STRING_LITERAL) (COMMENT primary_expression "=>" "." CONSTANT) (COMMENT primary_expression "=>" "." IDENTIFIER) (SHIFT (IDENTIFIER) s242) (SHIFT (CONSTANT) s69) (SHIFT (STRING_LITERAL) s70) (SHIFT (SIZEOF) s71) (SHIFT (INC_OP) s72) (SHIFT (DEC_OP) s73) (SHIFT (CASE) s243) (SHIFT (DEFAULT) s244) (SHIFT (IF) s245) (SHIFT (SWITCH) s246) (SHIFT (WHILE) s247) (SHIFT (DO) s248) (SHIFT (FOR) s249) (SHIFT (GOTO) s250) (SHIFT (CONTINUE) s251) (SHIFT (BREAK) s252) (SHIFT (RETURN) s253) (SHIFT (LPAREN) s74) (SHIFT (LCURLY) s231) (SHIFT (AMPERSAND) s75) (SHIFT (STAR) s76) (SHIFT (PLUS) s77) (SHIFT (MINUS) s78) (SHIFT (TWIDLE) s79) (SHIFT (BANG) s80) (SHIFT (SEMICOLON) s255) (GOTO primary_expression s51) (GOTO postfix_expression s52) (GOTO unary_expression s81) (GOTO unary_operator s54) (GOTO cast_expression s55) (GOTO multiplicative_expression s56) (GOTO additive_expression s57) (GOTO shift_expression s58) (GOTO relational_expression s59) (GOTO equality_expression s60) (GOTO and_expression s61) (GOTO exclusive_or_expression s62) (GOTO inclusive_or_expression s63) (GOTO logical_and_expression s64) (GOTO logical_or_expression s65) (GOTO conditional_expression s82) (GOTO assignment_expression s83) (GOTO expression s232) (GOTO statement s295) (GOTO labeled_statement s234) (GOTO compound_statement s235) (GOTO expression_statement s238) (GOTO selection_statement s239) (GOTO iteration_statement s240) (GOTO jump_statement s241))
   (STATE s295 (COMMENT labeled_statement "=>" CASE constant_expression COLON statement ".") (REDUCE () r181))
   (STATE s296 (COMMENT jump_statement "=>" "." RETURN expression SEMICOLON) (COMMENT jump_statement "=>" "." RETURN SEMICOLON) (COMMENT jump_statement "=>" "." BREAK SEMICOLON) (COMMENT jump_statement "=>" "." CONTINUE SEMICOLON) (COMMENT jump_statement "=>" "." GOTO IDENTIFIER SEMICOLON) (COMMENT iteration_statement "=>" "." FOR LPAREN expression_statement expression_statement expression RPAREN statement) (COMMENT iteration_statement "=>" "." FOR LPAREN expression_statement expression_statement RPAREN statement) (COMMENT iteration_statement "=>" "." DO statement WHILE LPAREN expression RPAREN SEMICOLON) (COMMENT iteration_statement "=>" "." WHILE LPAREN expression RPAREN statement) (COMMENT selection_statement "=>" "." SWITCH LPAREN expression RPAREN statement) (COMMENT selection_statement "=>" "." IF LPAREN expression RPAREN statement ELSE statement) (COMMENT selection_statement "=>" "." IF LPAREN expression RPAREN statement) (COMMENT expression_statement "=>" "." expression SEMICOLON) (COMMENT expression_statement "=>" "." SEMICOLON) (COMMENT compound_statement "=>" "." LCURLY declaration_list statement_list RCURLY) (COMMENT compound_statement "=>" "." LCURLY declaration_list RCURLY) (COMMENT compound_statement "=>" "." LCURLY statement_list RCURLY) (COMMENT compound_statement "=>" "." LCURLY RCURLY) (COMMENT labeled_statement "=>" "." DEFAULT COLON statement) (COMMENT labeled_statement "=>" "." CASE constant_expression COLON statement) (COMMENT labeled_statement "=>" IDENTIFIER COLON "." statement) (COMMENT labeled_statement "=>" "." IDENTIFIER COLON statement) (COMMENT statement "=>" "." jump_statement) (COMMENT statement "=>" "." iteration_statement) (COMMENT statement "=>" "." selection_statement) (COMMENT statement "=>" "." expression_statement) (COMMENT statement "=>" "." compound_statement) (COMMENT statement "=>" "." labeled_statement) (COMMENT expression "=>" "." expression COMMA assignment_expression) (COMMENT expression "=>" "." assignment_expression) (COMMENT assignment_expression "=>" "." unary_expression assignment_operator assignment_expression) (COMMENT assignment_expression "=>" "." conditional_expression) (COMMENT conditional_expression "=>" "." logical_or_expression QMARK expression COLON conditional_expression) (COMMENT conditional_expression "=>" "." logical_or_expression) (COMMENT logical_or_expression "=>" "." logical_or_expression OR_OP logical_and_expression) (COMMENT logical_or_expression "=>" "." logical_and_expression) (COMMENT logical_and_expression "=>" "." logical_and_expression AND_OP inclusive_or_expression) (COMMENT logical_and_expression "=>" "." inclusive_or_expression) (COMMENT inclusive_or_expression "=>" "." inclusive_or_expression PIPE exclusive_or_expression) (COMMENT inclusive_or_expression "=>" "." exclusive_or_expression) (COMMENT exclusive_or_expression "=>" "." exclusive_or_expression CARROT and_expression) (COMMENT exclusive_or_expression "=>" "." and_expression) (COMMENT and_expression "=>" "." and_expression AMPERSAND equality_expression) (COMMENT and_expression "=>" "." equality_expression) (COMMENT equality_expression "=>" "." equality_expression NE_OP relational_expression) (COMMENT equality_expression "=>" "." equality_expression EQ_OP relational_expression) (COMMENT equality_expression "=>" "." relational_expression) (COMMENT relational_expression "=>" "." relational_expression GE_OP shift_expression) (COMMENT relational_expression "=>" "." relational_expression LE_OP shift_expression) (COMMENT relational_expression "=>" "." relational_expression GREATER_OP shift_expression) (COMMENT relational_expression "=>" "." relational_expression LESS_OP shift_expression) (COMMENT relational_expression "=>" "." shift_expression) (COMMENT shift_expression "=>" "." shift_expression RIGHT_OP additive_expression) (COMMENT shift_expression "=>" "." shift_expression LEFT_OP additive_expression) (COMMENT shift_expression "=>" "." additive_expression) (COMMENT additive_expression "=>" "." additive_expression MINUS multiplicative_expression) (COMMENT additive_expression "=>" "." additive_expression PLUS multiplicative_expression) (COMMENT additive_expression "=>" "." multiplicative_expression) (COMMENT multiplicative_expression "=>" "." multiplicative_expression AMPERSAND cast_expression) (COMMENT multiplicative_expression "=>" "." multiplicative_expression FORWARD_SLASH cast_expression) (COMMENT multiplicative_expression "=>" "." multiplicative_expression STAR cast_expression) (COMMENT multiplicative_expression "=>" "." cast_expression) (COMMENT cast_expression "=>" "." LPAREN type_name RPAREN cast_expression) (COMMENT cast_expression "=>" "." unary_expression) (COMMENT unary_operator "=>" "." BANG) (COMMENT unary_operator "=>" "." TWIDLE) (COMMENT unary_operator "=>" "." MINUS) (COMMENT unary_operator "=>" "." PLUS) (COMMENT unary_operator "=>" "." STAR) (COMMENT unary_operator "=>" "." AMPERSAND) (COMMENT unary_expression "=>" "." SIZEOF LPAREN type_name RPAREN) (COMMENT unary_expression "=>" "." SIZEOF unary_expression) (COMMENT unary_expression "=>" "." unary_operator cast_expression) (COMMENT unary_expression "=>" "." DEC_OP unary_expression) (COMMENT unary_expression "=>" "." INC_OP unary_expression) (COMMENT unary_expression "=>" "." postfix_expression) (COMMENT postfix_expression "=>" "." postfix_expression DEC_OP) (COMMENT postfix_expression "=>" "." postfix_expression INC_OP) (COMMENT postfix_expression "=>" "." postfix_expression PTR_OP IDENTIFIER) (COMMENT postfix_expression "=>" "." postfix_expression DOT IDENTIFIER) (COMMENT postfix_expression "=>" "." postfix_expression LPAREN argument_expression_list RPAREN) (COMMENT postfix_expression "=>" "." postfix_expression LPAREN RPAREN) (COMMENT postfix_expression "=>" "." postfix_expression LBRACK expression RBRACK) (COMMENT postfix_expression "=>" "." primary_expression) (COMMENT primary_expression "=>" "." LPAREN expression RPAREN) (COMMENT primary_expression "=>" "." STRING_LITERAL) (COMMENT primary_expression "=>" "." CONSTANT) (COMMENT primary_expression "=>" "." IDENTIFIER) (SHIFT (IDENTIFIER) s242) (SHIFT (CONSTANT) s69) (SHIFT (STRING_LITERAL) s70) (SHIFT (SIZEOF) s71) (SHIFT (INC_OP) s72) (SHIFT (DEC_OP) s73) (SHIFT (CASE) s243) (SHIFT (DEFAULT) s244) (SHIFT (IF) s245) (SHIFT (SWITCH) s246) (SHIFT (WHILE) s247) (SHIFT (DO) s248) (SHIFT (FOR) s249) (SHIFT (GOTO) s250) (SHIFT (CONTINUE) s251) (SHIFT (BREAK) s252) (SHIFT (RETURN) s253) (SHIFT (LPAREN) s74) (SHIFT (LCURLY) s231) (SHIFT (AMPERSAND) s75) (SHIFT (STAR) s76) (SHIFT (PLUS) s77) (SHIFT (MINUS) s78) (SHIFT (TWIDLE) s79) (SHIFT (BANG) s80) (SHIFT (SEMICOLON) s255) (GOTO primary_expression s51) (GOTO postfix_expression s52) (GOTO unary_expression s81) (GOTO unary_operator s54) (GOTO cast_expression s55) (GOTO multiplicative_expression s56) (GOTO additive_expression s57) (GOTO shift_expression s58) (GOTO relational_expression s59) (GOTO equality_expression s60) (GOTO and_expression s61) (GOTO exclusive_or_expression s62) (GOTO inclusive_or_expression s63) (GOTO logical_and_expression s64) (GOTO logical_or_expression s65) (GOTO conditional_expression s82) (GOTO assignment_expression s83) (GOTO expression s232) (GOTO statement s297) (GOTO labeled_statement s234) (GOTO compound_statement s235) (GOTO expression_statement s238) (GOTO selection_statement s239) (GOTO iteration_statement s240) (GOTO jump_statement s241))
   (STATE s297 (COMMENT labeled_statement "=>" IDENTIFIER COLON statement ".") (REDUCE () r180))
   (STATE s298 (COMMENT statement_list "=>" statement_list statement ".") (REDUCE () r190))
   (STATE s299 (COMMENT compound_statement "=>" LCURLY statement_list RCURLY ".") (REDUCE () r184))
   (STATE s300 (COMMENT declaration_list "=>" declaration_list declaration ".") (REDUCE () r188))
   (STATE s301 (COMMENT jump_statement "=>" "." RETURN expression SEMICOLON) (COMMENT jump_statement "=>" "." RETURN SEMICOLON) (COMMENT jump_statement "=>" "." BREAK SEMICOLON) (COMMENT jump_statement "=>" "." CONTINUE SEMICOLON) (COMMENT jump_statement "=>" "." GOTO IDENTIFIER SEMICOLON) (COMMENT iteration_statement "=>" "." FOR LPAREN expression_statement expression_statement expression RPAREN statement) (COMMENT iteration_statement "=>" "." FOR LPAREN expression_statement expression_statement RPAREN statement) (COMMENT iteration_statement "=>" "." DO statement WHILE LPAREN expression RPAREN SEMICOLON) (COMMENT iteration_statement "=>" "." WHILE LPAREN expression RPAREN statement) (COMMENT selection_statement "=>" "." SWITCH LPAREN expression RPAREN statement) (COMMENT selection_statement "=>" "." IF LPAREN expression RPAREN statement ELSE statement) (COMMENT selection_statement "=>" "." IF LPAREN expression RPAREN statement) (COMMENT expression_statement "=>" "." expression SEMICOLON) (COMMENT expression_statement "=>" "." SEMICOLON) (COMMENT statement_list "=>" statement_list "." statement) (COMMENT compound_statement "=>" LCURLY declaration_list statement_list "." RCURLY) (COMMENT compound_statement "=>" "." LCURLY declaration_list statement_list RCURLY) (COMMENT compound_statement "=>" "." LCURLY declaration_list RCURLY) (COMMENT compound_statement "=>" "." LCURLY statement_list RCURLY) (COMMENT compound_statement "=>" "." LCURLY RCURLY) (COMMENT labeled_statement "=>" "." DEFAULT COLON statement) (COMMENT labeled_statement "=>" "." CASE constant_expression COLON statement) (COMMENT labeled_statement "=>" "." IDENTIFIER COLON statement) (COMMENT statement "=>" "." jump_statement) (COMMENT statement "=>" "." iteration_statement) (COMMENT statement "=>" "." selection_statement) (COMMENT statement "=>" "." expression_statement) (COMMENT statement "=>" "." compound_statement) (COMMENT statement "=>" "." labeled_statement) (COMMENT expression "=>" "." expression COMMA assignment_expression) (COMMENT expression "=>" "." assignment_expression) (COMMENT assignment_expression "=>" "." unary_expression assignment_operator assignment_expression) (COMMENT assignment_expression "=>" "." conditional_expression) (COMMENT conditional_expression "=>" "." logical_or_expression QMARK expression COLON conditional_expression) (COMMENT conditional_expression "=>" "." logical_or_expression) (COMMENT logical_or_expression "=>" "." logical_or_expression OR_OP logical_and_expression) (COMMENT logical_or_expression "=>" "." logical_and_expression) (COMMENT logical_and_expression "=>" "." logical_and_expression AND_OP inclusive_or_expression) (COMMENT logical_and_expression "=>" "." inclusive_or_expression) (COMMENT inclusive_or_expression "=>" "." inclusive_or_expression PIPE exclusive_or_expression) (COMMENT inclusive_or_expression "=>" "." exclusive_or_expression) (COMMENT exclusive_or_expression "=>" "." exclusive_or_expression CARROT and_expression) (COMMENT exclusive_or_expression "=>" "." and_expression) (COMMENT and_expression "=>" "." and_expression AMPERSAND equality_expression) (COMMENT and_expression "=>" "." equality_expression) (COMMENT equality_expression "=>" "." equality_expression NE_OP relational_expression) (COMMENT equality_expression "=>" "." equality_expression EQ_OP relational_expression) (COMMENT equality_expression "=>" "." relational_expression) (COMMENT relational_expression "=>" "." relational_expression GE_OP shift_expression) (COMMENT relational_expression "=>" "." relational_expression LE_OP shift_expression) (COMMENT relational_expression "=>" "." relational_expression GREATER_OP shift_expression) (COMMENT relational_expression "=>" "." relational_expression LESS_OP shift_expression) (COMMENT relational_expression "=>" "." shift_expression) (COMMENT shift_expression "=>" "." shift_expression RIGHT_OP additive_expression) (COMMENT shift_expression "=>" "." shift_expression LEFT_OP additive_expression) (COMMENT shift_expression "=>" "." additive_expression) (COMMENT additive_expression "=>" "." additive_expression MINUS multiplicative_expression) (COMMENT additive_expression "=>" "." additive_expression PLUS multiplicative_expression) (COMMENT additive_expression "=>" "." multiplicative_expression) (COMMENT multiplicative_expression "=>" "." multiplicative_expression AMPERSAND cast_expression) (COMMENT multiplicative_expression "=>" "." multiplicative_expression FORWARD_SLASH cast_expression) (COMMENT multiplicative_expression "=>" "." multiplicative_expression STAR cast_expression) (COMMENT multiplicative_expression "=>" "." cast_expression) (COMMENT cast_expression "=>" "." LPAREN type_name RPAREN cast_expression) (COMMENT cast_expression "=>" "." unary_expression) (COMMENT unary_operator "=>" "." BANG) (COMMENT unary_operator "=>" "." TWIDLE) (COMMENT unary_operator "=>" "." MINUS) (COMMENT unary_operator "=>" "." PLUS) (COMMENT unary_operator "=>" "." STAR) (COMMENT unary_operator "=>" "." AMPERSAND) (COMMENT unary_expression "=>" "." SIZEOF LPAREN type_name RPAREN) (COMMENT unary_expression "=>" "." SIZEOF unary_expression) (COMMENT unary_expression "=>" "." unary_operator cast_expression) (COMMENT unary_expression "=>" "." DEC_OP unary_expression) (COMMENT unary_expression "=>" "." INC_OP unary_expression) (COMMENT unary_expression "=>" "." postfix_expression) (COMMENT postfix_expression "=>" "." postfix_expression DEC_OP) (COMMENT postfix_expression "=>" "." postfix_expression INC_OP) (COMMENT postfix_expression "=>" "." postfix_expression PTR_OP IDENTIFIER) (COMMENT postfix_expression "=>" "." postfix_expression DOT IDENTIFIER) (COMMENT postfix_expression "=>" "." postfix_expression LPAREN argument_expression_list RPAREN) (COMMENT postfix_expression "=>" "." postfix_expression LPAREN RPAREN) (COMMENT postfix_expression "=>" "." postfix_expression LBRACK expression RBRACK) (COMMENT postfix_expression "=>" "." primary_expression) (COMMENT primary_expression "=>" "." LPAREN expression RPAREN) (COMMENT primary_expression "=>" "." STRING_LITERAL) (COMMENT primary_expression "=>" "." CONSTANT) (COMMENT primary_expression "=>" "." IDENTIFIER) (SHIFT (IDENTIFIER) s242) (SHIFT (CONSTANT) s69) (SHIFT (STRING_LITERAL) s70) (SHIFT (SIZEOF) s71) (SHIFT (INC_OP) s72) (SHIFT (DEC_OP) s73) (SHIFT (CASE) s243) (SHIFT (DEFAULT) s244) (SHIFT (IF) s245) (SHIFT (SWITCH) s246) (SHIFT (WHILE) s247) (SHIFT (DO) s248) (SHIFT (FOR) s249) (SHIFT (GOTO) s250) (SHIFT (CONTINUE) s251) (SHIFT (BREAK) s252) (SHIFT (RETURN) s253) (SHIFT (LPAREN) s74) (SHIFT (LCURLY) s231) (SHIFT (RCURLY) s303) (SHIFT (AMPERSAND) s75) (SHIFT (STAR) s76) (SHIFT (PLUS) s77) (SHIFT (MINUS) s78) (SHIFT (TWIDLE) s79) (SHIFT (BANG) s80) (SHIFT (SEMICOLON) s255) (GOTO primary_expression s51) (GOTO postfix_expression s52) (GOTO unary_expression s81) (GOTO unary_operator s54) (GOTO cast_expression s55) (GOTO multiplicative_expression s56) (GOTO additive_expression s57) (GOTO shift_expression s58) (GOTO relational_expression s59) (GOTO equality_expression s60) (GOTO and_expression s61) (GOTO exclusive_or_expression s62) (GOTO inclusive_or_expression s63) (GOTO logical_and_expression s64) (GOTO logical_or_expression s65) (GOTO conditional_expression s82) (GOTO assignment_expression s83) (GOTO expression s232) (GOTO statement s298) (GOTO labeled_statement s234) (GOTO compound_statement s235) (GOTO expression_statement s238) (GOTO selection_statement s239) (GOTO iteration_statement s240) (GOTO jump_statement s241))
   (STATE s302 (COMMENT compound_statement "=>" LCURLY declaration_list RCURLY ".") (REDUCE () r185))
   (STATE s303 (COMMENT compound_statement "=>" LCURLY declaration_list statement_list RCURLY ".") (REDUCE () r186))
   (STATE s304 (COMMENT expression_statement "=>" expression SEMICOLON ".") (REDUCE () r192))
   (STATE s305 (COMMENT function_definition "=>" declarator declaration_list compound_statement ".") (REDUCE () r211))
   (STATE s306 (COMMENT init_declarator_list "=>" init_declarator_list "." COMMA init_declarator) (COMMENT declaration "=>" declaration_specifiers init_declarator_list "." SEMICOLON) (SHIFT (COMMA) s320) (SHIFT (SEMICOLON) s321))
   (STATE s307 (COMMENT init_declarator_list "=>" init_declarator ".") (REDUCE () r84))
   (STATE s308 (COMMENT init_declarator "=>" declarator "." EQUAL_SIGN initializer) (COMMENT init_declarator "=>" declarator ".") (REDUCE (COMMA) r86) (SHIFT (EQUAL_SIGN) s310) (REDUCE (SEMICOLON) r86))
   (STATE s309 (COMMENT declaration "=>" declaration_specifiers SEMICOLON ".") (REDUCE () r76))
   (STATE s310 (COMMENT initializer "=>" "." LCURLY initializer_list COMMA RCURLY) (COMMENT initializer "=>" "." LCURLY initializer_list RCURLY) (COMMENT initializer "=>" "." assignment_expression) (COMMENT init_declarator "=>" declarator EQUAL_SIGN "." initializer) (COMMENT assignment_expression "=>" "." unary_expression assignment_operator assignment_expression) (COMMENT assignment_expression "=>" "." conditional_expression) (COMMENT conditional_expression "=>" "." logical_or_expression QMARK expression COLON conditional_expression) (COMMENT conditional_expression "=>" "." logical_or_expression) (COMMENT logical_or_expression "=>" "." logical_or_expression OR_OP logical_and_expression) (COMMENT logical_or_expression "=>" "." logical_and_expression) (COMMENT logical_and_expression "=>" "." logical_and_expression AND_OP inclusive_or_expression) (COMMENT logical_and_expression "=>" "." inclusive_or_expression) (COMMENT inclusive_or_expression "=>" "." inclusive_or_expression PIPE exclusive_or_expression) (COMMENT inclusive_or_expression "=>" "." exclusive_or_expression) (COMMENT exclusive_or_expression "=>" "." exclusive_or_expression CARROT and_expression) (COMMENT exclusive_or_expression "=>" "." and_expression) (COMMENT and_expression "=>" "." and_expression AMPERSAND equality_expression) (COMMENT and_expression "=>" "." equality_expression) (COMMENT equality_expression "=>" "." equality_expression NE_OP relational_expression) (COMMENT equality_expression "=>" "." equality_expression EQ_OP relational_expression) (COMMENT equality_expression "=>" "." relational_expression) (COMMENT relational_expression "=>" "." relational_expression GE_OP shift_expression) (COMMENT relational_expression "=>" "." relational_expression LE_OP shift_expression) (COMMENT relational_expression "=>" "." relational_expression GREATER_OP shift_expression) (COMMENT relational_expression "=>" "." relational_expression LESS_OP shift_expression) (COMMENT relational_expression "=>" "." shift_expression) (COMMENT shift_expression "=>" "." shift_expression RIGHT_OP additive_expression) (COMMENT shift_expression "=>" "." shift_expression LEFT_OP additive_expression) (COMMENT shift_expression "=>" "." additive_expression) (COMMENT additive_expression "=>" "." additive_expression MINUS multiplicative_expression) (COMMENT additive_expression "=>" "." additive_expression PLUS multiplicative_expression) (COMMENT additive_expression "=>" "." multiplicative_expression) (COMMENT multiplicative_expression "=>" "." multiplicative_expression AMPERSAND cast_expression) (COMMENT multiplicative_expression "=>" "." multiplicative_expression FORWARD_SLASH cast_expression) (COMMENT multiplicative_expression "=>" "." multiplicative_expression STAR cast_expression) (COMMENT multiplicative_expression "=>" "." cast_expression) (COMMENT cast_expression "=>" "." LPAREN type_name RPAREN cast_expression) (COMMENT cast_expression "=>" "." unary_expression) (COMMENT unary_operator "=>" "." BANG) (COMMENT unary_operator "=>" "." TWIDLE) (COMMENT unary_operator "=>" "." MINUS) (COMMENT unary_operator "=>" "." PLUS) (COMMENT unary_operator "=>" "." STAR) (COMMENT unary_operator "=>" "." AMPERSAND) (COMMENT unary_expression "=>" "." SIZEOF LPAREN type_name RPAREN) (COMMENT unary_expression "=>" "." SIZEOF unary_expression) (COMMENT unary_expression "=>" "." unary_operator cast_expression) (COMMENT unary_expression "=>" "." DEC_OP unary_expression) (COMMENT unary_expression "=>" "." INC_OP unary_expression) (COMMENT unary_expression "=>" "." postfix_expression) (COMMENT postfix_expression "=>" "." postfix_expression DEC_OP) (COMMENT postfix_expression "=>" "." postfix_expression INC_OP) (COMMENT postfix_expression "=>" "." postfix_expression PTR_OP IDENTIFIER) (COMMENT postfix_expression "=>" "." postfix_expression DOT IDENTIFIER) (COMMENT postfix_expression "=>" "." postfix_expression LPAREN argument_expression_list RPAREN) (COMMENT postfix_expression "=>" "." postfix_expression LPAREN RPAREN) (COMMENT postfix_expression "=>" "." postfix_expression LBRACK expression RBRACK) (COMMENT postfix_expression "=>" "." primary_expression) (COMMENT primary_expression "=>" "." LPAREN expression RPAREN) (COMMENT primary_expression "=>" "." STRING_LITERAL) (COMMENT primary_expression "=>" "." CONSTANT) (COMMENT primary_expression "=>" "." IDENTIFIER) (SHIFT (IDENTIFIER) s68) (SHIFT (CONSTANT) s69) (SHIFT (STRING_LITERAL) s70) (SHIFT (SIZEOF) s71) (SHIFT (INC_OP) s72) (SHIFT (DEC_OP) s73) (SHIFT (LPAREN) s74) (SHIFT (LCURLY) s313) (SHIFT (AMPERSAND) s75) (SHIFT (STAR) s76) (SHIFT (PLUS) s77) (SHIFT (MINUS) s78) (SHIFT (TWIDLE) s79) (SHIFT (BANG) s80) (GOTO primary_expression s51) (GOTO postfix_expression s52) (GOTO unary_expression s81) (GOTO unary_operator s54) (GOTO cast_expression s55) (GOTO multiplicative_expression s56) (GOTO additive_expression s57) (GOTO shift_expression s58) (GOTO relational_expression s59) (GOTO equality_expression s60) (GOTO and_expression s61) (GOTO exclusive_or_expression s62) (GOTO inclusive_or_expression s63) (GOTO logical_and_expression s64) (GOTO logical_or_expression s65) (GOTO conditional_expression s82) (GOTO assignment_expression s311) (GOTO initializer s312))
   (STATE s311 (COMMENT initializer "=>" assignment_expression ".") (REDUCE () r169))
   (STATE s312 (COMMENT init_declarator "=>" declarator EQUAL_SIGN initializer ".") (REDUCE () r87))
   (STATE s313 (COMMENT initializer_list "=>" "." initializer_list COMMA initializer) (COMMENT initializer_list "=>" "." initializer) (COMMENT initializer "=>" LCURLY "." initializer_list COMMA RCURLY) (COMMENT initializer "=>" "." LCURLY initializer_list COMMA RCURLY) (COMMENT initializer "=>" LCURLY "." initializer_list RCURLY) (COMMENT initializer "=>" "." LCURLY initializer_list RCURLY) (COMMENT initializer "=>" "." assignment_expression) (COMMENT assignment_expression "=>" "." unary_expression assignment_operator assignment_expression) (COMMENT assignment_expression "=>" "." conditional_expression) (COMMENT conditional_expression "=>" "." logical_or_expression QMARK expression COLON conditional_expression) (COMMENT conditional_expression "=>" "." logical_or_expression) (COMMENT logical_or_expression "=>" "." logical_or_expression OR_OP logical_and_expression) (COMMENT logical_or_expression "=>" "." logical_and_expression) (COMMENT logical_and_expression "=>" "." logical_and_expression AND_OP inclusive_or_expression) (COMMENT logical_and_expression "=>" "." inclusive_or_expression) (COMMENT inclusive_or_expression "=>" "." inclusive_or_expression PIPE exclusive_or_expression) (COMMENT inclusive_or_expression "=>" "." exclusive_or_expression) (COMMENT exclusive_or_expression "=>" "." exclusive_or_expression CARROT and_expression) (COMMENT exclusive_or_expression "=>" "." and_expression) (COMMENT and_expression "=>" "." and_expression AMPERSAND equality_expression) (COMMENT and_expression "=>" "." equality_expression) (COMMENT equality_expression "=>" "." equality_expression NE_OP relational_expression) (COMMENT equality_expression "=>" "." equality_expression EQ_OP relational_expression) (COMMENT equality_expression "=>" "." relational_expression) (COMMENT relational_expression "=>" "." relational_expression GE_OP shift_expression) (COMMENT relational_expression "=>" "." relational_expression LE_OP shift_expression) (COMMENT relational_expression "=>" "." relational_expression GREATER_OP shift_expression) (COMMENT relational_expression "=>" "." relational_expression LESS_OP shift_expression) (COMMENT relational_expression "=>" "." shift_expression) (COMMENT shift_expression "=>" "." shift_expression RIGHT_OP additive_expression) (COMMENT shift_expression "=>" "." shift_expression LEFT_OP additive_expression) (COMMENT shift_expression "=>" "." additive_expression) (COMMENT additive_expression "=>" "." additive_expression MINUS multiplicative_expression) (COMMENT additive_expression "=>" "." additive_expression PLUS multiplicative_expression) (COMMENT additive_expression "=>" "." multiplicative_expression) (COMMENT multiplicative_expression "=>" "." multiplicative_expression AMPERSAND cast_expression) (COMMENT multiplicative_expression "=>" "." multiplicative_expression FORWARD_SLASH cast_expression) (COMMENT multiplicative_expression "=>" "." multiplicative_expression STAR cast_expression) (COMMENT multiplicative_expression "=>" "." cast_expression) (COMMENT cast_expression "=>" "." LPAREN type_name RPAREN cast_expression) (COMMENT cast_expression "=>" "." unary_expression) (COMMENT unary_operator "=>" "." BANG) (COMMENT unary_operator "=>" "." TWIDLE) (COMMENT unary_operator "=>" "." MINUS) (COMMENT unary_operator "=>" "." PLUS) (COMMENT unary_operator "=>" "." STAR) (COMMENT unary_operator "=>" "." AMPERSAND) (COMMENT unary_expression "=>" "." SIZEOF LPAREN type_name RPAREN) (COMMENT unary_expression "=>" "." SIZEOF unary_expression) (COMMENT unary_expression "=>" "." unary_operator cast_expression) (COMMENT unary_expression "=>" "." DEC_OP unary_expression) (COMMENT unary_expression "=>" "." INC_OP unary_expression) (COMMENT unary_expression "=>" "." postfix_expression) (COMMENT postfix_expression "=>" "." postfix_expression DEC_OP) (COMMENT postfix_expression "=>" "." postfix_expression INC_OP) (COMMENT postfix_expression "=>" "." postfix_expression PTR_OP IDENTIFIER) (COMMENT postfix_expression "=>" "." postfix_expression DOT IDENTIFIER) (COMMENT postfix_expression "=>" "." postfix_expression LPAREN argument_expression_list RPAREN) (COMMENT postfix_expression "=>" "." postfix_expression LPAREN RPAREN) (COMMENT postfix_expression "=>" "." postfix_expression LBRACK expression RBRACK) (COMMENT postfix_expression "=>" "." primary_expression) (COMMENT primary_expression "=>" "." LPAREN expression RPAREN) (COMMENT primary_expression "=>" "." STRING_LITERAL) (COMMENT primary_expression "=>" "." CONSTANT) (COMMENT primary_expression "=>" "." IDENTIFIER) (SHIFT (IDENTIFIER) s68) (SHIFT (CONSTANT) s69) (SHIFT (STRING_LITERAL) s70) (SHIFT (SIZEOF) s71) (SHIFT (INC_OP) s72) (SHIFT (DEC_OP) s73) (SHIFT (LPAREN) s74) (SHIFT (LCURLY) s313) (SHIFT (AMPERSAND) s75) (SHIFT (STAR) s76) (SHIFT (PLUS) s77) (SHIFT (MINUS) s78) (SHIFT (TWIDLE) s79) (SHIFT (BANG) s80) (GOTO primary_expression s51) (GOTO postfix_expression s52) (GOTO unary_expression s81) (GOTO unary_operator s54) (GOTO cast_expression s55) (GOTO multiplicative_expression s56) (GOTO additive_expression s57) (GOTO shift_expression s58) (GOTO relational_expression s59) (GOTO equality_expression s60) (GOTO and_expression s61) (GOTO exclusive_or_expression s62) (GOTO inclusive_or_expression s63) (GOTO logical_and_expression s64) (GOTO logical_or_expression s65) (GOTO conditional_expression s82) (GOTO assignment_expression s311) (GOTO initializer s314) (GOTO initializer_list s315))
   (STATE s314 (COMMENT initializer_list "=>" initializer ".") (REDUCE () r172))
   (STATE s315 (COMMENT initializer_list "=>" initializer_list "." COMMA initializer) (COMMENT initializer "=>" LCURLY initializer_list "." COMMA RCURLY) (COMMENT initializer "=>" LCURLY initializer_list "." RCURLY) (SHIFT (RCURLY) s316) (SHIFT (COMMA) s317))
   (STATE s316 (COMMENT initializer "=>" LCURLY initializer_list RCURLY ".") (REDUCE () r170))
   (STATE s317 (COMMENT initializer_list "=>" initializer_list COMMA "." initializer) (COMMENT initializer "=>" LCURLY initializer_list COMMA "." RCURLY) (COMMENT initializer "=>" "." LCURLY initializer_list COMMA RCURLY) (COMMENT initializer "=>" "." LCURLY initializer_list RCURLY) (COMMENT initializer "=>" "." assignment_expression) (COMMENT assignment_expression "=>" "." unary_expression assignment_operator assignment_expression) (COMMENT assignment_expression "=>" "." conditional_expression) (COMMENT conditional_expression "=>" "." logical_or_expression QMARK expression COLON conditional_expression) (COMMENT conditional_expression "=>" "." logical_or_expression) (COMMENT logical_or_expression "=>" "." logical_or_expression OR_OP logical_and_expression) (COMMENT logical_or_expression "=>" "." logical_and_expression) (COMMENT logical_and_expression "=>" "." logical_and_expression AND_OP inclusive_or_expression) (COMMENT logical_and_expression "=>" "." inclusive_or_expression) (COMMENT inclusive_or_expression "=>" "." inclusive_or_expression PIPE exclusive_or_expression) (COMMENT inclusive_or_expression "=>" "." exclusive_or_expression) (COMMENT exclusive_or_expression "=>" "." exclusive_or_expression CARROT and_expression) (COMMENT exclusive_or_expression "=>" "." and_expression) (COMMENT and_expression "=>" "." and_expression AMPERSAND equality_expression) (COMMENT and_expression "=>" "." equality_expression) (COMMENT equality_expression "=>" "." equality_expression NE_OP relational_expression) (COMMENT equality_expression "=>" "." equality_expression EQ_OP relational_expression) (COMMENT equality_expression "=>" "." relational_expression) (COMMENT relational_expression "=>" "." relational_expression GE_OP shift_expression) (COMMENT relational_expression "=>" "." relational_expression LE_OP shift_expression) (COMMENT relational_expression "=>" "." relational_expression GREATER_OP shift_expression) (COMMENT relational_expression "=>" "." relational_expression LESS_OP shift_expression) (COMMENT relational_expression "=>" "." shift_expression) (COMMENT shift_expression "=>" "." shift_expression RIGHT_OP additive_expression) (COMMENT shift_expression "=>" "." shift_expression LEFT_OP additive_expression) (COMMENT shift_expression "=>" "." additive_expression) (COMMENT additive_expression "=>" "." additive_expression MINUS multiplicative_expression) (COMMENT additive_expression "=>" "." additive_expression PLUS multiplicative_expression) (COMMENT additive_expression "=>" "." multiplicative_expression) (COMMENT multiplicative_expression "=>" "." multiplicative_expression AMPERSAND cast_expression) (COMMENT multiplicative_expression "=>" "." multiplicative_expression FORWARD_SLASH cast_expression) (COMMENT multiplicative_expression "=>" "." multiplicative_expression STAR cast_expression) (COMMENT multiplicative_expression "=>" "." cast_expression) (COMMENT cast_expression "=>" "." LPAREN type_name RPAREN cast_expression) (COMMENT cast_expression "=>" "." unary_expression) (COMMENT unary_operator "=>" "." BANG) (COMMENT unary_operator "=>" "." TWIDLE) (COMMENT unary_operator "=>" "." MINUS) (COMMENT unary_operator "=>" "." PLUS) (COMMENT unary_operator "=>" "." STAR) (COMMENT unary_operator "=>" "." AMPERSAND) (COMMENT unary_expression "=>" "." SIZEOF LPAREN type_name RPAREN) (COMMENT unary_expression "=>" "." SIZEOF unary_expression) (COMMENT unary_expression "=>" "." unary_operator cast_expression) (COMMENT unary_expression "=>" "." DEC_OP unary_expression) (COMMENT unary_expression "=>" "." INC_OP unary_expression) (COMMENT unary_expression "=>" "." postfix_expression) (COMMENT postfix_expression "=>" "." postfix_expression DEC_OP) (COMMENT postfix_expression "=>" "." postfix_expression INC_OP) (COMMENT postfix_expression "=>" "." postfix_expression PTR_OP IDENTIFIER) (COMMENT postfix_expression "=>" "." postfix_expression DOT IDENTIFIER) (COMMENT postfix_expression "=>" "." postfix_expression LPAREN argument_expression_list RPAREN) (COMMENT postfix_expression "=>" "." postfix_expression LPAREN RPAREN) (COMMENT postfix_expression "=>" "." postfix_expression LBRACK expression RBRACK) (COMMENT postfix_expression "=>" "." primary_expression) (COMMENT primary_expression "=>" "." LPAREN expression RPAREN) (COMMENT primary_expression "=>" "." STRING_LITERAL) (COMMENT primary_expression "=>" "." CONSTANT) (COMMENT primary_expression "=>" "." IDENTIFIER) (SHIFT (IDENTIFIER) s68) (SHIFT (CONSTANT) s69) (SHIFT (STRING_LITERAL) s70) (SHIFT (SIZEOF) s71) (SHIFT (INC_OP) s72) (SHIFT (DEC_OP) s73) (SHIFT (LPAREN) s74) (SHIFT (LCURLY) s313) (SHIFT (RCURLY) s319) (SHIFT (AMPERSAND) s75) (SHIFT (STAR) s76) (SHIFT (PLUS) s77) (SHIFT (MINUS) s78) (SHIFT (TWIDLE) s79) (SHIFT (BANG) s80) (GOTO primary_expression s51) (GOTO postfix_expression s52) (GOTO unary_expression s81) (GOTO unary_operator s54) (GOTO cast_expression s55) (GOTO multiplicative_expression s56) (GOTO additive_expression s57) (GOTO shift_expression s58) (GOTO relational_expression s59) (GOTO equality_expression s60) (GOTO and_expression s61) (GOTO exclusive_or_expression s62) (GOTO inclusive_or_expression s63) (GOTO logical_and_expression s64) (GOTO logical_or_expression s65) (GOTO conditional_expression s82) (GOTO assignment_expression s311) (GOTO initializer s318))
   (STATE s318 (COMMENT initializer_list "=>" initializer_list COMMA initializer ".") (REDUCE () r173))
   (STATE s319 (COMMENT initializer "=>" LCURLY initializer_list COMMA RCURLY ".") (REDUCE () r171))
   (STATE s320 (COMMENT pointer "=>" "." STAR type_qualifier_list pointer) (COMMENT pointer "=>" "." STAR pointer) (COMMENT pointer "=>" "." STAR type_qualifier_list) (COMMENT pointer "=>" "." STAR) (COMMENT direct_declarator "=>" "." direct_declarator LPAREN RPAREN) (COMMENT direct_declarator "=>" "." direct_declarator LPAREN identifier_list RPAREN) (COMMENT direct_declarator "=>" "." direct_declarator LPAREN parameter_type_list RPAREN) (COMMENT direct_declarator "=>" "." direct_declarator LBRACK RBRACK) (COMMENT direct_declarator "=>" "." direct_declarator LBRACK constant_expression RBRACK) (COMMENT direct_declarator "=>" "." LPAREN declarator RPAREN) (COMMENT direct_declarator "=>" "." IDENTIFIER) (COMMENT declarator "=>" "." direct_declarator) (COMMENT declarator "=>" "." pointer direct_declarator) (COMMENT init_declarator "=>" "." declarator EQUAL_SIGN initializer) (COMMENT init_declarator "=>" "." declarator) (COMMENT init_declarator_list "=>" init_declarator_list COMMA "." init_declarator) (SHIFT (IDENTIFIER) s15) (SHIFT (LPAREN) s36) (SHIFT (STAR) s37) (GOTO init_declarator s322) (GOTO declarator s308) (GOTO direct_declarator s10) (GOTO pointer s11))
   (STATE s321 (COMMENT declaration "=>" declaration_specifiers init_declarator_list SEMICOLON ".") (REDUCE () r77))
   (STATE s322 (COMMENT init_declarator_list "=>" init_declarator_list COMMA init_declarator ".") (REDUCE () r85))
   (STATE s323 (COMMENT declaration_specifiers "=>" type_qualifier declaration_specifiers ".") (REDUCE () r83))
   (STATE s324 (COMMENT struct_or_union_specifier "=>" struct_or_union IDENTIFIER ".") (COMMENT struct_or_union_specifier "=>" struct_or_union IDENTIFIER "." LCURLY struct_declaration_list RCURLY) (REDUCE (IDENTIFIER) r107) (REDUCE (TYPE_NAME) r107) (REDUCE (TYPEDEF) r107) (REDUCE (EXTERN) r107) (REDUCE (STATIC) r107) (REDUCE (AUTO) r107) (REDUCE (REGISTER) r107) (REDUCE (CHAR) r107) (REDUCE (SHORT) r107) (REDUCE (INT) r107) (REDUCE (LONG) r107) (REDUCE (SIGNED) r107) (REDUCE (UNSIGNED) r107) (REDUCE (FLOAT) r107) (REDUCE (DOUBLE) r107) (REDUCE (CONST) r107) (REDUCE (VOLATILE) r107) (REDUCE (VOID) r107) (REDUCE (STRUCT) r107) (REDUCE (UNION) r107) (REDUCE (ENUM) r107) (REDUCE (LPAREN) r107) (REDUCE (RPAREN) r107) (REDUCE (LBRACK) r107) (SHIFT (LCURLY) s341) (REDUCE (COMMA) r107) (REDUCE (STAR) r107) (REDUCE (COLON) r107) (REDUCE (SEMICOLON) r107))
   (STATE s325 (COMMENT type_qualifier "=>" "." VOLATILE) (COMMENT type_qualifier "=>" "." CONST) (COMMENT enum_specifier "=>" "." ENUM IDENTIFIER) (COMMENT enum_specifier "=>" "." ENUM IDENTIFIER LCURLY enumerator_list RCURLY) (COMMENT enum_specifier "=>" "." ENUM LCURLY enumerator_list RCURLY) (COMMENT specifier_qualifier_list "=>" "." type_qualifier) (COMMENT specifier_qualifier_list "=>" "." type_qualifier specifier_qualifier_list) (COMMENT specifier_qualifier_list "=>" "." type_specifier) (COMMENT specifier_qualifier_list "=>" "." type_specifier specifier_qualifier_list) (COMMENT struct_declaration "=>" "." specifier_qualifier_list struct_declarator_list SEMICOLON) (COMMENT struct_declaration_list "=>" "." struct_declaration_list struct_declaration) (COMMENT struct_declaration_list "=>" "." struct_declaration) (COMMENT struct_or_union "=>" "." UNION) (COMMENT struct_or_union "=>" "." STRUCT) (COMMENT struct_or_union_specifier "=>" "." struct_or_union IDENTIFIER) (COMMENT struct_or_union_specifier "=>" struct_or_union LCURLY "." struct_declaration_list RCURLY) (COMMENT struct_or_union_specifier "=>" "." struct_or_union LCURLY struct_declaration_list RCURLY) (COMMENT struct_or_union_specifier "=>" "." struct_or_union IDENTIFIER LCURLY struct_declaration_list RCURLY) (COMMENT type_specifier "=>" "." TYPE_NAME) (COMMENT type_specifier "=>" "." enum_specifier) (COMMENT type_specifier "=>" "." struct_or_union_specifier) (COMMENT type_specifier "=>" "." UNSIGNED) (COMMENT type_specifier "=>" "." SIGNED) (COMMENT type_specifier "=>" "." DOUBLE) (COMMENT type_specifier "=>" "." FLOAT) (COMMENT type_specifier "=>" "." LONG) (COMMENT type_specifier "=>" "." INT) (COMMENT type_specifier "=>" "." SHORT) (COMMENT type_specifier "=>" "." CHAR) (COMMENT type_specifier "=>" "." VOID) (SHIFT (TYPE_NAME) s16) (SHIFT (CHAR) s22) (SHIFT (SHORT) s23) (SHIFT (INT) s24) (SHIFT (LONG) s25) (SHIFT (SIGNED) s26) (SHIFT (UNSIGNED) s27) (SHIFT (FLOAT) s28) (SHIFT (DOUBLE) s29) (SHIFT (CONST) s30) (SHIFT (VOLATILE) s31) (SHIFT (VOID) s32) (SHIFT (STRUCT) s33) (SHIFT (UNION) s34) (SHIFT (ENUM) s35) (GOTO type_specifier s85) (GOTO struct_or_union_specifier s5) (GOTO struct_or_union s6) (GOTO struct_declaration_list s326) (GOTO struct_declaration s327) (GOTO specifier_qualifier_list s328) (GOTO enum_specifier s7) (GOTO type_qualifier s87))
   (STATE s326 (COMMENT type_qualifier "=>" "." VOLATILE) (COMMENT type_qualifier "=>" "." CONST) (COMMENT enum_specifier "=>" "." ENUM IDENTIFIER) (COMMENT enum_specifier "=>" "." ENUM IDENTIFIER LCURLY enumerator_list RCURLY) (COMMENT enum_specifier "=>" "." ENUM LCURLY enumerator_list RCURLY) (COMMENT specifier_qualifier_list "=>" "." type_qualifier) (COMMENT specifier_qualifier_list "=>" "." type_qualifier specifier_qualifier_list) (COMMENT specifier_qualifier_list "=>" "." type_specifier) (COMMENT specifier_qualifier_list "=>" "." type_specifier specifier_qualifier_list) (COMMENT struct_declaration "=>" "." specifier_qualifier_list struct_declarator_list SEMICOLON) (COMMENT struct_declaration_list "=>" struct_declaration_list "." struct_declaration) (COMMENT struct_or_union "=>" "." UNION) (COMMENT struct_or_union "=>" "." STRUCT) (COMMENT struct_or_union_specifier "=>" "." struct_or_union IDENTIFIER) (COMMENT struct_or_union_specifier "=>" struct_or_union LCURLY struct_declaration_list "." RCURLY) (COMMENT struct_or_union_specifier "=>" "." struct_or_union LCURLY struct_declaration_list RCURLY) (COMMENT struct_or_union_specifier "=>" "." struct_or_union IDENTIFIER LCURLY struct_declaration_list RCURLY) (COMMENT type_specifier "=>" "." TYPE_NAME) (COMMENT type_specifier "=>" "." enum_specifier) (COMMENT type_specifier "=>" "." struct_or_union_specifier) (COMMENT type_specifier "=>" "." UNSIGNED) (COMMENT type_specifier "=>" "." SIGNED) (COMMENT type_specifier "=>" "." DOUBLE) (COMMENT type_specifier "=>" "." FLOAT) (COMMENT type_specifier "=>" "." LONG) (COMMENT type_specifier "=>" "." INT) (COMMENT type_specifier "=>" "." SHORT) (COMMENT type_specifier "=>" "." CHAR) (COMMENT type_specifier "=>" "." VOID) (SHIFT (TYPE_NAME) s16) (SHIFT (CHAR) s22) (SHIFT (SHORT) s23) (SHIFT (INT) s24) (SHIFT (LONG) s25) (SHIFT (SIGNED) s26) (SHIFT (UNSIGNED) s27) (SHIFT (FLOAT) s28) (SHIFT (DOUBLE) s29) (SHIFT (CONST) s30) (SHIFT (VOLATILE) s31) (SHIFT (VOID) s32) (SHIFT (STRUCT) s33) (SHIFT (UNION) s34) (SHIFT (ENUM) s35) (SHIFT (RCURLY) s340) (GOTO type_specifier s85) (GOTO struct_or_union_specifier s5) (GOTO struct_or_union s6) (GOTO struct_declaration s339) (GOTO specifier_qualifier_list s328) (GOTO enum_specifier s7) (GOTO type_qualifier s87))
   (STATE s327 (COMMENT struct_declaration_list "=>" struct_declaration ".") (REDUCE () r110))
   (STATE s328 (COMMENT pointer "=>" "." STAR type_qualifier_list pointer) (COMMENT pointer "=>" "." STAR pointer) (COMMENT pointer "=>" "." STAR type_qualifier_list) (COMMENT pointer "=>" "." STAR) (COMMENT direct_declarator "=>" "." direct_declarator LPAREN RPAREN) (COMMENT direct_declarator "=>" "." direct_declarator LPAREN identifier_list RPAREN) (COMMENT direct_declarator "=>" "." direct_declarator LPAREN parameter_type_list RPAREN) (COMMENT direct_declarator "=>" "." direct_declarator LBRACK RBRACK) (COMMENT direct_declarator "=>" "." direct_declarator LBRACK constant_expression RBRACK) (COMMENT direct_declarator "=>" "." LPAREN declarator RPAREN) (COMMENT direct_declarator "=>" "." IDENTIFIER) (COMMENT declarator "=>" "." direct_declarator) (COMMENT declarator "=>" "." pointer direct_declarator) (COMMENT struct_declarator "=>" "." declarator COLON constant_expression) (COMMENT struct_declarator "=>" "." COLON constant_expression) (COMMENT struct_declarator "=>" "." declarator) (COMMENT struct_declarator_list "=>" "." struct_declarator_list COMMA struct_declarator) (COMMENT struct_declarator_list "=>" "." struct_declarator) (COMMENT struct_declaration "=>" specifier_qualifier_list "." struct_declarator_list SEMICOLON) (SHIFT (IDENTIFIER) s15) (SHIFT (LPAREN) s36) (SHIFT (STAR) s37) (SHIFT (COLON) s332) (GOTO struct_declarator_list s329) (GOTO struct_declarator s330) (GOTO declarator s331) (GOTO direct_declarator s10) (GOTO pointer s11))
   (STATE s329 (COMMENT struct_declarator_list "=>" struct_declarator_list "." COMMA struct_declarator) (COMMENT struct_declaration "=>" specifier_qualifier_list struct_declarator_list "." SEMICOLON) (SHIFT (COMMA) s336) (SHIFT (SEMICOLON) s337))
   (STATE s330 (COMMENT struct_declarator_list "=>" struct_declarator ".") (REDUCE () r117))
   (STATE s331 (COMMENT struct_declarator "=>" declarator "." COLON constant_expression) (COMMENT struct_declarator "=>" declarator ".") (REDUCE (COMMA) r119) (SHIFT (COLON) s334) (REDUCE (SEMICOLON) r119))
   (STATE s332 (COMMENT struct_declarator "=>" COLON "." constant_expression) (COMMENT constant_expression "=>" "." conditional_expression) (COMMENT conditional_expression "=>" "." logical_or_expression QMARK expression COLON conditional_expression) (COMMENT conditional_expression "=>" "." logical_or_expression) (COMMENT logical_or_expression "=>" "." logical_or_expression OR_OP logical_and_expression) (COMMENT logical_or_expression "=>" "." logical_and_expression) (COMMENT logical_and_expression "=>" "." logical_and_expression AND_OP inclusive_or_expression) (COMMENT logical_and_expression "=>" "." inclusive_or_expression) (COMMENT inclusive_or_expression "=>" "." inclusive_or_expression PIPE exclusive_or_expression) (COMMENT inclusive_or_expression "=>" "." exclusive_or_expression) (COMMENT exclusive_or_expression "=>" "." exclusive_or_expression CARROT and_expression) (COMMENT exclusive_or_expression "=>" "." and_expression) (COMMENT and_expression "=>" "." and_expression AMPERSAND equality_expression) (COMMENT and_expression "=>" "." equality_expression) (COMMENT equality_expression "=>" "." equality_expression NE_OP relational_expression) (COMMENT equality_expression "=>" "." equality_expression EQ_OP relational_expression) (COMMENT equality_expression "=>" "." relational_expression) (COMMENT relational_expression "=>" "." relational_expression GE_OP shift_expression) (COMMENT relational_expression "=>" "." relational_expression LE_OP shift_expression) (COMMENT relational_expression "=>" "." relational_expression GREATER_OP shift_expression) (COMMENT relational_expression "=>" "." relational_expression LESS_OP shift_expression) (COMMENT relational_expression "=>" "." shift_expression) (COMMENT shift_expression "=>" "." shift_expression RIGHT_OP additive_expression) (COMMENT shift_expression "=>" "." shift_expression LEFT_OP additive_expression) (COMMENT shift_expression "=>" "." additive_expression) (COMMENT additive_expression "=>" "." additive_expression MINUS multiplicative_expression) (COMMENT additive_expression "=>" "." additive_expression PLUS multiplicative_expression) (COMMENT additive_expression "=>" "." multiplicative_expression) (COMMENT multiplicative_expression "=>" "." multiplicative_expression AMPERSAND cast_expression) (COMMENT multiplicative_expression "=>" "." multiplicative_expression FORWARD_SLASH cast_expression) (COMMENT multiplicative_expression "=>" "." multiplicative_expression STAR cast_expression) (COMMENT multiplicative_expression "=>" "." cast_expression) (COMMENT cast_expression "=>" "." LPAREN type_name RPAREN cast_expression) (COMMENT cast_expression "=>" "." unary_expression) (COMMENT unary_operator "=>" "." BANG) (COMMENT unary_operator "=>" "." TWIDLE) (COMMENT unary_operator "=>" "." MINUS) (COMMENT unary_operator "=>" "." PLUS) (COMMENT unary_operator "=>" "." STAR) (COMMENT unary_operator "=>" "." AMPERSAND) (COMMENT unary_expression "=>" "." SIZEOF LPAREN type_name RPAREN) (COMMENT unary_expression "=>" "." SIZEOF unary_expression) (COMMENT unary_expression "=>" "." unary_operator cast_expression) (COMMENT unary_expression "=>" "." DEC_OP unary_expression) (COMMENT unary_expression "=>" "." INC_OP unary_expression) (COMMENT unary_expression "=>" "." postfix_expression) (COMMENT postfix_expression "=>" "." postfix_expression DEC_OP) (COMMENT postfix_expression "=>" "." postfix_expression INC_OP) (COMMENT postfix_expression "=>" "." postfix_expression PTR_OP IDENTIFIER) (COMMENT postfix_expression "=>" "." postfix_expression DOT IDENTIFIER) (COMMENT postfix_expression "=>" "." postfix_expression LPAREN argument_expression_list RPAREN) (COMMENT postfix_expression "=>" "." postfix_expression LPAREN RPAREN) (COMMENT postfix_expression "=>" "." postfix_expression LBRACK expression RBRACK) (COMMENT postfix_expression "=>" "." primary_expression) (COMMENT primary_expression "=>" "." LPAREN expression RPAREN) (COMMENT primary_expression "=>" "." STRING_LITERAL) (COMMENT primary_expression "=>" "." CONSTANT) (COMMENT primary_expression "=>" "." IDENTIFIER) (SHIFT (IDENTIFIER) s68) (SHIFT (CONSTANT) s69) (SHIFT (STRING_LITERAL) s70) (SHIFT (SIZEOF) s71) (SHIFT (INC_OP) s72) (SHIFT (DEC_OP) s73) (SHIFT (LPAREN) s74) (SHIFT (AMPERSAND) s75) (SHIFT (STAR) s76) (SHIFT (PLUS) s77) (SHIFT (MINUS) s78) (SHIFT (TWIDLE) s79) (SHIFT (BANG) s80) (GOTO primary_expression s51) (GOTO postfix_expression s52) (GOTO unary_expression s53) (GOTO unary_operator s54) (GOTO cast_expression s55) (GOTO multiplicative_expression s56) (GOTO additive_expression s57) (GOTO shift_expression s58) (GOTO relational_expression s59) (GOTO equality_expression s60) (GOTO and_expression s61) (GOTO exclusive_or_expression s62) (GOTO inclusive_or_expression s63) (GOTO logical_and_expression s64) (GOTO logical_or_expression s65) (GOTO conditional_expression s66) (GOTO constant_expression s333))
   (STATE s333 (COMMENT struct_declarator "=>" COLON constant_expression ".") (REDUCE () r120))
   (STATE s334 (COMMENT struct_declarator "=>" declarator COLON "." constant_expression) (COMMENT constant_expression "=>" "." conditional_expression) (COMMENT conditional_expression "=>" "." logical_or_expression QMARK expression COLON conditional_expression) (COMMENT conditional_expression "=>" "." logical_or_expression) (COMMENT logical_or_expression "=>" "." logical_or_expression OR_OP logical_and_expression) (COMMENT logical_or_expression "=>" "." logical_and_expression) (COMMENT logical_and_expression "=>" "." logical_and_expression AND_OP inclusive_or_expression) (COMMENT logical_and_expression "=>" "." inclusive_or_expression) (COMMENT inclusive_or_expression "=>" "." inclusive_or_expression PIPE exclusive_or_expression) (COMMENT inclusive_or_expression "=>" "." exclusive_or_expression) (COMMENT exclusive_or_expression "=>" "." exclusive_or_expression CARROT and_expression) (COMMENT exclusive_or_expression "=>" "." and_expression) (COMMENT and_expression "=>" "." and_expression AMPERSAND equality_expression) (COMMENT and_expression "=>" "." equality_expression) (COMMENT equality_expression "=>" "." equality_expression NE_OP relational_expression) (COMMENT equality_expression "=>" "." equality_expression EQ_OP relational_expression) (COMMENT equality_expression "=>" "." relational_expression) (COMMENT relational_expression "=>" "." relational_expression GE_OP shift_expression) (COMMENT relational_expression "=>" "." relational_expression LE_OP shift_expression) (COMMENT relational_expression "=>" "." relational_expression GREATER_OP shift_expression) (COMMENT relational_expression "=>" "." relational_expression LESS_OP shift_expression) (COMMENT relational_expression "=>" "." shift_expression) (COMMENT shift_expression "=>" "." shift_expression RIGHT_OP additive_expression) (COMMENT shift_expression "=>" "." shift_expression LEFT_OP additive_expression) (COMMENT shift_expression "=>" "." additive_expression) (COMMENT additive_expression "=>" "." additive_expression MINUS multiplicative_expression) (COMMENT additive_expression "=>" "." additive_expression PLUS multiplicative_expression) (COMMENT additive_expression "=>" "." multiplicative_expression) (COMMENT multiplicative_expression "=>" "." multiplicative_expression AMPERSAND cast_expression) (COMMENT multiplicative_expression "=>" "." multiplicative_expression FORWARD_SLASH cast_expression) (COMMENT multiplicative_expression "=>" "." multiplicative_expression STAR cast_expression) (COMMENT multiplicative_expression "=>" "." cast_expression) (COMMENT cast_expression "=>" "." LPAREN type_name RPAREN cast_expression) (COMMENT cast_expression "=>" "." unary_expression) (COMMENT unary_operator "=>" "." BANG) (COMMENT unary_operator "=>" "." TWIDLE) (COMMENT unary_operator "=>" "." MINUS) (COMMENT unary_operator "=>" "." PLUS) (COMMENT unary_operator "=>" "." STAR) (COMMENT unary_operator "=>" "." AMPERSAND) (COMMENT unary_expression "=>" "." SIZEOF LPAREN type_name RPAREN) (COMMENT unary_expression "=>" "." SIZEOF unary_expression) (COMMENT unary_expression "=>" "." unary_operator cast_expression) (COMMENT unary_expression "=>" "." DEC_OP unary_expression) (COMMENT unary_expression "=>" "." INC_OP unary_expression) (COMMENT unary_expression "=>" "." postfix_expression) (COMMENT postfix_expression "=>" "." postfix_expression DEC_OP) (COMMENT postfix_expression "=>" "." postfix_expression INC_OP) (COMMENT postfix_expression "=>" "." postfix_expression PTR_OP IDENTIFIER) (COMMENT postfix_expression "=>" "." postfix_expression DOT IDENTIFIER) (COMMENT postfix_expression "=>" "." postfix_expression LPAREN argument_expression_list RPAREN) (COMMENT postfix_expression "=>" "." postfix_expression LPAREN RPAREN) (COMMENT postfix_expression "=>" "." postfix_expression LBRACK expression RBRACK) (COMMENT postfix_expression "=>" "." primary_expression) (COMMENT primary_expression "=>" "." LPAREN expression RPAREN) (COMMENT primary_expression "=>" "." STRING_LITERAL) (COMMENT primary_expression "=>" "." CONSTANT) (COMMENT primary_expression "=>" "." IDENTIFIER) (SHIFT (IDENTIFIER) s68) (SHIFT (CONSTANT) s69) (SHIFT (STRING_LITERAL) s70) (SHIFT (SIZEOF) s71) (SHIFT (INC_OP) s72) (SHIFT (DEC_OP) s73) (SHIFT (LPAREN) s74) (SHIFT (AMPERSAND) s75) (SHIFT (STAR) s76) (SHIFT (PLUS) s77) (SHIFT (MINUS) s78) (SHIFT (TWIDLE) s79) (SHIFT (BANG) s80) (GOTO primary_expression s51) (GOTO postfix_expression s52) (GOTO unary_expression s53) (GOTO unary_operator s54) (GOTO cast_expression s55) (GOTO multiplicative_expression s56) (GOTO additive_expression s57) (GOTO shift_expression s58) (GOTO relational_expression s59) (GOTO equality_expression s60) (GOTO and_expression s61) (GOTO exclusive_or_expression s62) (GOTO inclusive_or_expression s63) (GOTO logical_and_expression s64) (GOTO logical_or_expression s65) (GOTO conditional_expression s66) (GOTO constant_expression s335))
   (STATE s335 (COMMENT struct_declarator "=>" declarator COLON constant_expression ".") (REDUCE () r121))
   (STATE s336 (COMMENT pointer "=>" "." STAR type_qualifier_list pointer) (COMMENT pointer "=>" "." STAR pointer) (COMMENT pointer "=>" "." STAR type_qualifier_list) (COMMENT pointer "=>" "." STAR) (COMMENT direct_declarator "=>" "." direct_declarator LPAREN RPAREN) (COMMENT direct_declarator "=>" "." direct_declarator LPAREN identifier_list RPAREN) (COMMENT direct_declarator "=>" "." direct_declarator LPAREN parameter_type_list RPAREN) (COMMENT direct_declarator "=>" "." direct_declarator LBRACK RBRACK) (COMMENT direct_declarator "=>" "." direct_declarator LBRACK constant_expression RBRACK) (COMMENT direct_declarator "=>" "." LPAREN declarator RPAREN) (COMMENT direct_declarator "=>" "." IDENTIFIER) (COMMENT declarator "=>" "." direct_declarator) (COMMENT declarator "=>" "." pointer direct_declarator) (COMMENT struct_declarator "=>" "." declarator COLON constant_expression) (COMMENT struct_declarator "=>" "." COLON constant_expression) (COMMENT struct_declarator "=>" "." declarator) (COMMENT struct_declarator_list "=>" struct_declarator_list COMMA "." struct_declarator) (SHIFT (IDENTIFIER) s15) (SHIFT (LPAREN) s36) (SHIFT (STAR) s37) (SHIFT (COLON) s332) (GOTO struct_declarator s338) (GOTO declarator s331) (GOTO direct_declarator s10) (GOTO pointer s11))
   (STATE s337 (COMMENT struct_declaration "=>" specifier_qualifier_list struct_declarator_list SEMICOLON ".") (REDUCE () r112))
   (STATE s338 (COMMENT struct_declarator_list "=>" struct_declarator_list COMMA struct_declarator ".") (REDUCE () r118))
   (STATE s339 (COMMENT struct_declaration_list "=>" struct_declaration_list struct_declaration ".") (REDUCE () r111))
   (STATE s340 (COMMENT struct_or_union_specifier "=>" struct_or_union LCURLY struct_declaration_list RCURLY ".") (REDUCE () r106))
   (STATE s341 (COMMENT type_qualifier "=>" "." VOLATILE) (COMMENT type_qualifier "=>" "." CONST) (COMMENT enum_specifier "=>" "." ENUM IDENTIFIER) (COMMENT enum_specifier "=>" "." ENUM IDENTIFIER LCURLY enumerator_list RCURLY) (COMMENT enum_specifier "=>" "." ENUM LCURLY enumerator_list RCURLY) (COMMENT specifier_qualifier_list "=>" "." type_qualifier) (COMMENT specifier_qualifier_list "=>" "." type_qualifier specifier_qualifier_list) (COMMENT specifier_qualifier_list "=>" "." type_specifier) (COMMENT specifier_qualifier_list "=>" "." type_specifier specifier_qualifier_list) (COMMENT struct_declaration "=>" "." specifier_qualifier_list struct_declarator_list SEMICOLON) (COMMENT struct_declaration_list "=>" "." struct_declaration_list struct_declaration) (COMMENT struct_declaration_list "=>" "." struct_declaration) (COMMENT struct_or_union "=>" "." UNION) (COMMENT struct_or_union "=>" "." STRUCT) (COMMENT struct_or_union_specifier "=>" "." struct_or_union IDENTIFIER) (COMMENT struct_or_union_specifier "=>" "." struct_or_union LCURLY struct_declaration_list RCURLY) (COMMENT struct_or_union_specifier "=>" struct_or_union IDENTIFIER LCURLY "." struct_declaration_list RCURLY) (COMMENT struct_or_union_specifier "=>" "." struct_or_union IDENTIFIER LCURLY struct_declaration_list RCURLY) (COMMENT type_specifier "=>" "." TYPE_NAME) (COMMENT type_specifier "=>" "." enum_specifier) (COMMENT type_specifier "=>" "." struct_or_union_specifier) (COMMENT type_specifier "=>" "." UNSIGNED) (COMMENT type_specifier "=>" "." SIGNED) (COMMENT type_specifier "=>" "." DOUBLE) (COMMENT type_specifier "=>" "." FLOAT) (COMMENT type_specifier "=>" "." LONG) (COMMENT type_specifier "=>" "." INT) (COMMENT type_specifier "=>" "." SHORT) (COMMENT type_specifier "=>" "." CHAR) (COMMENT type_specifier "=>" "." VOID) (SHIFT (TYPE_NAME) s16) (SHIFT (CHAR) s22) (SHIFT (SHORT) s23) (SHIFT (INT) s24) (SHIFT (LONG) s25) (SHIFT (SIGNED) s26) (SHIFT (UNSIGNED) s27) (SHIFT (FLOAT) s28) (SHIFT (DOUBLE) s29) (SHIFT (CONST) s30) (SHIFT (VOLATILE) s31) (SHIFT (VOID) s32) (SHIFT (STRUCT) s33) (SHIFT (UNION) s34) (SHIFT (ENUM) s35) (GOTO type_specifier s85) (GOTO struct_or_union_specifier s5) (GOTO struct_or_union s6) (GOTO struct_declaration_list s342) (GOTO struct_declaration s327) (GOTO specifier_qualifier_list s328) (GOTO enum_specifier s7) (GOTO type_qualifier s87))
   (STATE s342 (COMMENT type_qualifier "=>" "." VOLATILE) (COMMENT type_qualifier "=>" "." CONST) (COMMENT enum_specifier "=>" "." ENUM IDENTIFIER) (COMMENT enum_specifier "=>" "." ENUM IDENTIFIER LCURLY enumerator_list RCURLY) (COMMENT enum_specifier "=>" "." ENUM LCURLY enumerator_list RCURLY) (COMMENT specifier_qualifier_list "=>" "." type_qualifier) (COMMENT specifier_qualifier_list "=>" "." type_qualifier specifier_qualifier_list) (COMMENT specifier_qualifier_list "=>" "." type_specifier) (COMMENT specifier_qualifier_list "=>" "." type_specifier specifier_qualifier_list) (COMMENT struct_declaration "=>" "." specifier_qualifier_list struct_declarator_list SEMICOLON) (COMMENT struct_declaration_list "=>" struct_declaration_list "." struct_declaration) (COMMENT struct_or_union "=>" "." UNION) (COMMENT struct_or_union "=>" "." STRUCT) (COMMENT struct_or_union_specifier "=>" "." struct_or_union IDENTIFIER) (COMMENT struct_or_union_specifier "=>" "." struct_or_union LCURLY struct_declaration_list RCURLY) (COMMENT struct_or_union_specifier "=>" struct_or_union IDENTIFIER LCURLY struct_declaration_list "." RCURLY) (COMMENT struct_or_union_specifier "=>" "." struct_or_union IDENTIFIER LCURLY struct_declaration_list RCURLY) (COMMENT type_specifier "=>" "." TYPE_NAME) (COMMENT type_specifier "=>" "." enum_specifier) (COMMENT type_specifier "=>" "." struct_or_union_specifier) (COMMENT type_specifier "=>" "." UNSIGNED) (COMMENT type_specifier "=>" "." SIGNED) (COMMENT type_specifier "=>" "." DOUBLE) (COMMENT type_specifier "=>" "." FLOAT) (COMMENT type_specifier "=>" "." LONG) (COMMENT type_specifier "=>" "." INT) (COMMENT type_specifier "=>" "." SHORT) (COMMENT type_specifier "=>" "." CHAR) (COMMENT type_specifier "=>" "." VOID) (SHIFT (TYPE_NAME) s16) (SHIFT (CHAR) s22) (SHIFT (SHORT) s23) (SHIFT (INT) s24) (SHIFT (LONG) s25) (SHIFT (SIGNED) s26) (SHIFT (UNSIGNED) s27) (SHIFT (FLOAT) s28) (SHIFT (DOUBLE) s29) (SHIFT (CONST) s30) (SHIFT (VOLATILE) s31) (SHIFT (VOID) s32) (SHIFT (STRUCT) s33) (SHIFT (UNION) s34) (SHIFT (ENUM) s35) (SHIFT (RCURLY) s343) (GOTO type_specifier s85) (GOTO struct_or_union_specifier s5) (GOTO struct_or_union s6) (GOTO struct_declaration s339) (GOTO specifier_qualifier_list s328) (GOTO enum_specifier s7) (GOTO type_qualifier s87))
   (STATE s343 (COMMENT struct_or_union_specifier "=>" struct_or_union IDENTIFIER LCURLY struct_declaration_list RCURLY ".") (REDUCE () r105))
   (STATE s344 (COMMENT declaration_specifiers "=>" type_specifier declaration_specifiers ".") (REDUCE () r81))
   (STATE s345 (COMMENT declaration_specifiers "=>" storage_class_specifier declaration_specifiers ".") (REDUCE () r79))
   (STATE s346 (COMMENT function_definition "=>" declaration_specifiers declarator "." compound_statement) (COMMENT function_definition "=>" declaration_specifiers declarator "." declaration_list compound_statement) (COMMENT declaration_list "=>" "." declaration_list declaration) (COMMENT declaration_list "=>" "." declaration) (COMMENT compound_statement "=>" "." LCURLY declaration_list statement_list RCURLY) (COMMENT compound_statement "=>" "." LCURLY declaration_list RCURLY) (COMMENT compound_statement "=>" "." LCURLY statement_list RCURLY) (COMMENT compound_statement "=>" "." LCURLY RCURLY) (COMMENT type_qualifier "=>" "." VOLATILE) (COMMENT type_qualifier "=>" "." CONST) (COMMENT enum_specifier "=>" "." ENUM IDENTIFIER) (COMMENT enum_specifier "=>" "." ENUM IDENTIFIER LCURLY enumerator_list RCURLY) (COMMENT enum_specifier "=>" "." ENUM LCURLY enumerator_list RCURLY) (COMMENT struct_or_union "=>" "." UNION) (COMMENT struct_or_union "=>" "." STRUCT) (COMMENT struct_or_union_specifier "=>" "." struct_or_union IDENTIFIER) (COMMENT struct_or_union_specifier "=>" "." struct_or_union LCURLY struct_declaration_list RCURLY) (COMMENT struct_or_union_specifier "=>" "." struct_or_union IDENTIFIER LCURLY struct_declaration_list RCURLY) (COMMENT type_specifier "=>" "." TYPE_NAME) (COMMENT type_specifier "=>" "." enum_specifier) (COMMENT type_specifier "=>" "." struct_or_union_specifier) (COMMENT type_specifier "=>" "." UNSIGNED) (COMMENT type_specifier "=>" "." SIGNED) (COMMENT type_specifier "=>" "." DOUBLE) (COMMENT type_specifier "=>" "." FLOAT) (COMMENT type_specifier "=>" "." LONG) (COMMENT type_specifier "=>" "." INT) (COMMENT type_specifier "=>" "." SHORT) (COMMENT type_specifier "=>" "." CHAR) (COMMENT type_specifier "=>" "." VOID) (COMMENT storage_class_specifier "=>" "." REGISTER) (COMMENT storage_class_specifier "=>" "." AUTO) (COMMENT storage_class_specifier "=>" "." STATIC) (COMMENT storage_class_specifier "=>" "." EXTERN) (COMMENT storage_class_specifier "=>" "." TYPEDEF) (COMMENT init_declarator "=>" declarator "." EQUAL_SIGN initializer) (COMMENT init_declarator "=>" declarator ".") (COMMENT declaration_specifiers "=>" "." type_qualifier declaration_specifiers) (COMMENT declaration_specifiers "=>" "." type_qualifier) (COMMENT declaration_specifiers "=>" "." type_specifier declaration_specifiers) (COMMENT declaration_specifiers "=>" "." type_specifier) (COMMENT declaration_specifiers "=>" "." storage_class_specifier declaration_specifiers) (COMMENT declaration_specifiers "=>" "." storage_class_specifier) (COMMENT declaration "=>" "." declaration_specifiers init_declarator_list SEMICOLON) (COMMENT declaration "=>" "." declaration_specifiers SEMICOLON) (SHIFT (TYPE_NAME) s16) (SHIFT (TYPEDEF) s17) (SHIFT (EXTERN) s18) (SHIFT (STATIC) s19) (SHIFT (AUTO) s20) (SHIFT (REGISTER) s21) (SHIFT (CHAR) s22) (SHIFT (SHORT) s23) (SHIFT (INT) s24) (SHIFT (LONG) s25) (SHIFT (SIGNED) s26) (SHIFT (UNSIGNED) s27) (SHIFT (FLOAT) s28) (SHIFT (DOUBLE) s29) (SHIFT (CONST) s30) (SHIFT (VOLATILE) s31) (SHIFT (VOID) s32) (SHIFT (STRUCT) s33) (SHIFT (UNION) s34) (SHIFT (ENUM) s35) (SHIFT (LCURLY) s231) (REDUCE (COMMA) r86) (SHIFT (EQUAL_SIGN) s310) (REDUCE (SEMICOLON) r86) (GOTO declaration s227) (GOTO declaration_specifiers s228) (GOTO storage_class_specifier s3) (GOTO type_specifier s4) (GOTO struct_or_union_specifier s5) (GOTO struct_or_union s6) (GOTO enum_specifier s7) (GOTO type_qualifier s8) (GOTO compound_statement s347) (GOTO declaration_list s348))
   (STATE s347 (COMMENT function_definition "=>" declaration_specifiers declarator compound_statement ".") (REDUCE () r210))
   (STATE s348 (COMMENT function_definition "=>" declaration_specifiers declarator declaration_list "." compound_statement) (COMMENT declaration_list "=>" declaration_list "." declaration) (COMMENT compound_statement "=>" "." LCURLY declaration_list statement_list RCURLY) (COMMENT compound_statement "=>" "." LCURLY declaration_list RCURLY) (COMMENT compound_statement "=>" "." LCURLY statement_list RCURLY) (COMMENT compound_statement "=>" "." LCURLY RCURLY) (COMMENT type_qualifier "=>" "." VOLATILE) (COMMENT type_qualifier "=>" "." CONST) (COMMENT enum_specifier "=>" "." ENUM IDENTIFIER) (COMMENT enum_specifier "=>" "." ENUM IDENTIFIER LCURLY enumerator_list RCURLY) (COMMENT enum_specifier "=>" "." ENUM LCURLY enumerator_list RCURLY) (COMMENT struct_or_union "=>" "." UNION) (COMMENT struct_or_union "=>" "." STRUCT) (COMMENT struct_or_union_specifier "=>" "." struct_or_union IDENTIFIER) (COMMENT struct_or_union_specifier "=>" "." struct_or_union LCURLY struct_declaration_list RCURLY) (COMMENT struct_or_union_specifier "=>" "." struct_or_union IDENTIFIER LCURLY struct_declaration_list RCURLY) (COMMENT type_specifier "=>" "." TYPE_NAME) (COMMENT type_specifier "=>" "." enum_specifier) (COMMENT type_specifier "=>" "." struct_or_union_specifier) (COMMENT type_specifier "=>" "." UNSIGNED) (COMMENT type_specifier "=>" "." SIGNED) (COMMENT type_specifier "=>" "." DOUBLE) (COMMENT type_specifier "=>" "." FLOAT) (COMMENT type_specifier "=>" "." LONG) (COMMENT type_specifier "=>" "." INT) (COMMENT type_specifier "=>" "." SHORT) (COMMENT type_specifier "=>" "." CHAR) (COMMENT type_specifier "=>" "." VOID) (COMMENT storage_class_specifier "=>" "." REGISTER) (COMMENT storage_class_specifier "=>" "." AUTO) (COMMENT storage_class_specifier "=>" "." STATIC) (COMMENT storage_class_specifier "=>" "." EXTERN) (COMMENT storage_class_specifier "=>" "." TYPEDEF) (COMMENT declaration_specifiers "=>" "." type_qualifier declaration_specifiers) (COMMENT declaration_specifiers "=>" "." type_qualifier) (COMMENT declaration_specifiers "=>" "." type_specifier declaration_specifiers) (COMMENT declaration_specifiers "=>" "." type_specifier) (COMMENT declaration_specifiers "=>" "." storage_class_specifier declaration_specifiers) (COMMENT declaration_specifiers "=>" "." storage_class_specifier) (COMMENT declaration "=>" "." declaration_specifiers init_declarator_list SEMICOLON) (COMMENT declaration "=>" "." declaration_specifiers SEMICOLON) (SHIFT (TYPE_NAME) s16) (SHIFT (TYPEDEF) s17) (SHIFT (EXTERN) s18) (SHIFT (STATIC) s19) (SHIFT (AUTO) s20) (SHIFT (REGISTER) s21) (SHIFT (CHAR) s22) (SHIFT (SHORT) s23) (SHIFT (INT) s24) (SHIFT (LONG) s25) (SHIFT (SIGNED) s26) (SHIFT (UNSIGNED) s27) (SHIFT (FLOAT) s28) (SHIFT (DOUBLE) s29) (SHIFT (CONST) s30) (SHIFT (VOLATILE) s31) (SHIFT (VOID) s32) (SHIFT (STRUCT) s33) (SHIFT (UNION) s34) (SHIFT (ENUM) s35) (SHIFT (LCURLY) s231) (GOTO declaration s300) (GOTO declaration_specifiers s228) (GOTO storage_class_specifier s3) (GOTO type_specifier s4) (GOTO struct_or_union_specifier s5) (GOTO struct_or_union s6) (GOTO enum_specifier s7) (GOTO type_qualifier s8) (GOTO compound_statement s349))
   (STATE s349 (COMMENT function_definition "=>" declaration_specifiers declarator declaration_list compound_statement ".") (REDUCE () r209))))

(write ansi-c-pda-risc)