#lang racket

(require "../pda-to-pda-risc/macro-glue.rkt")

(pda->pda-risc
 (TOKENS IDENTIFIER CONSTANT STRING_LITERAL SIZEOF PTR_OP INC_OP DEC_OP
         LEFT_OP RIGHT_OP LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP  MUL_ASSIGN
         DIV_ASSIGN MOD_ASSIGN ADD_ASSIGN SUB_ASSIGN LEFT_ASSIGN RIGHT_ASSIGN
         AND_ASSIGN XOR_ASSIGN OR_ASSIGN TYPE_NAME TYPEDEF EXTERN STATIC AUTO
         REGISTER CHAR SHORT INT LONG SIGNED UNSIGNED FLOAT DOUBLE CONST
         VOLATILE VOID STRUCT UNION ENUM ELLIPSIS CASE DEFAULT IF ELSE SWITCH
         WHILE DO FOR GOTO CONTINUE BREAK RETURN LPAREN RPAREN LBRACK RBRACK
         LCURLY RCURLY DOT COMMA AMPERSAND STAR PLUS MINUS TWIDLE BANG
         FORWARD_SLASH LESS_OP GREATER_OP CARROT PIPE QMARK COLON EQUAL_SIGN
         SEMICOLON *EOF*)
 (EOS *EOF*)
 (START s1)
; (RULE r1 *start (_ _) #f)
 (RULE r2 primary_expression (IDENTIFIER) 0)
 (RULE r3 primary_expression (CONSTANT) 0)
 (RULE r4 primary_expression (STRING_LITERAL) 0)
 (RULE r5 primary_expression (LPAREN expression RPAREN) 0)
 (RULE r6 postfix_expression (primary_expression) 0)
 (RULE r7 postfix_expression (postfix_expression LBRACK expression RBRACK) 0)
 (RULE r8 postfix_expression (postfix_expression LPAREN RPAREN) 0)
 (RULE r9 postfix_expression (postfix_expression LPAREN argument_expression_list RPAREN) 0)
 (RULE r10 postfix_expression (postfix_expression DOT IDENTIFIER) 0)
 (RULE r11 postfix_expression (postfix_expression PTR_OP IDENTIFIER) 0)
 (RULE r12 postfix_expression (postfix_expression INC_OP) 0)
 (RULE r13 postfix_expression (postfix_expression DEC_OP) 0)
 (RULE r14 argument_expression_list (assignment_expression) 0)
 (RULE r15 argument_expression_list (argument_expression_list COMMA assignment_expression) 0)
 (RULE r16 unary_expression (postfix_expression) 0)
 (RULE r17 unary_expression (INC_OP unary_expression) 0)
 (RULE r18 unary_expression (DEC_OP unary_expression) 0)
 (RULE r19 unary_expression (unary_operator cast_expression) 0)
 (RULE r20 unary_expression (SIZEOF unary_expression) 0)
 (RULE r21 unary_expression (SIZEOF LPAREN type_name RPAREN) 0)
 (RULE r22 unary_operator (AMPERSAND) 0)
 (RULE r23 unary_operator (STAR) 0)
 (RULE r24 unary_operator (PLUS) 0)
 (RULE r25 unary_operator (MINUS) 0)
 (RULE r26 unary_operator (TWIDLE) 0)
 (RULE r27 unary_operator (BANG) 0)
 (RULE r28 cast_expression (unary_expression) 0)
 (RULE r29 cast_expression (LPAREN type_name RPAREN cast_expression) 0)
 (RULE r30 multiplicative_expression (cast_expression) 0)
 (RULE r31 multiplicative_expression (multiplicative_expression STAR cast_expression) 0)
 (RULE r32 multiplicative_expression (multiplicative_expression FORWARD_SLASH cast_expression) 0)
 (RULE r33 multiplicative_expression (multiplicative_expression AMPERSAND cast_expression) 0)
 (RULE r34 additive_expression (multiplicative_expression) 0)
 (RULE r35 additive_expression (additive_expression PLUS multiplicative_expression) 0)
 (RULE r36 additive_expression (additive_expression MINUS multiplicative_expression) 0)
 (RULE r37 shift_expression (additive_expression) 0)
 (RULE r38 shift_expression (shift_expression LEFT_OP additive_expression) 0)
 (RULE r39 shift_expression (shift_expression RIGHT_OP additive_expression) 0)
 (RULE r40 relational_expression (shift_expression) 0)
 (RULE r41 relational_expression (relational_expression LESS_OP shift_expression) 0)
 (RULE r42 relational_expression (relational_expression GREATER_OP shift_expression) 0)
 (RULE r43 relational_expression (relational_expression LE_OP shift_expression) 0)
 (RULE r44 relational_expression (relational_expression GE_OP shift_expression) 0)
 (RULE r45 equality_expression (relational_expression) 0)
 (RULE r46 equality_expression (equality_expression EQ_OP relational_expression) 0)
 (RULE r47 equality_expression (equality_expression NE_OP relational_expression) 0)
 (RULE r48 and_expression (equality_expression) 0)
 (RULE r49 and_expression (and_expression AMPERSAND equality_expression) 0)
 (RULE r50 exclusive_or_expression (and_expression) 0)
 (RULE r51 exclusive_or_expression (exclusive_or_expression CARROT and_expression) 0)
 (RULE r52 inclusive_or_expression (exclusive_or_expression) 0)
 (RULE r53 inclusive_or_expression (inclusive_or_expression PIPE exclusive_or_expression) 0)
 (RULE r54 logical_and_expression (inclusive_or_expression) 0)
 (RULE r55 logical_and_expression (logical_and_expression AND_OP inclusive_or_expression) 0)
 (RULE r56 logical_or_expression (logical_and_expression) 0)
 (RULE r57 logical_or_expression (logical_or_expression OR_OP logical_and_expression) 0)
 (RULE r58 conditional_expression (logical_or_expression) 0)
 (RULE r59 conditional_expression (logical_or_expression QMARK expression COLON conditional_expression) 0)
 (RULE r60 assignment_expression (conditional_expression) 0)
 (RULE r61 assignment_expression (unary_expression assignment_operator assignment_expression) 0)
 (RULE r62 assignment_operator (EQUAL_SIGN) 0)
 (RULE r63 assignment_operator (MUL_ASSIGN) 0)
 (RULE r64 assignment_operator (DIV_ASSIGN) 0)
 (RULE r65 assignment_operator (MOD_ASSIGN) 0)
 (RULE r66 assignment_operator (ADD_ASSIGN) 0)
 (RULE r67 assignment_operator (SUB_ASSIGN) 0)
 (RULE r68 assignment_operator (LEFT_ASSIGN) 0)
 (RULE r69 assignment_operator (RIGHT_ASSIGN) 0)
 (RULE r70 assignment_operator (AND_ASSIGN) 0)
 (RULE r71 assignment_operator (XOR_ASSIGN) 0)
 (RULE r72 assignment_operator (OR_ASSIGN) 0)
 (RULE r73 expression (assignment_expression) 0)
 (RULE r74 expression (expression COMMA assignment_expression) 0)
 (RULE r75 constant_expression (conditional_expression) 0)
; (RULE r76 declaration (declaration_specifiers SEMICOLON) 0)
; (RULE r77 declaration (declaration_specifiers init_declarator_list SEMICOLON) 0)
 (RULE r78 declaration_specifiers (storage_class_specifier) 0)
 (RULE r79 declaration_specifiers (storage_class_specifier declaration_specifiers) 0)
 (RULE r80 declaration_specifiers (type_specifier) 0)
 (RULE r81 declaration_specifiers (type_specifier declaration_specifiers) 0)
 (RULE r82 declaration_specifiers (type_qualifier) 0)
 (RULE r83 declaration_specifiers (type_qualifier declaration_specifiers) 0)
 (RULE r84 init_declarator_list (init_declarator) 0)
 (RULE r85 init_declarator_list (init_declarator_list COMMA init_declarator) 0)
 (RULE r86 init_declarator (declarator) 0)
 (RULE r87 init_declarator (declarator EQUAL_SIGN initializer) 0)
 (RULE r88 storage_class_specifier (TYPEDEF) 0)
 (RULE r89 storage_class_specifier (EXTERN) 0)
 (RULE r90 storage_class_specifier (STATIC) 0)
 (RULE r91 storage_class_specifier (AUTO) 0)
 (RULE r92 storage_class_specifier (REGISTER) 0)
 (RULE r93 type_specifier (VOID) 0)
 (RULE r94 type_specifier (CHAR) 0)
 (RULE r95 type_specifier (SHORT) 0)
 (RULE r96 type_specifier (INT) 0)
 (RULE r97 type_specifier (LONG) 0)
 (RULE r98 type_specifier (FLOAT) 0)
 (RULE r99 type_specifier (DOUBLE) 0)
 (RULE r100 type_specifier (SIGNED) 0)
 (RULE r101 type_specifier (UNSIGNED) 0)
 (RULE r102 type_specifier (struct_or_union_specifier) 0)
 (RULE r103 type_specifier (enum_specifier) 0)
 (RULE r104 type_specifier (TYPE_NAME) 0)
 (RULE r105 struct_or_union_specifier (struct_or_union IDENTIFIER LCURLY struct_declaration_list RCURLY) 0)
 (RULE r106 struct_or_union_specifier (struct_or_union LCURLY struct_declaration_list RCURLY) 0)
 (RULE r107 struct_or_union_specifier (struct_or_union IDENTIFIER) 0)
 (RULE r108 struct_or_union (STRUCT) 0)
 (RULE r109 struct_or_union (UNION) 0)
 (RULE r110 struct_declaration_list (struct_declaration) 0)
 (RULE r111 struct_declaration_list (struct_declaration_list struct_declaration) 0)
 (RULE r112 struct_declaration (specifier_qualifier_list struct_declarator_list SEMICOLON) 0)
 (RULE r113 specifier_qualifier_list (type_specifier specifier_qualifier_list) 0)
 (RULE r114 specifier_qualifier_list (type_specifier) 0)
 (RULE r115 specifier_qualifier_list (type_qualifier specifier_qualifier_list) 0)
 (RULE r116 specifier_qualifier_list (type_qualifier) 0)
 (RULE r117 struct_declarator_list (struct_declarator) 0)
 (RULE r118 struct_declarator_list (struct_declarator_list COMMA struct_declarator) 0)
 (RULE r119 struct_declarator (declarator) 0)
 (RULE r120 struct_declarator (COLON constant_expression) 0)
 (RULE r121 struct_declarator (declarator COLON constant_expression) 0)
 (RULE r122 enum_specifier (ENUM LCURLY enumerator_list RCURLY) 0)
 (RULE r123 enum_specifier (ENUM IDENTIFIER LCURLY enumerator_list RCURLY) 0)
 (RULE r124 enum_specifier (ENUM IDENTIFIER) 0)
 (RULE r125 enumerator_list (enumerator) 0)
 (RULE r126 enumerator_list (enumerator_list COMMA enumerator) 0)
 (RULE r127 enumerator (IDENTIFIER) 0)
 (RULE r128 enumerator (IDENTIFIER EQUAL_SIGN constant_expression) 0)
 (RULE r129 type_qualifier (CONST) 0)
 (RULE r130 type_qualifier (VOLATILE) 0)
 (RULE r131 declarator (pointer direct_declarator) 0)
 (RULE r132 declarator (direct_declarator) 0)
 (RULE r133 direct_declarator (IDENTIFIER) 0)
 (RULE r134 direct_declarator (LPAREN declarator RPAREN) 0)
 (RULE r135 direct_declarator (direct_declarator LBRACK constant_expression RBRACK) 0)
 (RULE r136 direct_declarator (direct_declarator LBRACK RBRACK) 0)
 (RULE r137 direct_declarator (direct_declarator LPAREN parameter_type_list RPAREN) 0)
 (RULE r138 direct_declarator (direct_declarator LPAREN identifier_list RPAREN) 0)
 (RULE r139 direct_declarator (direct_declarator LPAREN RPAREN) 0)
 (RULE r140 pointer (STAR) 0)
 (RULE r141 pointer (STAR type_qualifier_list) 0)
 (RULE r142 pointer (STAR pointer) 0)
 (RULE r143 pointer (STAR type_qualifier_list pointer) 0)
 (RULE r144 type_qualifier_list (type_qualifier) 0)
 (RULE r145 type_qualifier_list (type_qualifier_list type_qualifier) 0)
 (RULE r146 parameter_type_list (parameter_list) 0)
 (RULE r147 parameter_type_list (parameter_list COMMA ELLIPSIS) 0)
 (RULE r148 parameter_list (parameter_declaration) 0)
 (RULE r149 parameter_list (parameter_list COMMA parameter_declaration) 0)
 (RULE r150 parameter_declaration (declaration_specifiers declarator) 0)
 (RULE r151 parameter_declaration (declaration_specifiers abstract_declarator) 0)
 (RULE r152 parameter_declaration (declaration_specifiers) 0)
 (RULE r153 identifier_list (IDENTIFIER) 0)
 (RULE r154 identifier_list (identifier_list COMMA IDENTIFIER) 0)
 (RULE r155 type_name (specifier_qualifier_list) 0)
 (RULE r156 type_name (specifier_qualifier_list abstract_declarator) 0)
 (RULE r157 abstract_declarator (pointer) 0)
 (RULE r158 abstract_declarator (direct_abstract_declarator) 0)
 (RULE r159 abstract_declarator (pointer direct_abstract_declarator) 0)
 (RULE r160 direct_abstract_declarator (LPAREN abstract_declarator RPAREN) 0)
 (RULE r161 direct_abstract_declarator (LBRACK RBRACK) 0)
 (RULE r162 direct_abstract_declarator (LBRACK constant_expression RBRACK) 0)
 (RULE r163 direct_abstract_declarator (direct_abstract_declarator LBRACK RBRACK) 0)
 (RULE r164 direct_abstract_declarator (direct_abstract_declarator LBRACK constant_expression RBRACK) 0)
 (RULE r165 direct_abstract_declarator (LPAREN RPAREN) 0)
 (RULE r166 direct_abstract_declarator (LPAREN parameter_type_list RPAREN) 0)
 (RULE r167 direct_abstract_declarator (direct_abstract_declarator LPAREN RPAREN) 0)
 (RULE r168 direct_abstract_declarator (direct_abstract_declarator LPAREN parameter_type_list RPAREN) 0)
 (RULE r169 initializer (assignment_expression) 0)
 (RULE r170 initializer (LCURLY initializer_list RCURLY) 0)
 (RULE r171 initializer (LCURLY initializer_list COMMA RCURLY) 0)
 (RULE r172 initializer_list (initializer) 0)
 (RULE r173 initializer_list (initializer_list COMMA initializer) 0)
 (RULE r174 statement (labeled_statement) 0)
; (RULE r175 statement (compound_statement) 0)
 (RULE r176 statement (expression_statement) 0)
 (RULE r177 statement (selection_statement) 0)
 (RULE r178 statement (iteration_statement) 0)
 (RULE r179 statement (jump_statement) 0)
 (RULE r180 labeled_statement (IDENTIFIER COLON statement) 0)
 (RULE r181 labeled_statement (CASE constant_expression COLON statement) 0)
 (RULE r182 labeled_statement (DEFAULT COLON statement) 0)
; (RULE r183 compound_statement (LCURLY RCURLY) 0)
; (RULE r184 compound_statement (LCURLY statement_list RCURLY) 0)
; (RULE r185 compound_statement (LCURLY declaration_list RCURLY) 0)
; (RULE r186 compound_statement (LCURLY declaration_list statement_list RCURLY) 0)
; (RULE r187 declaration_list (declaration) 0)
; (RULE r188 declaration_list (declaration_list declaration) 0)
 (RULE r189 statement_list (statement) 0)
 (RULE r190 statement_list (statement_list statement) 0)
 (RULE r191 expression_statement (SEMICOLON) 0)
 (RULE r192 expression_statement (expression SEMICOLON) 0)
 (RULE r193 selection_statement (IF LPAREN expression RPAREN statement) 0)
 (RULE r194 selection_statement (IF LPAREN expression RPAREN statement-1 ELSE statement-2) 0)
 (RULE r195 selection_statement (SWITCH LPAREN expression RPAREN statement) 0)
 (RULE r196 iteration_statement (WHILE LPAREN expression RPAREN statement) 0)
 (RULE r197 iteration_statement (DO statement WHILE LPAREN expression RPAREN SEMICOLON) 0)
 (RULE r198 iteration_statement (FOR LPAREN expression_statement-1 expression_statement-2 RPAREN statement) 0)
 (RULE r199 iteration_statement (FOR LPAREN expression_statement-1 expression_statement-2 expression RPAREN statement) 0)
 (RULE r200 jump_statement (GOTO IDENTIFIER SEMICOLON) 0)
 (RULE r201 jump_statement (CONTINUE SEMICOLON) 0)
 (RULE r202 jump_statement (BREAK SEMICOLON) 0)
 (RULE r203 jump_statement (RETURN SEMICOLON) 0)
 (RULE r204 jump_statement (RETURN expression SEMICOLON) 0)
; (RULE r205 translation_unit (external_declaration) 0)
; (RULE r206 translation_unit (translation_unit external_declaration) 0)
; (RULE r207 external_declaration (function_definition) 0)
; (RULE r208 external_declaration (declaration) 0)
; (RULE r209 function_definition (declaration_specifiers declarator declaration_list compound_statement) 0)
; (RULE r210 function_definition (declaration_specifiers declarator compound_statement) 0)
; (RULE r211 function_definition (declarator declaration_list compound_statement) 0)
; (RULE r212 function_definition (declarator compound_statement) 0)
 (STATE s0 (COMMENT primary_expression "=>" "." LPAREN expression RPAREN) (COMMENT primary_expression "=>" "." STRING_LITERAL) (COMMENT primary_expression "=>" "." CONSTANT) (COMMENT primary_expression "=>" "." IDENTIFIER) (COMMENT *start "=>" "." primary_expression *EOF*) (SHIFT (IDENTIFIER) s2) (SHIFT (CONSTANT) s3) (SHIFT (STRING_LITERAL) s4) (SHIFT (LPAREN) s5) (GOTO primary_expression s1))
 (STATE s1 (COMMENT *start "=>" primary_expression "." *EOF*) (ACCEPT (*EOF*)))
 (STATE s2 (COMMENT primary_expression "=>" IDENTIFIER ".") (REDUCE () r2))
 (STATE s3 (COMMENT primary_expression "=>" CONSTANT ".") (REDUCE () r3))
 (STATE s4 (COMMENT primary_expression "=>" STRING_LITERAL ".") (REDUCE () r4))
 (STATE s5 (COMMENT expression "=>" "." expression COMMA assignment_expression) (COMMENT expression "=>" "." assignment_expression) (COMMENT assignment_expression "=>" "." unary_expression assignment_operator assignment_expression) (COMMENT assignment_expression "=>" "." conditional_expression) (COMMENT conditional_expression "=>" "." logical_or_expression QMARK expression COLON conditional_expression) (COMMENT conditional_expression "=>" "." logical_or_expression) (COMMENT logical_or_expression "=>" "." logical_or_expression OR_OP logical_and_expression) (COMMENT logical_or_expression "=>" "." logical_and_expression) (COMMENT logical_and_expression "=>" "." logical_and_expression AND_OP inclusive_or_expression) (COMMENT logical_and_expression "=>" "." inclusive_or_expression) (COMMENT inclusive_or_expression "=>" "." inclusive_or_expression PIPE exclusive_or_expression) (COMMENT inclusive_or_expression "=>" "." exclusive_or_expression) (COMMENT exclusive_or_expression "=>" "." exclusive_or_expression CARROT and_expression) (COMMENT exclusive_or_expression "=>" "." and_expression) (COMMENT and_expression "=>" "." and_expression AMPERSAND equality_expression) (COMMENT and_expression "=>" "." equality_expression) (COMMENT equality_expression "=>" "." equality_expression NE_OP relational_expression) (COMMENT equality_expression "=>" "." equality_expression EQ_OP relational_expression) (COMMENT equality_expression "=>" "." relational_expression) (COMMENT relational_expression "=>" "." relational_expression GE_OP shift_expression) (COMMENT relational_expression "=>" "." relational_expression LE_OP shift_expression) (COMMENT relational_expression "=>" "." relational_expression GREATER_OP shift_expression) (COMMENT relational_expression "=>" "." relational_expression LESS_OP shift_expression) (COMMENT relational_expression "=>" "." shift_expression) (COMMENT shift_expression "=>" "." shift_expression RIGHT_OP additive_expression) (COMMENT shift_expression "=>" "." shift_expression LEFT_OP additive_expression) (COMMENT shift_expression "=>" "." additive_expression) (COMMENT additive_expression "=>" "." additive_expression MINUS multiplicative_expression) (COMMENT additive_expression "=>" "." additive_expression PLUS multiplicative_expression) (COMMENT additive_expression "=>" "." multiplicative_expression) (COMMENT multiplicative_expression "=>" "." multiplicative_expression AMPERSAND cast_expression) (COMMENT multiplicative_expression "=>" "." multiplicative_expression FORWARD_SLASH cast_expression) (COMMENT multiplicative_expression "=>" "." multiplicative_expression STAR cast_expression) (COMMENT multiplicative_expression "=>" "." cast_expression) (COMMENT cast_expression "=>" "." LPAREN type_name RPAREN cast_expression) (COMMENT cast_expression "=>" "." unary_expression) (COMMENT unary_operator "=>" "." BANG) (COMMENT unary_operator "=>" "." TWIDLE) (COMMENT unary_operator "=>" "." MINUS) (COMMENT unary_operator "=>" "." PLUS) (COMMENT unary_operator "=>" "." STAR) (COMMENT unary_operator "=>" "." AMPERSAND) (COMMENT unary_expression "=>" "." SIZEOF LPAREN type_name RPAREN) (COMMENT unary_expression "=>" "." SIZEOF unary_expression) (COMMENT unary_expression "=>" "." unary_operator cast_expression) (COMMENT unary_expression "=>" "." DEC_OP unary_expression) (COMMENT unary_expression "=>" "." INC_OP unary_expression) (COMMENT unary_expression "=>" "." postfix_expression) (COMMENT postfix_expression "=>" "." postfix_expression DEC_OP) (COMMENT postfix_expression "=>" "." postfix_expression INC_OP) (COMMENT postfix_expression "=>" "." postfix_expression PTR_OP IDENTIFIER) (COMMENT postfix_expression "=>" "." postfix_expression DOT IDENTIFIER) (COMMENT postfix_expression "=>" "." postfix_expression LPAREN argument_expression_list RPAREN) (COMMENT postfix_expression "=>" "." postfix_expression LPAREN RPAREN) (COMMENT postfix_expression "=>" "." postfix_expression LBRACK expression RBRACK) (COMMENT postfix_expression "=>" "." primary_expression) (COMMENT primary_expression "=>" LPAREN "." expression RPAREN) (COMMENT primary_expression "=>" "." LPAREN expression RPAREN) (COMMENT primary_expression "=>" "." STRING_LITERAL) (COMMENT primary_expression "=>" "." CONSTANT) (COMMENT primary_expression "=>" "." IDENTIFIER) (SHIFT (IDENTIFIER) s2) (SHIFT (CONSTANT) s3) (SHIFT (STRING_LITERAL) s4) (SHIFT (SIZEOF) s24) (SHIFT (INC_OP) s25) (SHIFT (DEC_OP) s26) (SHIFT (LPAREN) s27) (SHIFT (AMPERSAND) s28) (SHIFT (STAR) s29) (SHIFT (PLUS) s30) (SHIFT (MINUS) s31) (SHIFT (TWIDLE) s32) (SHIFT (BANG) s33) (GOTO primary_expression s6) (GOTO postfix_expression s7) (GOTO unary_expression s8) (GOTO unary_operator s9) (GOTO cast_expression s10) (GOTO multiplicative_expression s11) (GOTO additive_expression s12) (GOTO shift_expression s13) (GOTO relational_expression s14) (GOTO equality_expression s15) (GOTO and_expression s16) (GOTO exclusive_or_expression s17) (GOTO inclusive_or_expression s18) (GOTO logical_and_expression s19) (GOTO logical_or_expression s20) (GOTO conditional_expression s21) (GOTO assignment_expression s22) (GOTO expression s23))
 (STATE s6 (COMMENT postfix_expression "=>" primary_expression ".") (REDUCE () r6))
 (STATE s7 (COMMENT unary_expression "=>" postfix_expression ".") (COMMENT postfix_expression "=>" postfix_expression "." DEC_OP) (COMMENT postfix_expression "=>" postfix_expression "." INC_OP) (COMMENT postfix_expression "=>" postfix_expression "." PTR_OP IDENTIFIER) (COMMENT postfix_expression "=>" postfix_expression "." DOT IDENTIFIER) (COMMENT postfix_expression "=>" postfix_expression "." LPAREN argument_expression_list RPAREN) (COMMENT postfix_expression "=>" postfix_expression "." LPAREN RPAREN) (COMMENT postfix_expression "=>" postfix_expression "." LBRACK expression RBRACK) (SHIFT (PTR_OP) s227) (SHIFT (INC_OP) s228) (SHIFT (DEC_OP) s229) (REDUCE (LEFT_OP) r16) (REDUCE (RIGHT_OP) r16) (REDUCE (LE_OP) r16) (REDUCE (GE_OP) r16) (REDUCE (EQ_OP) r16) (REDUCE (NE_OP) r16) (REDUCE (AND_OP) r16) (REDUCE (OR_OP) r16) (REDUCE (MUL_ASSIGN) r16) (REDUCE (DIV_ASSIGN) r16) (REDUCE (MOD_ASSIGN) r16) (REDUCE (ADD_ASSIGN) r16) (REDUCE (SUB_ASSIGN) r16) (REDUCE (LEFT_ASSIGN) r16) (REDUCE (RIGHT_ASSIGN) r16) (REDUCE (AND_ASSIGN) r16) (REDUCE (XOR_ASSIGN) r16) (REDUCE (OR_ASSIGN) r16) (SHIFT (LPAREN) s230) (REDUCE (RPAREN) r16) (SHIFT (LBRACK) s231) (REDUCE (RBRACK) r16) (REDUCE (RCURLY) r16) (SHIFT (DOT) s232) (REDUCE (COMMA) r16) (REDUCE (AMPERSAND) r16) (REDUCE (STAR) r16) (REDUCE (PLUS) r16) (REDUCE (MINUS) r16) (REDUCE (FORWARD_SLASH) r16) (REDUCE (LESS_OP) r16) (REDUCE (GREATER_OP) r16) (REDUCE (CARROT) r16) (REDUCE (PIPE) r16) (REDUCE (QMARK) r16) (REDUCE (COLON) r16) (REDUCE (EQUAL_SIGN) r16) (REDUCE (SEMICOLON) r16))
 (STATE s8 (COMMENT assignment_operator "=>" "." OR_ASSIGN) (COMMENT assignment_operator "=>" "." XOR_ASSIGN) (COMMENT assignment_operator "=>" "." AND_ASSIGN) (COMMENT assignment_operator "=>" "." RIGHT_ASSIGN) (COMMENT assignment_operator "=>" "." LEFT_ASSIGN) (COMMENT assignment_operator "=>" "." SUB_ASSIGN) (COMMENT assignment_operator "=>" "." ADD_ASSIGN) (COMMENT assignment_operator "=>" "." MOD_ASSIGN) (COMMENT assignment_operator "=>" "." DIV_ASSIGN) (COMMENT assignment_operator "=>" "." MUL_ASSIGN) (COMMENT assignment_operator "=>" "." EQUAL_SIGN) (COMMENT assignment_expression "=>" unary_expression "." assignment_operator assignment_expression) (COMMENT cast_expression "=>" unary_expression ".") (REDUCE (LEFT_OP) r28) (REDUCE (RIGHT_OP) r28) (REDUCE (LE_OP) r28) (REDUCE (GE_OP) r28) (REDUCE (EQ_OP) r28) (REDUCE (NE_OP) r28) (REDUCE (AND_OP) r28) (REDUCE (OR_OP) r28) (SHIFT (MUL_ASSIGN) s215) (SHIFT (DIV_ASSIGN) s216) (SHIFT (MOD_ASSIGN) s217) (SHIFT (ADD_ASSIGN) s218) (SHIFT (SUB_ASSIGN) s219) (SHIFT (LEFT_ASSIGN) s220) (SHIFT (RIGHT_ASSIGN) s221) (SHIFT (AND_ASSIGN) s222) (SHIFT (XOR_ASSIGN) s223) (SHIFT (OR_ASSIGN) s224) (REDUCE (RPAREN) r28) (REDUCE (RBRACK) r28) (REDUCE (COMMA) r28) (REDUCE (AMPERSAND) r28) (REDUCE (STAR) r28) (REDUCE (PLUS) r28) (REDUCE (MINUS) r28) (REDUCE (FORWARD_SLASH) r28) (REDUCE (LESS_OP) r28) (REDUCE (GREATER_OP) r28) (REDUCE (CARROT) r28) (REDUCE (PIPE) r28) (REDUCE (QMARK) r28) (REDUCE (COLON) r28) (SHIFT (EQUAL_SIGN) s225) (GOTO assignment_operator s214))
 (STATE s9 (COMMENT cast_expression "=>" "." LPAREN type_name RPAREN cast_expression) (COMMENT cast_expression "=>" "." unary_expression) (COMMENT unary_operator "=>" "." BANG) (COMMENT unary_operator "=>" "." TWIDLE) (COMMENT unary_operator "=>" "." MINUS) (COMMENT unary_operator "=>" "." PLUS) (COMMENT unary_operator "=>" "." STAR) (COMMENT unary_operator "=>" "." AMPERSAND) (COMMENT unary_expression "=>" "." SIZEOF LPAREN type_name RPAREN) (COMMENT unary_expression "=>" "." SIZEOF unary_expression) (COMMENT unary_expression "=>" unary_operator "." cast_expression) (COMMENT unary_expression "=>" "." unary_operator cast_expression) (COMMENT unary_expression "=>" "." DEC_OP unary_expression) (COMMENT unary_expression "=>" "." INC_OP unary_expression) (COMMENT unary_expression "=>" "." postfix_expression) (COMMENT postfix_expression "=>" "." postfix_expression DEC_OP) (COMMENT postfix_expression "=>" "." postfix_expression INC_OP) (COMMENT postfix_expression "=>" "." postfix_expression PTR_OP IDENTIFIER) (COMMENT postfix_expression "=>" "." postfix_expression DOT IDENTIFIER) (COMMENT postfix_expression "=>" "." postfix_expression LPAREN argument_expression_list RPAREN) (COMMENT postfix_expression "=>" "." postfix_expression LPAREN RPAREN) (COMMENT postfix_expression "=>" "." postfix_expression LBRACK expression RBRACK) (COMMENT postfix_expression "=>" "." primary_expression) (COMMENT primary_expression "=>" "." LPAREN expression RPAREN) (COMMENT primary_expression "=>" "." STRING_LITERAL) (COMMENT primary_expression "=>" "." CONSTANT) (COMMENT primary_expression "=>" "." IDENTIFIER) (SHIFT (IDENTIFIER) s2) (SHIFT (CONSTANT) s3) (SHIFT (STRING_LITERAL) s4) (SHIFT (SIZEOF) s24) (SHIFT (INC_OP) s25) (SHIFT (DEC_OP) s26) (SHIFT (LPAREN) s27) (SHIFT (AMPERSAND) s28) (SHIFT (STAR) s29) (SHIFT (PLUS) s30) (SHIFT (MINUS) s31) (SHIFT (TWIDLE) s32) (SHIFT (BANG) s33) (GOTO primary_expression s6) (GOTO postfix_expression s7) (GOTO unary_expression s62) (GOTO unary_operator s9) (GOTO cast_expression s213))
 (STATE s10 (COMMENT multiplicative_expression "=>" cast_expression ".") (REDUCE () r30))
 (STATE s11 (COMMENT additive_expression "=>" multiplicative_expression ".") (COMMENT multiplicative_expression "=>" multiplicative_expression "." AMPERSAND cast_expression) (COMMENT multiplicative_expression "=>" multiplicative_expression "." FORWARD_SLASH cast_expression) (COMMENT multiplicative_expression "=>" multiplicative_expression "." STAR cast_expression) (REDUCE (LEFT_OP) r34) (REDUCE (RIGHT_OP) r34) (REDUCE (LE_OP) r34) (REDUCE (GE_OP) r34) (REDUCE (EQ_OP) r34) (REDUCE (NE_OP) r34) (REDUCE (AND_OP) r34) (REDUCE (OR_OP) r34) (REDUCE (RPAREN) r34) (REDUCE (RBRACK) r34) (REDUCE (RCURLY) r34) (REDUCE (COMMA) r34) (COMMENT (REDUCE (AMPERSAND) r34)) (SHIFT (AMPERSAND) s201) (SHIFT (STAR) s202) (REDUCE (PLUS) r34) (REDUCE (MINUS) r34) (SHIFT (FORWARD_SLASH) s203) (REDUCE (LESS_OP) r34) (REDUCE (GREATER_OP) r34) (REDUCE (CARROT) r34) (REDUCE (PIPE) r34) (REDUCE (QMARK) r34) (REDUCE (COLON) r34) (REDUCE (SEMICOLON) r34))
 (STATE s12 (COMMENT shift_expression "=>" additive_expression ".") (COMMENT additive_expression "=>" additive_expression "." MINUS multiplicative_expression) (COMMENT additive_expression "=>" additive_expression "." PLUS multiplicative_expression) (REDUCE (LEFT_OP) r37) (REDUCE (RIGHT_OP) r37) (REDUCE (LE_OP) r37) (REDUCE (GE_OP) r37) (REDUCE (EQ_OP) r37) (REDUCE (NE_OP) r37) (REDUCE (AND_OP) r37) (REDUCE (OR_OP) r37) (REDUCE (RPAREN) r37) (REDUCE (RBRACK) r37) (REDUCE (RCURLY) r37) (REDUCE (COMMA) r37) (REDUCE (AMPERSAND) r37) (SHIFT (PLUS) s198) (SHIFT (MINUS) s199) (REDUCE (LESS_OP) r37) (REDUCE (GREATER_OP) r37) (REDUCE (CARROT) r37) (REDUCE (PIPE) r37) (REDUCE (QMARK) r37) (REDUCE (COLON) r37) (REDUCE (SEMICOLON) r37))
 (STATE s13 (COMMENT relational_expression "=>" shift_expression ".") (COMMENT shift_expression "=>" shift_expression "." RIGHT_OP additive_expression) (COMMENT shift_expression "=>" shift_expression "." LEFT_OP additive_expression) (SHIFT (LEFT_OP) s195) (SHIFT (RIGHT_OP) s196) (REDUCE (LE_OP) r40) (REDUCE (GE_OP) r40) (REDUCE (EQ_OP) r40) (REDUCE (NE_OP) r40) (REDUCE (AND_OP) r40) (REDUCE (OR_OP) r40) (REDUCE (RPAREN) r40) (REDUCE (RBRACK) r40) (REDUCE (RCURLY) r40) (REDUCE (COMMA) r40) (REDUCE (AMPERSAND) r40) (REDUCE (LESS_OP) r40) (REDUCE (GREATER_OP) r40) (REDUCE (CARROT) r40) (REDUCE (PIPE) r40) (REDUCE (QMARK) r40) (REDUCE (COLON) r40) (REDUCE (SEMICOLON) r40))
 (STATE s14 (COMMENT equality_expression "=>" relational_expression ".") (COMMENT relational_expression "=>" relational_expression "." GE_OP shift_expression) (COMMENT relational_expression "=>" relational_expression "." LE_OP shift_expression) (COMMENT relational_expression "=>" relational_expression "." GREATER_OP shift_expression) (COMMENT relational_expression "=>" relational_expression "." LESS_OP shift_expression) (SHIFT (LE_OP) s190) (SHIFT (GE_OP) s191) (REDUCE (EQ_OP) r45) (REDUCE (NE_OP) r45) (REDUCE (AND_OP) r45) (REDUCE (OR_OP) r45) (REDUCE (RPAREN) r45) (REDUCE (RBRACK) r45) (REDUCE (RCURLY) r45) (REDUCE (COMMA) r45) (REDUCE (AMPERSAND) r45) (SHIFT (LESS_OP) s192) (SHIFT (GREATER_OP) s193) (REDUCE (CARROT) r45) (REDUCE (PIPE) r45) (REDUCE (QMARK) r45) (REDUCE (COLON) r45) (REDUCE (SEMICOLON) r45))
 (STATE s15 (COMMENT and_expression "=>" equality_expression ".") (COMMENT equality_expression "=>" equality_expression "." NE_OP relational_expression) (COMMENT equality_expression "=>" equality_expression "." EQ_OP relational_expression) (SHIFT (EQ_OP) s187) (SHIFT (NE_OP) s188) (REDUCE (AND_OP) r48) (REDUCE (OR_OP) r48) (REDUCE (RPAREN) r48) (REDUCE (RBRACK) r48) (REDUCE (RCURLY) r48) (REDUCE (COMMA) r48) (REDUCE (AMPERSAND) r48) (REDUCE (CARROT) r48) (REDUCE (PIPE) r48) (REDUCE (QMARK) r48) (REDUCE (COLON) r48) (REDUCE (SEMICOLON) r48))
 (STATE s16 (COMMENT exclusive_or_expression "=>" and_expression ".") (COMMENT and_expression "=>" and_expression "." AMPERSAND equality_expression) (REDUCE (AND_OP) r50) (REDUCE (OR_OP) r50) (REDUCE (RPAREN) r50) (REDUCE (RBRACK) r50) (REDUCE (RCURLY) r50) (REDUCE (COMMA) r50) (SHIFT (AMPERSAND) s185) (REDUCE (CARROT) r50) (REDUCE (PIPE) r50) (REDUCE (QMARK) r50) (REDUCE (COLON) r50) (REDUCE (SEMICOLON) r50))
 (STATE s17 (COMMENT inclusive_or_expression "=>" exclusive_or_expression ".") (COMMENT exclusive_or_expression "=>" exclusive_or_expression "." CARROT and_expression) (REDUCE (AND_OP) r52) (REDUCE (OR_OP) r52) (REDUCE (RPAREN) r52) (REDUCE (RBRACK) r52) (REDUCE (RCURLY) r52) (REDUCE (COMMA) r52) (SHIFT (CARROT) s183) (REDUCE (PIPE) r52) (REDUCE (QMARK) r52) (REDUCE (COLON) r52) (REDUCE (SEMICOLON) r52))
 (STATE s18 (COMMENT logical_and_expression "=>" inclusive_or_expression ".") (COMMENT inclusive_or_expression "=>" inclusive_or_expression "." PIPE exclusive_or_expression) (REDUCE (AND_OP) r54) (REDUCE (OR_OP) r54) (REDUCE (RPAREN) r54) (REDUCE (RBRACK) r54) (REDUCE (RCURLY) r54) (REDUCE (COMMA) r54) (SHIFT (PIPE) s181) (REDUCE (QMARK) r54) (REDUCE (COLON) r54) (REDUCE (SEMICOLON) r54))
 (STATE s19 (COMMENT logical_or_expression "=>" logical_and_expression ".") (COMMENT logical_and_expression "=>" logical_and_expression "." AND_OP inclusive_or_expression) (SHIFT (AND_OP) s179) (REDUCE (OR_OP) r56) (REDUCE (RPAREN) r56) (REDUCE (RBRACK) r56) (REDUCE (RCURLY) r56) (REDUCE (COMMA) r56) (REDUCE (QMARK) r56) (REDUCE (COLON) r56) (REDUCE (SEMICOLON) r56))
 (STATE s20 (COMMENT conditional_expression "=>" logical_or_expression "." QMARK expression COLON conditional_expression) (COMMENT conditional_expression "=>" logical_or_expression ".") (COMMENT logical_or_expression "=>" logical_or_expression "." OR_OP logical_and_expression) (SHIFT (OR_OP) s173) (REDUCE (RPAREN) r58) (REDUCE (RBRACK) r58) (REDUCE (RCURLY) r58) (REDUCE (COMMA) r58) (SHIFT (QMARK) s174) (REDUCE (COLON) r58) (REDUCE (SEMICOLON) r58))
 (STATE s21 (COMMENT assignment_expression "=>" conditional_expression ".") (REDUCE () r60))
 (STATE s22 (COMMENT expression "=>" assignment_expression ".") (REDUCE () r73))
 (STATE s23 (COMMENT expression "=>" expression "." COMMA assignment_expression) (COMMENT primary_expression "=>" LPAREN expression "." RPAREN) (SHIFT (RPAREN) s170) (SHIFT (COMMA) s171))
 (STATE s24 (COMMENT unary_operator "=>" "." BANG) (COMMENT unary_operator "=>" "." TWIDLE) (COMMENT unary_operator "=>" "." MINUS) (COMMENT unary_operator "=>" "." PLUS) (COMMENT unary_operator "=>" "." STAR) (COMMENT unary_operator "=>" "." AMPERSAND) (COMMENT unary_expression "=>" SIZEOF "." LPAREN type_name RPAREN) (COMMENT unary_expression "=>" "." SIZEOF LPAREN type_name RPAREN) (COMMENT unary_expression "=>" SIZEOF "." unary_expression) (COMMENT unary_expression "=>" "." SIZEOF unary_expression) (COMMENT unary_expression "=>" "." unary_operator cast_expression) (COMMENT unary_expression "=>" "." DEC_OP unary_expression) (COMMENT unary_expression "=>" "." INC_OP unary_expression) (COMMENT unary_expression "=>" "." postfix_expression) (COMMENT postfix_expression "=>" "." postfix_expression DEC_OP) (COMMENT postfix_expression "=>" "." postfix_expression INC_OP) (COMMENT postfix_expression "=>" "." postfix_expression PTR_OP IDENTIFIER) (COMMENT postfix_expression "=>" "." postfix_expression DOT IDENTIFIER) (COMMENT postfix_expression "=>" "." postfix_expression LPAREN argument_expression_list RPAREN) (COMMENT postfix_expression "=>" "." postfix_expression LPAREN RPAREN) (COMMENT postfix_expression "=>" "." postfix_expression LBRACK expression RBRACK) (COMMENT postfix_expression "=>" "." primary_expression) (COMMENT primary_expression "=>" "." LPAREN expression RPAREN) (COMMENT primary_expression "=>" "." STRING_LITERAL) (COMMENT primary_expression "=>" "." CONSTANT) (COMMENT primary_expression "=>" "." IDENTIFIER) (SHIFT (IDENTIFIER) s2) (SHIFT (CONSTANT) s3) (SHIFT (STRING_LITERAL) s4) (SHIFT (SIZEOF) s24) (SHIFT (INC_OP) s25) (SHIFT (DEC_OP) s26) (SHIFT (LPAREN) s167) (SHIFT (AMPERSAND) s28) (SHIFT (STAR) s29) (SHIFT (PLUS) s30) (SHIFT (MINUS) s31) (SHIFT (TWIDLE) s32) (SHIFT (BANG) s33) (GOTO primary_expression s6) (GOTO postfix_expression s7) (GOTO unary_expression s166) (GOTO unary_operator s9))
 (STATE s25 (COMMENT unary_operator "=>" "." BANG) (COMMENT unary_operator "=>" "." TWIDLE) (COMMENT unary_operator "=>" "." MINUS) (COMMENT unary_operator "=>" "." PLUS) (COMMENT unary_operator "=>" "." STAR) (COMMENT unary_operator "=>" "." AMPERSAND) (COMMENT unary_expression "=>" "." SIZEOF LPAREN type_name RPAREN) (COMMENT unary_expression "=>" "." SIZEOF unary_expression) (COMMENT unary_expression "=>" "." unary_operator cast_expression) (COMMENT unary_expression "=>" "." DEC_OP unary_expression) (COMMENT unary_expression "=>" INC_OP "." unary_expression) (COMMENT unary_expression "=>" "." INC_OP unary_expression) (COMMENT unary_expression "=>" "." postfix_expression) (COMMENT postfix_expression "=>" "." postfix_expression DEC_OP) (COMMENT postfix_expression "=>" "." postfix_expression INC_OP) (COMMENT postfix_expression "=>" "." postfix_expression PTR_OP IDENTIFIER) (COMMENT postfix_expression "=>" "." postfix_expression DOT IDENTIFIER) (COMMENT postfix_expression "=>" "." postfix_expression LPAREN argument_expression_list RPAREN) (COMMENT postfix_expression "=>" "." postfix_expression LPAREN RPAREN) (COMMENT postfix_expression "=>" "." postfix_expression LBRACK expression RBRACK) (COMMENT postfix_expression "=>" "." primary_expression) (COMMENT primary_expression "=>" "." LPAREN expression RPAREN) (COMMENT primary_expression "=>" "." STRING_LITERAL) (COMMENT primary_expression "=>" "." CONSTANT) (COMMENT primary_expression "=>" "." IDENTIFIER) (SHIFT (IDENTIFIER) s2) (SHIFT (CONSTANT) s3) (SHIFT (STRING_LITERAL) s4) (SHIFT (SIZEOF) s24) (SHIFT (INC_OP) s25) (SHIFT (DEC_OP) s26) (SHIFT (LPAREN) s5) (SHIFT (AMPERSAND) s28) (SHIFT (STAR) s29) (SHIFT (PLUS) s30) (SHIFT (MINUS) s31) (SHIFT (TWIDLE) s32) (SHIFT (BANG) s33) (GOTO primary_expression s6) (GOTO postfix_expression s7) (GOTO unary_expression s165) (GOTO unary_operator s9))
 (STATE s26 (COMMENT unary_operator "=>" "." BANG) (COMMENT unary_operator "=>" "." TWIDLE) (COMMENT unary_operator "=>" "." MINUS) (COMMENT unary_operator "=>" "." PLUS) (COMMENT unary_operator "=>" "." STAR) (COMMENT unary_operator "=>" "." AMPERSAND) (COMMENT unary_expression "=>" "." SIZEOF LPAREN type_name RPAREN) (COMMENT unary_expression "=>" "." SIZEOF unary_expression) (COMMENT unary_expression "=>" "." unary_operator cast_expression) (COMMENT unary_expression "=>" DEC_OP "." unary_expression) (COMMENT unary_expression "=>" "." DEC_OP unary_expression) (COMMENT unary_expression "=>" "." INC_OP unary_expression) (COMMENT unary_expression "=>" "." postfix_expression) (COMMENT postfix_expression "=>" "." postfix_expression DEC_OP) (COMMENT postfix_expression "=>" "." postfix_expression INC_OP) (COMMENT postfix_expression "=>" "." postfix_expression PTR_OP IDENTIFIER) (COMMENT postfix_expression "=>" "." postfix_expression DOT IDENTIFIER) (COMMENT postfix_expression "=>" "." postfix_expression LPAREN argument_expression_list RPAREN) (COMMENT postfix_expression "=>" "." postfix_expression LPAREN RPAREN) (COMMENT postfix_expression "=>" "." postfix_expression LBRACK expression RBRACK) (COMMENT postfix_expression "=>" "." primary_expression) (COMMENT primary_expression "=>" "." LPAREN expression RPAREN) (COMMENT primary_expression "=>" "." STRING_LITERAL) (COMMENT primary_expression "=>" "." CONSTANT) (COMMENT primary_expression "=>" "." IDENTIFIER) (SHIFT (IDENTIFIER) s2) (SHIFT (CONSTANT) s3) (SHIFT (STRING_LITERAL) s4) (SHIFT (SIZEOF) s24) (SHIFT (INC_OP) s25) (SHIFT (DEC_OP) s26) (SHIFT (LPAREN) s5) (SHIFT (AMPERSAND) s28) (SHIFT (STAR) s29) (SHIFT (PLUS) s30) (SHIFT (MINUS) s31) (SHIFT (TWIDLE) s32) (SHIFT (BANG) s33) (GOTO primary_expression s6) (GOTO postfix_expression s7) (GOTO unary_expression s164) (GOTO unary_operator s9))
 (STATE s27 (COMMENT type_name "=>" "." specifier_qualifier_list abstract_declarator) (COMMENT type_name "=>" "." specifier_qualifier_list) (COMMENT type_qualifier "=>" "." VOLATILE) (COMMENT type_qualifier "=>" "." CONST) (COMMENT enum_specifier "=>" "." ENUM IDENTIFIER) (COMMENT enum_specifier "=>" "." ENUM IDENTIFIER LCURLY enumerator_list RCURLY) (COMMENT enum_specifier "=>" "." ENUM LCURLY enumerator_list RCURLY) (COMMENT specifier_qualifier_list "=>" "." type_qualifier) (COMMENT specifier_qualifier_list "=>" "." type_qualifier specifier_qualifier_list) (COMMENT specifier_qualifier_list "=>" "." type_specifier) (COMMENT specifier_qualifier_list "=>" "." type_specifier specifier_qualifier_list) (COMMENT struct_or_union "=>" "." UNION) (COMMENT struct_or_union "=>" "." STRUCT) (COMMENT struct_or_union_specifier "=>" "." struct_or_union IDENTIFIER) (COMMENT struct_or_union_specifier "=>" "." struct_or_union LCURLY struct_declaration_list RCURLY) (COMMENT struct_or_union_specifier "=>" "." struct_or_union IDENTIFIER LCURLY struct_declaration_list RCURLY) (COMMENT type_specifier "=>" "." TYPE_NAME) (COMMENT type_specifier "=>" "." enum_specifier) (COMMENT type_specifier "=>" "." struct_or_union_specifier) (COMMENT type_specifier "=>" "." UNSIGNED) (COMMENT type_specifier "=>" "." SIGNED) (COMMENT type_specifier "=>" "." DOUBLE) (COMMENT type_specifier "=>" "." FLOAT) (COMMENT type_specifier "=>" "." LONG) (COMMENT type_specifier "=>" "." INT) (COMMENT type_specifier "=>" "." SHORT) (COMMENT type_specifier "=>" "." CHAR) (COMMENT type_specifier "=>" "." VOID) (COMMENT expression "=>" "." expression COMMA assignment_expression) (COMMENT expression "=>" "." assignment_expression) (COMMENT assignment_expression "=>" "." unary_expression assignment_operator assignment_expression) (COMMENT assignment_expression "=>" "." conditional_expression) (COMMENT conditional_expression "=>" "." logical_or_expression QMARK expression COLON conditional_expression) (COMMENT conditional_expression "=>" "." logical_or_expression) (COMMENT logical_or_expression "=>" "." logical_or_expression OR_OP logical_and_expression) (COMMENT logical_or_expression "=>" "." logical_and_expression) (COMMENT logical_and_expression "=>" "." logical_and_expression AND_OP inclusive_or_expression) (COMMENT logical_and_expression "=>" "." inclusive_or_expression) (COMMENT inclusive_or_expression "=>" "." inclusive_or_expression PIPE exclusive_or_expression) (COMMENT inclusive_or_expression "=>" "." exclusive_or_expression) (COMMENT exclusive_or_expression "=>" "." exclusive_or_expression CARROT and_expression) (COMMENT exclusive_or_expression "=>" "." and_expression) (COMMENT and_expression "=>" "." and_expression AMPERSAND equality_expression) (COMMENT and_expression "=>" "." equality_expression) (COMMENT equality_expression "=>" "." equality_expression NE_OP relational_expression) (COMMENT equality_expression "=>" "." equality_expression EQ_OP relational_expression) (COMMENT equality_expression "=>" "." relational_expression) (COMMENT relational_expression "=>" "." relational_expression GE_OP shift_expression) (COMMENT relational_expression "=>" "." relational_expression LE_OP shift_expression) (COMMENT relational_expression "=>" "." relational_expression GREATER_OP shift_expression) (COMMENT relational_expression "=>" "." relational_expression LESS_OP shift_expression) (COMMENT relational_expression "=>" "." shift_expression) (COMMENT shift_expression "=>" "." shift_expression RIGHT_OP additive_expression) (COMMENT shift_expression "=>" "." shift_expression LEFT_OP additive_expression) (COMMENT shift_expression "=>" "." additive_expression) (COMMENT additive_expression "=>" "." additive_expression MINUS multiplicative_expression) (COMMENT additive_expression "=>" "." additive_expression PLUS multiplicative_expression) (COMMENT additive_expression "=>" "." multiplicative_expression) (COMMENT multiplicative_expression "=>" "." multiplicative_expression AMPERSAND cast_expression) (COMMENT multiplicative_expression "=>" "." multiplicative_expression FORWARD_SLASH cast_expression) (COMMENT multiplicative_expression "=>" "." multiplicative_expression STAR cast_expression) (COMMENT multiplicative_expression "=>" "." cast_expression) (COMMENT cast_expression "=>" LPAREN "." type_name RPAREN cast_expression) (COMMENT cast_expression "=>" "." LPAREN type_name RPAREN cast_expression) (COMMENT cast_expression "=>" "." unary_expression) (COMMENT unary_operator "=>" "." BANG) (COMMENT unary_operator "=>" "." TWIDLE) (COMMENT unary_operator "=>" "." MINUS) (COMMENT unary_operator "=>" "." PLUS) (COMMENT unary_operator "=>" "." STAR) (COMMENT unary_operator "=>" "." AMPERSAND) (COMMENT unary_expression "=>" "." SIZEOF LPAREN type_name RPAREN) (COMMENT unary_expression "=>" "." SIZEOF unary_expression) (COMMENT unary_expression "=>" "." unary_operator cast_expression) (COMMENT unary_expression "=>" "." DEC_OP unary_expression) (COMMENT unary_expression "=>" "." INC_OP unary_expression) (COMMENT unary_expression "=>" "." postfix_expression) (COMMENT postfix_expression "=>" "." postfix_expression DEC_OP) (COMMENT postfix_expression "=>" "." postfix_expression INC_OP) (COMMENT postfix_expression "=>" "." postfix_expression PTR_OP IDENTIFIER) (COMMENT postfix_expression "=>" "." postfix_expression DOT IDENTIFIER) (COMMENT postfix_expression "=>" "." postfix_expression LPAREN argument_expression_list RPAREN) (COMMENT postfix_expression "=>" "." postfix_expression LPAREN RPAREN) (COMMENT postfix_expression "=>" "." postfix_expression LBRACK expression RBRACK) (COMMENT postfix_expression "=>" "." primary_expression) (COMMENT primary_expression "=>" LPAREN "." expression RPAREN) (COMMENT primary_expression "=>" "." LPAREN expression RPAREN) (COMMENT primary_expression "=>" "." STRING_LITERAL) (COMMENT primary_expression "=>" "." CONSTANT) (COMMENT primary_expression "=>" "." IDENTIFIER) (SHIFT (IDENTIFIER) s2) (SHIFT (CONSTANT) s3) (SHIFT (STRING_LITERAL) s4) (SHIFT (SIZEOF) s24) (SHIFT (INC_OP) s25) (SHIFT (DEC_OP) s26) (SHIFT (TYPE_NAME) s41) (SHIFT (CHAR) s42) (SHIFT (SHORT) s43) (SHIFT (INT) s44) (SHIFT (LONG) s45) (SHIFT (SIGNED) s46) (SHIFT (UNSIGNED) s47) (SHIFT (FLOAT) s48) (SHIFT (DOUBLE) s49) (SHIFT (CONST) s50) (SHIFT (VOLATILE) s51) (SHIFT (VOID) s52) (SHIFT (STRUCT) s53) (SHIFT (UNION) s54) (SHIFT (ENUM) s55) (SHIFT (LPAREN) s27) (SHIFT (AMPERSAND) s28) (SHIFT (STAR) s29) (SHIFT (PLUS) s30) (SHIFT (MINUS) s31) (SHIFT (TWIDLE) s32) (SHIFT (BANG) s33) (GOTO primary_expression s6) (GOTO postfix_expression s7) (GOTO unary_expression s8) (GOTO unary_operator s9) (GOTO cast_expression s10) (GOTO multiplicative_expression s11) (GOTO additive_expression s12) (GOTO shift_expression s13) (GOTO relational_expression s14) (GOTO equality_expression s15) (GOTO and_expression s16) (GOTO exclusive_or_expression s17) (GOTO inclusive_or_expression s18) (GOTO logical_and_expression s19) (GOTO logical_or_expression s20) (GOTO conditional_expression s21) (GOTO assignment_expression s22) (GOTO expression s23) (GOTO type_specifier s34) (GOTO struct_or_union_specifier s35) (GOTO struct_or_union s36) (GOTO specifier_qualifier_list s37) (GOTO enum_specifier s38) (GOTO type_qualifier s39) (GOTO type_name s40))
 (STATE s28 (COMMENT unary_operator "=>" AMPERSAND ".") (REDUCE () r22))
 (STATE s29 (COMMENT unary_operator "=>" STAR ".") (REDUCE () r23))
 (STATE s30 (COMMENT unary_operator "=>" PLUS ".") (REDUCE () r24))
 (STATE s31 (COMMENT unary_operator "=>" MINUS ".") (REDUCE () r25))
 (STATE s32 (COMMENT unary_operator "=>" TWIDLE ".") (REDUCE () r26))
 (STATE s33 (COMMENT unary_operator "=>" BANG ".") (REDUCE () r27))
 (STATE s34 (COMMENT type_qualifier "=>" "." VOLATILE) (COMMENT type_qualifier "=>" "." CONST) (COMMENT enum_specifier "=>" "." ENUM IDENTIFIER) (COMMENT enum_specifier "=>" "." ENUM IDENTIFIER LCURLY enumerator_list RCURLY) (COMMENT enum_specifier "=>" "." ENUM LCURLY enumerator_list RCURLY) (COMMENT specifier_qualifier_list "=>" "." type_qualifier) (COMMENT specifier_qualifier_list "=>" "." type_qualifier specifier_qualifier_list) (COMMENT specifier_qualifier_list "=>" type_specifier ".") (COMMENT specifier_qualifier_list "=>" "." type_specifier) (COMMENT specifier_qualifier_list "=>" type_specifier "." specifier_qualifier_list) (COMMENT specifier_qualifier_list "=>" "." type_specifier specifier_qualifier_list) (COMMENT struct_or_union "=>" "." UNION) (COMMENT struct_or_union "=>" "." STRUCT) (COMMENT struct_or_union_specifier "=>" "." struct_or_union IDENTIFIER) (COMMENT struct_or_union_specifier "=>" "." struct_or_union LCURLY struct_declaration_list RCURLY) (COMMENT struct_or_union_specifier "=>" "." struct_or_union IDENTIFIER LCURLY struct_declaration_list RCURLY) (COMMENT type_specifier "=>" "." TYPE_NAME) (COMMENT type_specifier "=>" "." enum_specifier) (COMMENT type_specifier "=>" "." struct_or_union_specifier) (COMMENT type_specifier "=>" "." UNSIGNED) (COMMENT type_specifier "=>" "." SIGNED) (COMMENT type_specifier "=>" "." DOUBLE) (COMMENT type_specifier "=>" "." FLOAT) (COMMENT type_specifier "=>" "." LONG) (COMMENT type_specifier "=>" "." INT) (COMMENT type_specifier "=>" "." SHORT) (COMMENT type_specifier "=>" "." CHAR) (COMMENT type_specifier "=>" "." VOID) (REDUCE (IDENTIFIER) r114) (SHIFT (TYPE_NAME) s41) (SHIFT (CHAR) s42) (SHIFT (SHORT) s43) (SHIFT (INT) s44) (SHIFT (LONG) s45) (SHIFT (SIGNED) s46) (SHIFT (UNSIGNED) s47) (SHIFT (FLOAT) s48) (SHIFT (DOUBLE) s49) (SHIFT (CONST) s50) (SHIFT (VOLATILE) s51) (SHIFT (VOID) s52) (SHIFT (STRUCT) s53) (SHIFT (UNION) s54) (SHIFT (ENUM) s55) (REDUCE (LPAREN) r114) (REDUCE (RPAREN) r114) (REDUCE (LBRACK) r114) (REDUCE (STAR) r114) (REDUCE (COLON) r114) (GOTO type_specifier s34) (GOTO struct_or_union_specifier s35) (GOTO struct_or_union s36) (GOTO specifier_qualifier_list s163) (GOTO enum_specifier s38) (GOTO type_qualifier s39))
 (STATE s35 (COMMENT type_specifier "=>" struct_or_union_specifier ".") (REDUCE () r102))
 (STATE s36 (COMMENT struct_or_union_specifier "=>" struct_or_union "." IDENTIFIER) (COMMENT struct_or_union_specifier "=>" struct_or_union "." LCURLY struct_declaration_list RCURLY) (COMMENT struct_or_union_specifier "=>" struct_or_union "." IDENTIFIER LCURLY struct_declaration_list RCURLY) (SHIFT (IDENTIFIER) s141) (SHIFT (LCURLY) s142))
 (STATE s37 (COMMENT direct_abstract_declarator "=>" "." direct_abstract_declarator LPAREN parameter_type_list RPAREN) (COMMENT direct_abstract_declarator "=>" "." direct_abstract_declarator LPAREN RPAREN) (COMMENT direct_abstract_declarator "=>" "." LPAREN parameter_type_list RPAREN) (COMMENT direct_abstract_declarator "=>" "." LPAREN RPAREN) (COMMENT direct_abstract_declarator "=>" "." direct_abstract_declarator LBRACK constant_expression RBRACK) (COMMENT direct_abstract_declarator "=>" "." direct_abstract_declarator LBRACK RBRACK) (COMMENT direct_abstract_declarator "=>" "." LBRACK constant_expression RBRACK) (COMMENT direct_abstract_declarator "=>" "." LBRACK RBRACK) (COMMENT direct_abstract_declarator "=>" "." LPAREN abstract_declarator RPAREN) (COMMENT abstract_declarator "=>" "." pointer direct_abstract_declarator) (COMMENT abstract_declarator "=>" "." direct_abstract_declarator) (COMMENT abstract_declarator "=>" "." pointer) (COMMENT type_name "=>" specifier_qualifier_list "." abstract_declarator) (COMMENT type_name "=>" specifier_qualifier_list ".") (COMMENT pointer "=>" "." STAR type_qualifier_list pointer) (COMMENT pointer "=>" "." STAR pointer) (COMMENT pointer "=>" "." STAR type_qualifier_list) (COMMENT pointer "=>" "." STAR) (SHIFT (LPAREN) s77) (REDUCE (RPAREN) r155) (SHIFT (LBRACK) s78) (SHIFT (STAR) s79) (GOTO pointer s74) (GOTO abstract_declarator s75) (GOTO direct_abstract_declarator s76))
 (STATE s38 (COMMENT type_specifier "=>" enum_specifier ".") (REDUCE () r103))
 (STATE s39 (COMMENT type_qualifier "=>" "." VOLATILE) (COMMENT type_qualifier "=>" "." CONST) (COMMENT enum_specifier "=>" "." ENUM IDENTIFIER) (COMMENT enum_specifier "=>" "." ENUM IDENTIFIER LCURLY enumerator_list RCURLY) (COMMENT enum_specifier "=>" "." ENUM LCURLY enumerator_list RCURLY) (COMMENT specifier_qualifier_list "=>" type_qualifier ".") (COMMENT specifier_qualifier_list "=>" "." type_qualifier) (COMMENT specifier_qualifier_list "=>" type_qualifier "." specifier_qualifier_list) (COMMENT specifier_qualifier_list "=>" "." type_qualifier specifier_qualifier_list) (COMMENT specifier_qualifier_list "=>" "." type_specifier) (COMMENT specifier_qualifier_list "=>" "." type_specifier specifier_qualifier_list) (COMMENT struct_or_union "=>" "." UNION) (COMMENT struct_or_union "=>" "." STRUCT) (COMMENT struct_or_union_specifier "=>" "." struct_or_union IDENTIFIER) (COMMENT struct_or_union_specifier "=>" "." struct_or_union LCURLY struct_declaration_list RCURLY) (COMMENT struct_or_union_specifier "=>" "." struct_or_union IDENTIFIER LCURLY struct_declaration_list RCURLY) (COMMENT type_specifier "=>" "." TYPE_NAME) (COMMENT type_specifier "=>" "." enum_specifier) (COMMENT type_specifier "=>" "." struct_or_union_specifier) (COMMENT type_specifier "=>" "." UNSIGNED) (COMMENT type_specifier "=>" "." SIGNED) (COMMENT type_specifier "=>" "." DOUBLE) (COMMENT type_specifier "=>" "." FLOAT) (COMMENT type_specifier "=>" "." LONG) (COMMENT type_specifier "=>" "." INT) (COMMENT type_specifier "=>" "." SHORT) (COMMENT type_specifier "=>" "." CHAR) (COMMENT type_specifier "=>" "." VOID) (REDUCE (IDENTIFIER) r116) (SHIFT (TYPE_NAME) s41) (SHIFT (CHAR) s42) (SHIFT (SHORT) s43) (SHIFT (INT) s44) (SHIFT (LONG) s45) (SHIFT (SIGNED) s46) (SHIFT (UNSIGNED) s47) (SHIFT (FLOAT) s48) (SHIFT (DOUBLE) s49) (SHIFT (CONST) s50) (SHIFT (VOLATILE) s51) (SHIFT (VOID) s52) (SHIFT (STRUCT) s53) (SHIFT (UNION) s54) (SHIFT (ENUM) s55) (REDUCE (LPAREN) r116) (REDUCE (RPAREN) r116) (REDUCE (LBRACK) r116) (REDUCE (STAR) r116) (REDUCE (COLON) r116) (GOTO type_specifier s34) (GOTO struct_or_union_specifier s35) (GOTO struct_or_union s36) (GOTO specifier_qualifier_list s73) (GOTO enum_specifier s38) (GOTO type_qualifier s39))
 (STATE s40 (COMMENT cast_expression "=>" LPAREN type_name "." RPAREN cast_expression) (SHIFT (RPAREN) s71))
 (STATE s41 (COMMENT type_specifier "=>" TYPE_NAME ".") (REDUCE () r104))
 (STATE s42 (COMMENT type_specifier "=>" CHAR ".") (REDUCE () r94))
 (STATE s43 (COMMENT type_specifier "=>" SHORT ".") (REDUCE () r95))
 (STATE s44 (COMMENT type_specifier "=>" INT ".") (REDUCE () r96))
 (STATE s45 (COMMENT type_specifier "=>" LONG ".") (REDUCE () r97))
 (STATE s46 (COMMENT type_specifier "=>" SIGNED ".") (REDUCE () r100))
 (STATE s47 (COMMENT type_specifier "=>" UNSIGNED ".") (REDUCE () r101))
 (STATE s48 (COMMENT type_specifier "=>" FLOAT ".") (REDUCE () r98))
 (STATE s49 (COMMENT type_specifier "=>" DOUBLE ".") (REDUCE () r99))
 (STATE s50 (COMMENT type_qualifier "=>" CONST ".") (REDUCE () r129))
 (STATE s51 (COMMENT type_qualifier "=>" VOLATILE ".") (REDUCE () r130))
 (STATE s52 (COMMENT type_specifier "=>" VOID ".") (REDUCE () r93))
 (STATE s53 (COMMENT struct_or_union "=>" STRUCT ".") (REDUCE () r108))
 (STATE s54 (COMMENT struct_or_union "=>" UNION ".") (REDUCE () r109))
 (STATE s55 (COMMENT enum_specifier "=>" ENUM "." IDENTIFIER) (COMMENT enum_specifier "=>" ENUM "." IDENTIFIER LCURLY enumerator_list RCURLY) (COMMENT enum_specifier "=>" ENUM "." LCURLY enumerator_list RCURLY) (SHIFT (IDENTIFIER) s56) (SHIFT (LCURLY) s57))
 (STATE s56 (COMMENT enum_specifier "=>" ENUM IDENTIFIER ".") (COMMENT enum_specifier "=>" ENUM IDENTIFIER "." LCURLY enumerator_list RCURLY) (REDUCE (IDENTIFIER) r124) (REDUCE (TYPE_NAME) r124) (REDUCE (TYPEDEF) r124) (REDUCE (EXTERN) r124) (REDUCE (STATIC) r124) (REDUCE (AUTO) r124) (REDUCE (REGISTER) r124) (REDUCE (CHAR) r124) (REDUCE (SHORT) r124) (REDUCE (INT) r124) (REDUCE (LONG) r124) (REDUCE (SIGNED) r124) (REDUCE (UNSIGNED) r124) (REDUCE (FLOAT) r124) (REDUCE (DOUBLE) r124) (REDUCE (CONST) r124) (REDUCE (VOLATILE) r124) (REDUCE (VOID) r124) (REDUCE (STRUCT) r124) (REDUCE (UNION) r124) (REDUCE (ENUM) r124) (REDUCE (LPAREN) r124) (REDUCE (RPAREN) r124) (REDUCE (LBRACK) r124) (SHIFT (LCURLY) s68) (REDUCE (COMMA) r124) (REDUCE (STAR) r124) (REDUCE (COLON) r124))
 (STATE s57 (COMMENT enumerator "=>" "." IDENTIFIER EQUAL_SIGN constant_expression) (COMMENT enumerator "=>" "." IDENTIFIER) (COMMENT enumerator_list "=>" "." enumerator_list COMMA enumerator) (COMMENT enumerator_list "=>" "." enumerator) (COMMENT enum_specifier "=>" ENUM LCURLY "." enumerator_list RCURLY) (SHIFT (IDENTIFIER) s60) (GOTO enumerator_list s58) (GOTO enumerator s59))
 (STATE s58 (COMMENT enumerator_list "=>" enumerator_list "." COMMA enumerator) (COMMENT enum_specifier "=>" ENUM LCURLY enumerator_list "." RCURLY) (SHIFT (RCURLY) s65) (SHIFT (COMMA) s66))
 (STATE s59 (COMMENT enumerator_list "=>" enumerator ".") (REDUCE () r125))
 (STATE s60 (COMMENT enumerator "=>" IDENTIFIER "." EQUAL_SIGN constant_expression) (COMMENT enumerator "=>" IDENTIFIER ".") (REDUCE (RCURLY) r127) (REDUCE (COMMA) r127) (SHIFT (EQUAL_SIGN) s61))
 (STATE s61 (COMMENT enumerator "=>" IDENTIFIER EQUAL_SIGN "." constant_expression) (COMMENT constant_expression "=>" "." conditional_expression) (COMMENT conditional_expression "=>" "." logical_or_expression QMARK expression COLON conditional_expression) (COMMENT conditional_expression "=>" "." logical_or_expression) (COMMENT logical_or_expression "=>" "." logical_or_expression OR_OP logical_and_expression) (COMMENT logical_or_expression "=>" "." logical_and_expression) (COMMENT logical_and_expression "=>" "." logical_and_expression AND_OP inclusive_or_expression) (COMMENT logical_and_expression "=>" "." inclusive_or_expression) (COMMENT inclusive_or_expression "=>" "." inclusive_or_expression PIPE exclusive_or_expression) (COMMENT inclusive_or_expression "=>" "." exclusive_or_expression) (COMMENT exclusive_or_expression "=>" "." exclusive_or_expression CARROT and_expression) (COMMENT exclusive_or_expression "=>" "." and_expression) (COMMENT and_expression "=>" "." and_expression AMPERSAND equality_expression) (COMMENT and_expression "=>" "." equality_expression) (COMMENT equality_expression "=>" "." equality_expression NE_OP relational_expression) (COMMENT equality_expression "=>" "." equality_expression EQ_OP relational_expression) (COMMENT equality_expression "=>" "." relational_expression) (COMMENT relational_expression "=>" "." relational_expression GE_OP shift_expression) (COMMENT relational_expression "=>" "." relational_expression LE_OP shift_expression) (COMMENT relational_expression "=>" "." relational_expression GREATER_OP shift_expression) (COMMENT relational_expression "=>" "." relational_expression LESS_OP shift_expression) (COMMENT relational_expression "=>" "." shift_expression) (COMMENT shift_expression "=>" "." shift_expression RIGHT_OP additive_expression) (COMMENT shift_expression "=>" "." shift_expression LEFT_OP additive_expression) (COMMENT shift_expression "=>" "." additive_expression) (COMMENT additive_expression "=>" "." additive_expression MINUS multiplicative_expression) (COMMENT additive_expression "=>" "." additive_expression PLUS multiplicative_expression) (COMMENT additive_expression "=>" "." multiplicative_expression) (COMMENT multiplicative_expression "=>" "." multiplicative_expression AMPERSAND cast_expression) (COMMENT multiplicative_expression "=>" "." multiplicative_expression FORWARD_SLASH cast_expression) (COMMENT multiplicative_expression "=>" "." multiplicative_expression STAR cast_expression) (COMMENT multiplicative_expression "=>" "." cast_expression) (COMMENT cast_expression "=>" "." LPAREN type_name RPAREN cast_expression) (COMMENT cast_expression "=>" "." unary_expression) (COMMENT unary_operator "=>" "." BANG) (COMMENT unary_operator "=>" "." TWIDLE) (COMMENT unary_operator "=>" "." MINUS) (COMMENT unary_operator "=>" "." PLUS) (COMMENT unary_operator "=>" "." STAR) (COMMENT unary_operator "=>" "." AMPERSAND) (COMMENT unary_expression "=>" "." SIZEOF LPAREN type_name RPAREN) (COMMENT unary_expression "=>" "." SIZEOF unary_expression) (COMMENT unary_expression "=>" "." unary_operator cast_expression) (COMMENT unary_expression "=>" "." DEC_OP unary_expression) (COMMENT unary_expression "=>" "." INC_OP unary_expression) (COMMENT unary_expression "=>" "." postfix_expression) (COMMENT postfix_expression "=>" "." postfix_expression DEC_OP) (COMMENT postfix_expression "=>" "." postfix_expression INC_OP) (COMMENT postfix_expression "=>" "." postfix_expression PTR_OP IDENTIFIER) (COMMENT postfix_expression "=>" "." postfix_expression DOT IDENTIFIER) (COMMENT postfix_expression "=>" "." postfix_expression LPAREN argument_expression_list RPAREN) (COMMENT postfix_expression "=>" "." postfix_expression LPAREN RPAREN) (COMMENT postfix_expression "=>" "." postfix_expression LBRACK expression RBRACK) (COMMENT postfix_expression "=>" "." primary_expression) (COMMENT primary_expression "=>" "." LPAREN expression RPAREN) (COMMENT primary_expression "=>" "." STRING_LITERAL) (COMMENT primary_expression "=>" "." CONSTANT) (COMMENT primary_expression "=>" "." IDENTIFIER) (SHIFT (IDENTIFIER) s2) (SHIFT (CONSTANT) s3) (SHIFT (STRING_LITERAL) s4) (SHIFT (SIZEOF) s24) (SHIFT (INC_OP) s25) (SHIFT (DEC_OP) s26) (SHIFT (LPAREN) s27) (SHIFT (AMPERSAND) s28) (SHIFT (STAR) s29) (SHIFT (PLUS) s30) (SHIFT (MINUS) s31) (SHIFT (TWIDLE) s32) (SHIFT (BANG) s33) (GOTO primary_expression s6) (GOTO postfix_expression s7) (GOTO unary_expression s62) (GOTO unary_operator s9) (GOTO cast_expression s10) (GOTO multiplicative_expression s11) (GOTO additive_expression s12) (GOTO shift_expression s13) (GOTO relational_expression s14) (GOTO equality_expression s15) (GOTO and_expression s16) (GOTO exclusive_or_expression s17) (GOTO inclusive_or_expression s18) (GOTO logical_and_expression s19) (GOTO logical_or_expression s20) (GOTO conditional_expression s63) (GOTO constant_expression s64))
 (STATE s62 (COMMENT cast_expression "=>" unary_expression ".") (REDUCE () r28))
 (STATE s63 (COMMENT constant_expression "=>" conditional_expression ".") (REDUCE () r75))
 (STATE s64 (COMMENT enumerator "=>" IDENTIFIER EQUAL_SIGN constant_expression ".") (REDUCE () r128))
 (STATE s65 (COMMENT enum_specifier "=>" ENUM LCURLY enumerator_list RCURLY ".") (REDUCE () r122))
 (STATE s66 (COMMENT enumerator "=>" "." IDENTIFIER EQUAL_SIGN constant_expression) (COMMENT enumerator "=>" "." IDENTIFIER) (COMMENT enumerator_list "=>" enumerator_list COMMA "." enumerator) (SHIFT (IDENTIFIER) s60) (GOTO enumerator s67))
 (STATE s67 (COMMENT enumerator_list "=>" enumerator_list COMMA enumerator ".") (REDUCE () r126))
 (STATE s68 (COMMENT enumerator "=>" "." IDENTIFIER EQUAL_SIGN constant_expression) (COMMENT enumerator "=>" "." IDENTIFIER) (COMMENT enumerator_list "=>" "." enumerator_list COMMA enumerator) (COMMENT enumerator_list "=>" "." enumerator) (COMMENT enum_specifier "=>" ENUM IDENTIFIER LCURLY "." enumerator_list RCURLY) (SHIFT (IDENTIFIER) s60) (GOTO enumerator_list s69) (GOTO enumerator s59))
 (STATE s69 (COMMENT enumerator_list "=>" enumerator_list "." COMMA enumerator) (COMMENT enum_specifier "=>" ENUM IDENTIFIER LCURLY enumerator_list "." RCURLY) (SHIFT (RCURLY) s70) (SHIFT (COMMA) s66))
 (STATE s70 (COMMENT enum_specifier "=>" ENUM IDENTIFIER LCURLY enumerator_list RCURLY ".") (REDUCE () r123))
 (STATE s71 (COMMENT cast_expression "=>" LPAREN type_name RPAREN "." cast_expression) (COMMENT cast_expression "=>" "." LPAREN type_name RPAREN cast_expression) (COMMENT cast_expression "=>" "." unary_expression) (COMMENT unary_operator "=>" "." BANG) (COMMENT unary_operator "=>" "." TWIDLE) (COMMENT unary_operator "=>" "." MINUS) (COMMENT unary_operator "=>" "." PLUS) (COMMENT unary_operator "=>" "." STAR) (COMMENT unary_operator "=>" "." AMPERSAND) (COMMENT unary_expression "=>" "." SIZEOF LPAREN type_name RPAREN) (COMMENT unary_expression "=>" "." SIZEOF unary_expression) (COMMENT unary_expression "=>" "." unary_operator cast_expression) (COMMENT unary_expression "=>" "." DEC_OP unary_expression) (COMMENT unary_expression "=>" "." INC_OP unary_expression) (COMMENT unary_expression "=>" "." postfix_expression) (COMMENT postfix_expression "=>" "." postfix_expression DEC_OP) (COMMENT postfix_expression "=>" "." postfix_expression INC_OP) (COMMENT postfix_expression "=>" "." postfix_expression PTR_OP IDENTIFIER) (COMMENT postfix_expression "=>" "." postfix_expression DOT IDENTIFIER) (COMMENT postfix_expression "=>" "." postfix_expression LPAREN argument_expression_list RPAREN) (COMMENT postfix_expression "=>" "." postfix_expression LPAREN RPAREN) (COMMENT postfix_expression "=>" "." postfix_expression LBRACK expression RBRACK) (COMMENT postfix_expression "=>" "." primary_expression) (COMMENT primary_expression "=>" "." LPAREN expression RPAREN) (COMMENT primary_expression "=>" "." STRING_LITERAL) (COMMENT primary_expression "=>" "." CONSTANT) (COMMENT primary_expression "=>" "." IDENTIFIER) (SHIFT (IDENTIFIER) s2) (SHIFT (CONSTANT) s3) (SHIFT (STRING_LITERAL) s4) (SHIFT (SIZEOF) s24) (SHIFT (INC_OP) s25) (SHIFT (DEC_OP) s26) (SHIFT (LPAREN) s27) (SHIFT (AMPERSAND) s28) (SHIFT (STAR) s29) (SHIFT (PLUS) s30) (SHIFT (MINUS) s31) (SHIFT (TWIDLE) s32) (SHIFT (BANG) s33) (GOTO primary_expression s6) (GOTO postfix_expression s7) (GOTO unary_expression s62) (GOTO unary_operator s9) (GOTO cast_expression s72))
 (STATE s72 (COMMENT cast_expression "=>" LPAREN type_name RPAREN cast_expression ".") (REDUCE () r29))
 (STATE s73 (COMMENT specifier_qualifier_list "=>" type_qualifier specifier_qualifier_list ".") (REDUCE () r115))
 (STATE s74 (COMMENT direct_abstract_declarator "=>" "." direct_abstract_declarator LPAREN parameter_type_list RPAREN) (COMMENT direct_abstract_declarator "=>" "." direct_abstract_declarator LPAREN RPAREN) (COMMENT direct_abstract_declarator "=>" "." LPAREN parameter_type_list RPAREN) (COMMENT direct_abstract_declarator "=>" "." LPAREN RPAREN) (COMMENT direct_abstract_declarator "=>" "." direct_abstract_declarator LBRACK constant_expression RBRACK) (COMMENT direct_abstract_declarator "=>" "." direct_abstract_declarator LBRACK RBRACK) (COMMENT direct_abstract_declarator "=>" "." LBRACK constant_expression RBRACK) (COMMENT direct_abstract_declarator "=>" "." LBRACK RBRACK) (COMMENT direct_abstract_declarator "=>" "." LPAREN abstract_declarator RPAREN) (COMMENT abstract_declarator "=>" pointer "." direct_abstract_declarator) (COMMENT abstract_declarator "=>" pointer ".") (SHIFT (LPAREN) s77) (REDUCE (RPAREN) r157) (SHIFT (LBRACK) s78) (GOTO direct_abstract_declarator s119))
 (STATE s75 (COMMENT type_name "=>" specifier_qualifier_list abstract_declarator ".") (REDUCE () r156))
 (STATE s76 (COMMENT direct_abstract_declarator "=>" direct_abstract_declarator "." LPAREN parameter_type_list RPAREN) (COMMENT direct_abstract_declarator "=>" direct_abstract_declarator "." LPAREN RPAREN) (COMMENT direct_abstract_declarator "=>" direct_abstract_declarator "." LBRACK constant_expression RBRACK) (COMMENT direct_abstract_declarator "=>" direct_abstract_declarator "." LBRACK RBRACK) (COMMENT abstract_declarator "=>" direct_abstract_declarator ".") (SHIFT (LPAREN) s120) (REDUCE (RPAREN) r158) (SHIFT (LBRACK) s121) (REDUCE (COMMA) r158))
 (STATE s77 (COMMENT direct_abstract_declarator "=>" "." direct_abstract_declarator LPAREN parameter_type_list RPAREN) (COMMENT direct_abstract_declarator "=>" "." direct_abstract_declarator LPAREN RPAREN) (COMMENT direct_abstract_declarator "=>" LPAREN "." parameter_type_list RPAREN) (COMMENT direct_abstract_declarator "=>" "." LPAREN parameter_type_list RPAREN) (COMMENT direct_abstract_declarator "=>" LPAREN "." RPAREN) (COMMENT direct_abstract_declarator "=>" "." LPAREN RPAREN) (COMMENT direct_abstract_declarator "=>" "." direct_abstract_declarator LBRACK constant_expression RBRACK) (COMMENT direct_abstract_declarator "=>" "." direct_abstract_declarator LBRACK RBRACK) (COMMENT direct_abstract_declarator "=>" "." LBRACK constant_expression RBRACK) (COMMENT direct_abstract_declarator "=>" "." LBRACK RBRACK) (COMMENT direct_abstract_declarator "=>" LPAREN "." abstract_declarator RPAREN) (COMMENT direct_abstract_declarator "=>" "." LPAREN abstract_declarator RPAREN) (COMMENT abstract_declarator "=>" "." pointer direct_abstract_declarator) (COMMENT abstract_declarator "=>" "." direct_abstract_declarator) (COMMENT abstract_declarator "=>" "." pointer) (COMMENT parameter_declaration "=>" "." declaration_specifiers) (COMMENT parameter_declaration "=>" "." declaration_specifiers abstract_declarator) (COMMENT parameter_declaration "=>" "." declaration_specifiers declarator) (COMMENT parameter_list "=>" "." parameter_list COMMA parameter_declaration) (COMMENT parameter_list "=>" "." parameter_declaration) (COMMENT parameter_type_list "=>" "." parameter_list COMMA ELLIPSIS) (COMMENT parameter_type_list "=>" "." parameter_list) (COMMENT pointer "=>" "." STAR type_qualifier_list pointer) (COMMENT pointer "=>" "." STAR pointer) (COMMENT pointer "=>" "." STAR type_qualifier_list) (COMMENT pointer "=>" "." STAR) (COMMENT type_qualifier "=>" "." VOLATILE) (COMMENT type_qualifier "=>" "." CONST) (COMMENT enum_specifier "=>" "." ENUM IDENTIFIER) (COMMENT enum_specifier "=>" "." ENUM IDENTIFIER LCURLY enumerator_list RCURLY) (COMMENT enum_specifier "=>" "." ENUM LCURLY enumerator_list RCURLY) (COMMENT struct_or_union "=>" "." UNION) (COMMENT struct_or_union "=>" "." STRUCT) (COMMENT struct_or_union_specifier "=>" "." struct_or_union IDENTIFIER) (COMMENT struct_or_union_specifier "=>" "." struct_or_union LCURLY struct_declaration_list RCURLY) (COMMENT struct_or_union_specifier "=>" "." struct_or_union IDENTIFIER LCURLY struct_declaration_list RCURLY) (COMMENT type_specifier "=>" "." TYPE_NAME) (COMMENT type_specifier "=>" "." enum_specifier) (COMMENT type_specifier "=>" "." struct_or_union_specifier) (COMMENT type_specifier "=>" "." UNSIGNED) (COMMENT type_specifier "=>" "." SIGNED) (COMMENT type_specifier "=>" "." DOUBLE) (COMMENT type_specifier "=>" "." FLOAT) (COMMENT type_specifier "=>" "." LONG) (COMMENT type_specifier "=>" "." INT) (COMMENT type_specifier "=>" "." SHORT) (COMMENT type_specifier "=>" "." CHAR) (COMMENT type_specifier "=>" "." VOID) (COMMENT storage_class_specifier "=>" "." REGISTER) (COMMENT storage_class_specifier "=>" "." AUTO) (COMMENT storage_class_specifier "=>" "." STATIC) (COMMENT storage_class_specifier "=>" "." EXTERN) (COMMENT storage_class_specifier "=>" "." TYPEDEF) (COMMENT declaration_specifiers "=>" "." type_qualifier declaration_specifiers) (COMMENT declaration_specifiers "=>" "." type_qualifier) (COMMENT declaration_specifiers "=>" "." type_specifier declaration_specifiers) (COMMENT declaration_specifiers "=>" "." type_specifier) (COMMENT declaration_specifiers "=>" "." storage_class_specifier declaration_specifiers) (COMMENT declaration_specifiers "=>" "." storage_class_specifier) (SHIFT (TYPE_NAME) s41) (SHIFT (TYPEDEF) s96) (SHIFT (EXTERN) s97) (SHIFT (STATIC) s98) (SHIFT (AUTO) s99) (SHIFT (REGISTER) s100) (SHIFT (CHAR) s42) (SHIFT (SHORT) s43) (SHIFT (INT) s44) (SHIFT (LONG) s45) (SHIFT (SIGNED) s46) (SHIFT (UNSIGNED) s47) (SHIFT (FLOAT) s48) (SHIFT (DOUBLE) s49) (SHIFT (CONST) s50) (SHIFT (VOLATILE) s51) (SHIFT (VOID) s52) (SHIFT (STRUCT) s53) (SHIFT (UNION) s54) (SHIFT (ENUM) s55) (SHIFT (LPAREN) s77) (SHIFT (RPAREN) s101) (SHIFT (LBRACK) s78) (SHIFT (STAR) s79) (GOTO declaration_specifiers s88) (GOTO storage_class_specifier s89) (GOTO type_specifier s90) (GOTO struct_or_union_specifier s35) (GOTO struct_or_union s36) (GOTO enum_specifier s38) (GOTO type_qualifier s91) (GOTO pointer s74) (GOTO parameter_type_list s92) (GOTO parameter_list s93) (GOTO parameter_declaration s94) (GOTO abstract_declarator s95) (GOTO direct_abstract_declarator s76))
 (STATE s78 (COMMENT direct_abstract_declarator "=>" LBRACK "." constant_expression RBRACK) (COMMENT direct_abstract_declarator "=>" LBRACK "." RBRACK) (COMMENT constant_expression "=>" "." conditional_expression) (COMMENT conditional_expression "=>" "." logical_or_expression QMARK expression COLON conditional_expression) (COMMENT conditional_expression "=>" "." logical_or_expression) (COMMENT logical_or_expression "=>" "." logical_or_expression OR_OP logical_and_expression) (COMMENT logical_or_expression "=>" "." logical_and_expression) (COMMENT logical_and_expression "=>" "." logical_and_expression AND_OP inclusive_or_expression) (COMMENT logical_and_expression "=>" "." inclusive_or_expression) (COMMENT inclusive_or_expression "=>" "." inclusive_or_expression PIPE exclusive_or_expression) (COMMENT inclusive_or_expression "=>" "." exclusive_or_expression) (COMMENT exclusive_or_expression "=>" "." exclusive_or_expression CARROT and_expression) (COMMENT exclusive_or_expression "=>" "." and_expression) (COMMENT and_expression "=>" "." and_expression AMPERSAND equality_expression) (COMMENT and_expression "=>" "." equality_expression) (COMMENT equality_expression "=>" "." equality_expression NE_OP relational_expression) (COMMENT equality_expression "=>" "." equality_expression EQ_OP relational_expression) (COMMENT equality_expression "=>" "." relational_expression) (COMMENT relational_expression "=>" "." relational_expression GE_OP shift_expression) (COMMENT relational_expression "=>" "." relational_expression LE_OP shift_expression) (COMMENT relational_expression "=>" "." relational_expression GREATER_OP shift_expression) (COMMENT relational_expression "=>" "." relational_expression LESS_OP shift_expression) (COMMENT relational_expression "=>" "." shift_expression) (COMMENT shift_expression "=>" "." shift_expression RIGHT_OP additive_expression) (COMMENT shift_expression "=>" "." shift_expression LEFT_OP additive_expression) (COMMENT shift_expression "=>" "." additive_expression) (COMMENT additive_expression "=>" "." additive_expression MINUS multiplicative_expression) (COMMENT additive_expression "=>" "." additive_expression PLUS multiplicative_expression) (COMMENT additive_expression "=>" "." multiplicative_expression) (COMMENT multiplicative_expression "=>" "." multiplicative_expression AMPERSAND cast_expression) (COMMENT multiplicative_expression "=>" "." multiplicative_expression FORWARD_SLASH cast_expression) (COMMENT multiplicative_expression "=>" "." multiplicative_expression STAR cast_expression) (COMMENT multiplicative_expression "=>" "." cast_expression) (COMMENT cast_expression "=>" "." LPAREN type_name RPAREN cast_expression) (COMMENT cast_expression "=>" "." unary_expression) (COMMENT unary_operator "=>" "." BANG) (COMMENT unary_operator "=>" "." TWIDLE) (COMMENT unary_operator "=>" "." MINUS) (COMMENT unary_operator "=>" "." PLUS) (COMMENT unary_operator "=>" "." STAR) (COMMENT unary_operator "=>" "." AMPERSAND) (COMMENT unary_expression "=>" "." SIZEOF LPAREN type_name RPAREN) (COMMENT unary_expression "=>" "." SIZEOF unary_expression) (COMMENT unary_expression "=>" "." unary_operator cast_expression) (COMMENT unary_expression "=>" "." DEC_OP unary_expression) (COMMENT unary_expression "=>" "." INC_OP unary_expression) (COMMENT unary_expression "=>" "." postfix_expression) (COMMENT postfix_expression "=>" "." postfix_expression DEC_OP) (COMMENT postfix_expression "=>" "." postfix_expression INC_OP) (COMMENT postfix_expression "=>" "." postfix_expression PTR_OP IDENTIFIER) (COMMENT postfix_expression "=>" "." postfix_expression DOT IDENTIFIER) (COMMENT postfix_expression "=>" "." postfix_expression LPAREN argument_expression_list RPAREN) (COMMENT postfix_expression "=>" "." postfix_expression LPAREN RPAREN) (COMMENT postfix_expression "=>" "." postfix_expression LBRACK expression RBRACK) (COMMENT postfix_expression "=>" "." primary_expression) (COMMENT primary_expression "=>" "." LPAREN expression RPAREN) (COMMENT primary_expression "=>" "." STRING_LITERAL) (COMMENT primary_expression "=>" "." CONSTANT) (COMMENT primary_expression "=>" "." IDENTIFIER) (SHIFT (IDENTIFIER) s2) (SHIFT (CONSTANT) s3) (SHIFT (STRING_LITERAL) s4) (SHIFT (SIZEOF) s24) (SHIFT (INC_OP) s25) (SHIFT (DEC_OP) s26) (SHIFT (LPAREN) s27) (SHIFT (RBRACK) s86) (SHIFT (AMPERSAND) s28) (SHIFT (STAR) s29) (SHIFT (PLUS) s30) (SHIFT (MINUS) s31) (SHIFT (TWIDLE) s32) (SHIFT (BANG) s33) (GOTO primary_expression s6) (GOTO postfix_expression s7) (GOTO unary_expression s62) (GOTO unary_operator s9) (GOTO cast_expression s10) (GOTO multiplicative_expression s11) (GOTO additive_expression s12) (GOTO shift_expression s13) (GOTO relational_expression s14) (GOTO equality_expression s15) (GOTO and_expression s16) (GOTO exclusive_or_expression s17) (GOTO inclusive_or_expression s18) (GOTO logical_and_expression s19) (GOTO logical_or_expression s20) (GOTO conditional_expression s63) (GOTO constant_expression s85))
 (STATE s79 (COMMENT type_qualifier_list "=>" "." type_qualifier_list type_qualifier) (COMMENT type_qualifier_list "=>" "." type_qualifier) (COMMENT pointer "=>" STAR "." type_qualifier_list pointer) (COMMENT pointer "=>" "." STAR type_qualifier_list pointer) (COMMENT pointer "=>" STAR "." pointer) (COMMENT pointer "=>" "." STAR pointer) (COMMENT pointer "=>" STAR "." type_qualifier_list) (COMMENT pointer "=>" "." STAR type_qualifier_list) (COMMENT pointer "=>" STAR ".") (COMMENT pointer "=>" "." STAR) (COMMENT type_qualifier "=>" "." VOLATILE) (COMMENT type_qualifier "=>" "." CONST) (REDUCE (IDENTIFIER) r140) (SHIFT (CONST) s50) (SHIFT (VOLATILE) s51) (REDUCE (LPAREN) r140) (REDUCE (RPAREN) r140) (REDUCE (LBRACK) r140) (REDUCE (COMMA) r140) (SHIFT (STAR) s79) (GOTO type_qualifier s80) (GOTO pointer s81) (GOTO type_qualifier_list s82))
 (STATE s80 (COMMENT type_qualifier_list "=>" type_qualifier ".") (REDUCE () r144))
 (STATE s81 (COMMENT pointer "=>" STAR pointer ".") (REDUCE () r142))
 (STATE s82 (COMMENT type_qualifier_list "=>" type_qualifier_list "." type_qualifier) (COMMENT pointer "=>" STAR type_qualifier_list "." pointer) (COMMENT pointer "=>" "." STAR type_qualifier_list pointer) (COMMENT pointer "=>" "." STAR pointer) (COMMENT pointer "=>" STAR type_qualifier_list ".") (COMMENT pointer "=>" "." STAR type_qualifier_list) (COMMENT pointer "=>" "." STAR) (COMMENT type_qualifier "=>" "." VOLATILE) (COMMENT type_qualifier "=>" "." CONST) (REDUCE (IDENTIFIER) r141) (SHIFT (CONST) s50) (SHIFT (VOLATILE) s51) (REDUCE (LPAREN) r141) (REDUCE (RPAREN) r141) (REDUCE (LBRACK) r141) (REDUCE (COMMA) r141) (SHIFT (STAR) s79) (GOTO type_qualifier s83) (GOTO pointer s84))
 (STATE s83 (COMMENT type_qualifier_list "=>" type_qualifier_list type_qualifier ".") (REDUCE () r145))
 (STATE s84 (COMMENT pointer "=>" STAR type_qualifier_list pointer ".") (REDUCE () r143))
 (STATE s85 (COMMENT direct_abstract_declarator "=>" LBRACK constant_expression "." RBRACK) (SHIFT (RBRACK) s87))
 (STATE s86 (COMMENT direct_abstract_declarator "=>" LBRACK RBRACK ".") (REDUCE () r161))
 (STATE s87 (COMMENT direct_abstract_declarator "=>" LBRACK constant_expression RBRACK ".") (REDUCE () r162))
 (STATE s88 (COMMENT direct_abstract_declarator "=>" "." direct_abstract_declarator LPAREN parameter_type_list RPAREN) (COMMENT direct_abstract_declarator "=>" "." direct_abstract_declarator LPAREN RPAREN) (COMMENT direct_abstract_declarator "=>" "." LPAREN parameter_type_list RPAREN) (COMMENT direct_abstract_declarator "=>" "." LPAREN RPAREN) (COMMENT direct_abstract_declarator "=>" "." direct_abstract_declarator LBRACK constant_expression RBRACK) (COMMENT direct_abstract_declarator "=>" "." direct_abstract_declarator LBRACK RBRACK) (COMMENT direct_abstract_declarator "=>" "." LBRACK constant_expression RBRACK) (COMMENT direct_abstract_declarator "=>" "." LBRACK RBRACK) (COMMENT direct_abstract_declarator "=>" "." LPAREN abstract_declarator RPAREN) (COMMENT abstract_declarator "=>" "." pointer direct_abstract_declarator) (COMMENT abstract_declarator "=>" "." direct_abstract_declarator) (COMMENT abstract_declarator "=>" "." pointer) (COMMENT parameter_declaration "=>" declaration_specifiers ".") (COMMENT parameter_declaration "=>" declaration_specifiers "." abstract_declarator) (COMMENT parameter_declaration "=>" declaration_specifiers "." declarator) (COMMENT pointer "=>" "." STAR type_qualifier_list pointer) (COMMENT pointer "=>" "." STAR pointer) (COMMENT pointer "=>" "." STAR type_qualifier_list) (COMMENT pointer "=>" "." STAR) (COMMENT direct_declarator "=>" "." direct_declarator LPAREN RPAREN) (COMMENT direct_declarator "=>" "." direct_declarator LPAREN identifier_list RPAREN) (COMMENT direct_declarator "=>" "." direct_declarator LPAREN parameter_type_list RPAREN) (COMMENT direct_declarator "=>" "." direct_declarator LBRACK RBRACK) (COMMENT direct_declarator "=>" "." direct_declarator LBRACK constant_expression RBRACK) (COMMENT direct_declarator "=>" "." LPAREN declarator RPAREN) (COMMENT direct_declarator "=>" "." IDENTIFIER) (COMMENT declarator "=>" "." direct_declarator) (COMMENT declarator "=>" "." pointer direct_declarator) (SHIFT (IDENTIFIER) s114) (SHIFT (LPAREN) s115) (REDUCE (RPAREN) r152) (SHIFT (LBRACK) s78) (REDUCE (COMMA) r152) (SHIFT (STAR) s79) (GOTO declarator s110) (GOTO direct_declarator s111) (GOTO pointer s112) (GOTO abstract_declarator s113) (GOTO direct_abstract_declarator s76))
 (STATE s89 (COMMENT type_qualifier "=>" "." VOLATILE) (COMMENT type_qualifier "=>" "." CONST) (COMMENT enum_specifier "=>" "." ENUM IDENTIFIER) (COMMENT enum_specifier "=>" "." ENUM IDENTIFIER LCURLY enumerator_list RCURLY) (COMMENT enum_specifier "=>" "." ENUM LCURLY enumerator_list RCURLY) (COMMENT struct_or_union "=>" "." UNION) (COMMENT struct_or_union "=>" "." STRUCT) (COMMENT struct_or_union_specifier "=>" "." struct_or_union IDENTIFIER) (COMMENT struct_or_union_specifier "=>" "." struct_or_union LCURLY struct_declaration_list RCURLY) (COMMENT struct_or_union_specifier "=>" "." struct_or_union IDENTIFIER LCURLY struct_declaration_list RCURLY) (COMMENT type_specifier "=>" "." TYPE_NAME) (COMMENT type_specifier "=>" "." enum_specifier) (COMMENT type_specifier "=>" "." struct_or_union_specifier) (COMMENT type_specifier "=>" "." UNSIGNED) (COMMENT type_specifier "=>" "." SIGNED) (COMMENT type_specifier "=>" "." DOUBLE) (COMMENT type_specifier "=>" "." FLOAT) (COMMENT type_specifier "=>" "." LONG) (COMMENT type_specifier "=>" "." INT) (COMMENT type_specifier "=>" "." SHORT) (COMMENT type_specifier "=>" "." CHAR) (COMMENT type_specifier "=>" "." VOID) (COMMENT storage_class_specifier "=>" "." REGISTER) (COMMENT storage_class_specifier "=>" "." AUTO) (COMMENT storage_class_specifier "=>" "." STATIC) (COMMENT storage_class_specifier "=>" "." EXTERN) (COMMENT storage_class_specifier "=>" "." TYPEDEF) (COMMENT declaration_specifiers "=>" "." type_qualifier declaration_specifiers) (COMMENT declaration_specifiers "=>" "." type_qualifier) (COMMENT declaration_specifiers "=>" "." type_specifier declaration_specifiers) (COMMENT declaration_specifiers "=>" "." type_specifier) (COMMENT declaration_specifiers "=>" storage_class_specifier "." declaration_specifiers) (COMMENT declaration_specifiers "=>" "." storage_class_specifier declaration_specifiers) (COMMENT declaration_specifiers "=>" storage_class_specifier ".") (COMMENT declaration_specifiers "=>" "." storage_class_specifier) (REDUCE (IDENTIFIER) r78) (SHIFT (TYPE_NAME) s41) (SHIFT (TYPEDEF) s96) (SHIFT (EXTERN) s97) (SHIFT (STATIC) s98) (SHIFT (AUTO) s99) (SHIFT (REGISTER) s100) (SHIFT (CHAR) s42) (SHIFT (SHORT) s43) (SHIFT (INT) s44) (SHIFT (LONG) s45) (SHIFT (SIGNED) s46) (SHIFT (UNSIGNED) s47) (SHIFT (FLOAT) s48) (SHIFT (DOUBLE) s49) (SHIFT (CONST) s50) (SHIFT (VOLATILE) s51) (SHIFT (VOID) s52) (SHIFT (STRUCT) s53) (SHIFT (UNION) s54) (SHIFT (ENUM) s55) (REDUCE (LPAREN) r78) (REDUCE (RPAREN) r78) (REDUCE (LBRACK) r78) (REDUCE (COMMA) r78) (REDUCE (STAR) r78) (GOTO declaration_specifiers s109) (GOTO storage_class_specifier s89) (GOTO type_specifier s90) (GOTO struct_or_union_specifier s35) (GOTO struct_or_union s36) (GOTO enum_specifier s38) (GOTO type_qualifier s91))
 (STATE s90 (COMMENT type_qualifier "=>" "." VOLATILE) (COMMENT type_qualifier "=>" "." CONST) (COMMENT enum_specifier "=>" "." ENUM IDENTIFIER) (COMMENT enum_specifier "=>" "." ENUM IDENTIFIER LCURLY enumerator_list RCURLY) (COMMENT enum_specifier "=>" "." ENUM LCURLY enumerator_list RCURLY) (COMMENT struct_or_union "=>" "." UNION) (COMMENT struct_or_union "=>" "." STRUCT) (COMMENT struct_or_union_specifier "=>" "." struct_or_union IDENTIFIER) (COMMENT struct_or_union_specifier "=>" "." struct_or_union LCURLY struct_declaration_list RCURLY) (COMMENT struct_or_union_specifier "=>" "." struct_or_union IDENTIFIER LCURLY struct_declaration_list RCURLY) (COMMENT type_specifier "=>" "." TYPE_NAME) (COMMENT type_specifier "=>" "." enum_specifier) (COMMENT type_specifier "=>" "." struct_or_union_specifier) (COMMENT type_specifier "=>" "." UNSIGNED) (COMMENT type_specifier "=>" "." SIGNED) (COMMENT type_specifier "=>" "." DOUBLE) (COMMENT type_specifier "=>" "." FLOAT) (COMMENT type_specifier "=>" "." LONG) (COMMENT type_specifier "=>" "." INT) (COMMENT type_specifier "=>" "." SHORT) (COMMENT type_specifier "=>" "." CHAR) (COMMENT type_specifier "=>" "." VOID) (COMMENT storage_class_specifier "=>" "." REGISTER) (COMMENT storage_class_specifier "=>" "." AUTO) (COMMENT storage_class_specifier "=>" "." STATIC) (COMMENT storage_class_specifier "=>" "." EXTERN) (COMMENT storage_class_specifier "=>" "." TYPEDEF) (COMMENT declaration_specifiers "=>" "." type_qualifier declaration_specifiers) (COMMENT declaration_specifiers "=>" "." type_qualifier) (COMMENT declaration_specifiers "=>" type_specifier "." declaration_specifiers) (COMMENT declaration_specifiers "=>" "." type_specifier declaration_specifiers) (COMMENT declaration_specifiers "=>" type_specifier ".") (COMMENT declaration_specifiers "=>" "." type_specifier) (COMMENT declaration_specifiers "=>" "." storage_class_specifier declaration_specifiers) (COMMENT declaration_specifiers "=>" "." storage_class_specifier) (REDUCE (IDENTIFIER) r80) (SHIFT (TYPE_NAME) s41) (SHIFT (TYPEDEF) s96) (SHIFT (EXTERN) s97) (SHIFT (STATIC) s98) (SHIFT (AUTO) s99) (SHIFT (REGISTER) s100) (SHIFT (CHAR) s42) (SHIFT (SHORT) s43) (SHIFT (INT) s44) (SHIFT (LONG) s45) (SHIFT (SIGNED) s46) (SHIFT (UNSIGNED) s47) (SHIFT (FLOAT) s48) (SHIFT (DOUBLE) s49) (SHIFT (CONST) s50) (SHIFT (VOLATILE) s51) (SHIFT (VOID) s52) (SHIFT (STRUCT) s53) (SHIFT (UNION) s54) (SHIFT (ENUM) s55) (REDUCE (LPAREN) r80) (REDUCE (RPAREN) r80) (REDUCE (LBRACK) r80) (REDUCE (COMMA) r80) (REDUCE (STAR) r80) (GOTO declaration_specifiers s108) (GOTO storage_class_specifier s89) (GOTO type_specifier s90) (GOTO struct_or_union_specifier s35) (GOTO struct_or_union s36) (GOTO enum_specifier s38) (GOTO type_qualifier s91))
 (STATE s91 (COMMENT type_qualifier "=>" "." VOLATILE) (COMMENT type_qualifier "=>" "." CONST) (COMMENT enum_specifier "=>" "." ENUM IDENTIFIER) (COMMENT enum_specifier "=>" "." ENUM IDENTIFIER LCURLY enumerator_list RCURLY) (COMMENT enum_specifier "=>" "." ENUM LCURLY enumerator_list RCURLY) (COMMENT struct_or_union "=>" "." UNION) (COMMENT struct_or_union "=>" "." STRUCT) (COMMENT struct_or_union_specifier "=>" "." struct_or_union IDENTIFIER) (COMMENT struct_or_union_specifier "=>" "." struct_or_union LCURLY struct_declaration_list RCURLY) (COMMENT struct_or_union_specifier "=>" "." struct_or_union IDENTIFIER LCURLY struct_declaration_list RCURLY) (COMMENT type_specifier "=>" "." TYPE_NAME) (COMMENT type_specifier "=>" "." enum_specifier) (COMMENT type_specifier "=>" "." struct_or_union_specifier) (COMMENT type_specifier "=>" "." UNSIGNED) (COMMENT type_specifier "=>" "." SIGNED) (COMMENT type_specifier "=>" "." DOUBLE) (COMMENT type_specifier "=>" "." FLOAT) (COMMENT type_specifier "=>" "." LONG) (COMMENT type_specifier "=>" "." INT) (COMMENT type_specifier "=>" "." SHORT) (COMMENT type_specifier "=>" "." CHAR) (COMMENT type_specifier "=>" "." VOID) (COMMENT storage_class_specifier "=>" "." REGISTER) (COMMENT storage_class_specifier "=>" "." AUTO) (COMMENT storage_class_specifier "=>" "." STATIC) (COMMENT storage_class_specifier "=>" "." EXTERN) (COMMENT storage_class_specifier "=>" "." TYPEDEF) (COMMENT declaration_specifiers "=>" type_qualifier "." declaration_specifiers) (COMMENT declaration_specifiers "=>" "." type_qualifier declaration_specifiers) (COMMENT declaration_specifiers "=>" type_qualifier ".") (COMMENT declaration_specifiers "=>" "." type_qualifier) (COMMENT declaration_specifiers "=>" "." type_specifier declaration_specifiers) (COMMENT declaration_specifiers "=>" "." type_specifier) (COMMENT declaration_specifiers "=>" "." storage_class_specifier declaration_specifiers) (COMMENT declaration_specifiers "=>" "." storage_class_specifier) (REDUCE (IDENTIFIER) r82) (SHIFT (TYPE_NAME) s41) (SHIFT (TYPEDEF) s96) (SHIFT (EXTERN) s97) (SHIFT (STATIC) s98) (SHIFT (AUTO) s99) (SHIFT (REGISTER) s100) (SHIFT (CHAR) s42) (SHIFT (SHORT) s43) (SHIFT (INT) s44) (SHIFT (LONG) s45) (SHIFT (SIGNED) s46) (SHIFT (UNSIGNED) s47) (SHIFT (FLOAT) s48) (SHIFT (DOUBLE) s49) (SHIFT (CONST) s50) (SHIFT (VOLATILE) s51) (SHIFT (VOID) s52) (SHIFT (STRUCT) s53) (SHIFT (UNION) s54) (SHIFT (ENUM) s55) (REDUCE (LPAREN) r82) (REDUCE (RPAREN) r82) (REDUCE (LBRACK) r82) (REDUCE (COMMA) r82) (REDUCE (STAR) r82) (GOTO declaration_specifiers s107) (GOTO storage_class_specifier s89) (GOTO type_specifier s90) (GOTO struct_or_union_specifier s35) (GOTO struct_or_union s36) (GOTO enum_specifier s38) (GOTO type_qualifier s91))
 (STATE s92 (COMMENT direct_abstract_declarator "=>" LPAREN parameter_type_list "." RPAREN) (SHIFT (RPAREN) s106))
 (STATE s93 (COMMENT parameter_list "=>" parameter_list "." COMMA parameter_declaration) (COMMENT parameter_type_list "=>" parameter_list "." COMMA ELLIPSIS) (COMMENT parameter_type_list "=>" parameter_list ".") (REDUCE (RPAREN) r146) (SHIFT (COMMA) s103))
 (STATE s94 (COMMENT parameter_list "=>" parameter_declaration ".") (REDUCE () r148))
 (STATE s95 (COMMENT direct_abstract_declarator "=>" LPAREN abstract_declarator "." RPAREN) (SHIFT (RPAREN) s102))
 (STATE s96 (COMMENT storage_class_specifier "=>" TYPEDEF ".") (REDUCE () r88))
 (STATE s97 (COMMENT storage_class_specifier "=>" EXTERN ".") (REDUCE () r89))
 (STATE s98 (COMMENT storage_class_specifier "=>" STATIC ".") (REDUCE () r90))
 (STATE s99 (COMMENT storage_class_specifier "=>" AUTO ".") (REDUCE () r91))
 (STATE s100 (COMMENT storage_class_specifier "=>" REGISTER ".") (REDUCE () r92))
 (STATE s101 (COMMENT direct_abstract_declarator "=>" LPAREN RPAREN ".") (REDUCE () r165))
 (STATE s102 (COMMENT direct_abstract_declarator "=>" LPAREN abstract_declarator RPAREN ".") (REDUCE () r160))
 (STATE s103 (COMMENT parameter_declaration "=>" "." declaration_specifiers) (COMMENT parameter_declaration "=>" "." declaration_specifiers abstract_declarator) (COMMENT parameter_declaration "=>" "." declaration_specifiers declarator) (COMMENT parameter_list "=>" parameter_list COMMA "." parameter_declaration) (COMMENT parameter_type_list "=>" parameter_list COMMA "." ELLIPSIS) (COMMENT type_qualifier "=>" "." VOLATILE) (COMMENT type_qualifier "=>" "." CONST) (COMMENT enum_specifier "=>" "." ENUM IDENTIFIER) (COMMENT enum_specifier "=>" "." ENUM IDENTIFIER LCURLY enumerator_list RCURLY) (COMMENT enum_specifier "=>" "." ENUM LCURLY enumerator_list RCURLY) (COMMENT struct_or_union "=>" "." UNION) (COMMENT struct_or_union "=>" "." STRUCT) (COMMENT struct_or_union_specifier "=>" "." struct_or_union IDENTIFIER) (COMMENT struct_or_union_specifier "=>" "." struct_or_union LCURLY struct_declaration_list RCURLY) (COMMENT struct_or_union_specifier "=>" "." struct_or_union IDENTIFIER LCURLY struct_declaration_list RCURLY) (COMMENT type_specifier "=>" "." TYPE_NAME) (COMMENT type_specifier "=>" "." enum_specifier) (COMMENT type_specifier "=>" "." struct_or_union_specifier) (COMMENT type_specifier "=>" "." UNSIGNED) (COMMENT type_specifier "=>" "." SIGNED) (COMMENT type_specifier "=>" "." DOUBLE) (COMMENT type_specifier "=>" "." FLOAT) (COMMENT type_specifier "=>" "." LONG) (COMMENT type_specifier "=>" "." INT) (COMMENT type_specifier "=>" "." SHORT) (COMMENT type_specifier "=>" "." CHAR) (COMMENT type_specifier "=>" "." VOID) (COMMENT storage_class_specifier "=>" "." REGISTER) (COMMENT storage_class_specifier "=>" "." AUTO) (COMMENT storage_class_specifier "=>" "." STATIC) (COMMENT storage_class_specifier "=>" "." EXTERN) (COMMENT storage_class_specifier "=>" "." TYPEDEF) (COMMENT declaration_specifiers "=>" "." type_qualifier declaration_specifiers) (COMMENT declaration_specifiers "=>" "." type_qualifier) (COMMENT declaration_specifiers "=>" "." type_specifier declaration_specifiers) (COMMENT declaration_specifiers "=>" "." type_specifier) (COMMENT declaration_specifiers "=>" "." storage_class_specifier declaration_specifiers) (COMMENT declaration_specifiers "=>" "." storage_class_specifier) (SHIFT (TYPE_NAME) s41) (SHIFT (TYPEDEF) s96) (SHIFT (EXTERN) s97) (SHIFT (STATIC) s98) (SHIFT (AUTO) s99) (SHIFT (REGISTER) s100) (SHIFT (CHAR) s42) (SHIFT (SHORT) s43) (SHIFT (INT) s44) (SHIFT (LONG) s45) (SHIFT (SIGNED) s46) (SHIFT (UNSIGNED) s47) (SHIFT (FLOAT) s48) (SHIFT (DOUBLE) s49) (SHIFT (CONST) s50) (SHIFT (VOLATILE) s51) (SHIFT (VOID) s52) (SHIFT (STRUCT) s53) (SHIFT (UNION) s54) (SHIFT (ENUM) s55) (SHIFT (ELLIPSIS) s105) (GOTO declaration_specifiers s88) (GOTO storage_class_specifier s89) (GOTO type_specifier s90) (GOTO struct_or_union_specifier s35) (GOTO struct_or_union s36) (GOTO enum_specifier s38) (GOTO type_qualifier s91) (GOTO parameter_declaration s104))
 (STATE s104 (COMMENT parameter_list "=>" parameter_list COMMA parameter_declaration ".") (REDUCE () r149))
 (STATE s105 (COMMENT parameter_type_list "=>" parameter_list COMMA ELLIPSIS ".") (REDUCE () r147))
 (STATE s106 (COMMENT direct_abstract_declarator "=>" LPAREN parameter_type_list RPAREN ".") (REDUCE () r166))
 (STATE s107 (COMMENT declaration_specifiers "=>" type_qualifier declaration_specifiers ".") (REDUCE () r83))
 (STATE s108 (COMMENT declaration_specifiers "=>" type_specifier declaration_specifiers ".") (REDUCE () r81))
 (STATE s109 (COMMENT declaration_specifiers "=>" storage_class_specifier declaration_specifiers ".") (REDUCE () r79))
 (STATE s110 (COMMENT parameter_declaration "=>" declaration_specifiers declarator ".") (REDUCE () r150))
 (STATE s111 (COMMENT direct_declarator "=>" direct_declarator "." LPAREN RPAREN) (COMMENT direct_declarator "=>" direct_declarator "." LPAREN identifier_list RPAREN) (COMMENT direct_declarator "=>" direct_declarator "." LPAREN parameter_type_list RPAREN) (COMMENT direct_declarator "=>" direct_declarator "." LBRACK RBRACK) (COMMENT direct_declarator "=>" direct_declarator "." LBRACK constant_expression RBRACK) (COMMENT declarator "=>" direct_declarator ".") (SHIFT (LPAREN) s128) (REDUCE (RPAREN) r132) (SHIFT (LBRACK) s129) (REDUCE (COMMA) r132) (REDUCE (COLON) r132) (REDUCE (SEMICOLON) r132))
 (STATE s112 (COMMENT direct_abstract_declarator "=>" "." direct_abstract_declarator LPAREN parameter_type_list RPAREN) (COMMENT direct_abstract_declarator "=>" "." direct_abstract_declarator LPAREN RPAREN) (COMMENT direct_abstract_declarator "=>" "." LPAREN parameter_type_list RPAREN) (COMMENT direct_abstract_declarator "=>" "." LPAREN RPAREN) (COMMENT direct_abstract_declarator "=>" "." direct_abstract_declarator LBRACK constant_expression RBRACK) (COMMENT direct_abstract_declarator "=>" "." direct_abstract_declarator LBRACK RBRACK) (COMMENT direct_abstract_declarator "=>" "." LBRACK constant_expression RBRACK) (COMMENT direct_abstract_declarator "=>" "." LBRACK RBRACK) (COMMENT direct_abstract_declarator "=>" "." LPAREN abstract_declarator RPAREN) (COMMENT abstract_declarator "=>" pointer "." direct_abstract_declarator) (COMMENT abstract_declarator "=>" pointer ".") (COMMENT direct_declarator "=>" "." direct_declarator LPAREN RPAREN) (COMMENT direct_declarator "=>" "." direct_declarator LPAREN identifier_list RPAREN) (COMMENT direct_declarator "=>" "." direct_declarator LPAREN parameter_type_list RPAREN) (COMMENT direct_declarator "=>" "." direct_declarator LBRACK RBRACK) (COMMENT direct_declarator "=>" "." direct_declarator LBRACK constant_expression RBRACK) (COMMENT direct_declarator "=>" "." LPAREN declarator RPAREN) (COMMENT direct_declarator "=>" "." IDENTIFIER) (COMMENT declarator "=>" pointer "." direct_declarator) (SHIFT (IDENTIFIER) s114) (SHIFT (LPAREN) s115) (REDUCE (RPAREN) r157) (SHIFT (LBRACK) s78) (REDUCE (COMMA) r157) (GOTO direct_declarator s118) (GOTO direct_abstract_declarator s119))
 (STATE s113 (COMMENT parameter_declaration "=>" declaration_specifiers abstract_declarator ".") (REDUCE () r151))
 (STATE s114 (COMMENT direct_declarator "=>" IDENTIFIER ".") (REDUCE () r133))
 (STATE s115 (COMMENT direct_abstract_declarator "=>" "." direct_abstract_declarator LPAREN parameter_type_list RPAREN) (COMMENT direct_abstract_declarator "=>" "." direct_abstract_declarator LPAREN RPAREN) (COMMENT direct_abstract_declarator "=>" LPAREN "." parameter_type_list RPAREN) (COMMENT direct_abstract_declarator "=>" "." LPAREN parameter_type_list RPAREN) (COMMENT direct_abstract_declarator "=>" LPAREN "." RPAREN) (COMMENT direct_abstract_declarator "=>" "." LPAREN RPAREN) (COMMENT direct_abstract_declarator "=>" "." direct_abstract_declarator LBRACK constant_expression RBRACK) (COMMENT direct_abstract_declarator "=>" "." direct_abstract_declarator LBRACK RBRACK) (COMMENT direct_abstract_declarator "=>" "." LBRACK constant_expression RBRACK) (COMMENT direct_abstract_declarator "=>" "." LBRACK RBRACK) (COMMENT direct_abstract_declarator "=>" LPAREN "." abstract_declarator RPAREN) (COMMENT direct_abstract_declarator "=>" "." LPAREN abstract_declarator RPAREN) (COMMENT abstract_declarator "=>" "." pointer direct_abstract_declarator) (COMMENT abstract_declarator "=>" "." direct_abstract_declarator) (COMMENT abstract_declarator "=>" "." pointer) (COMMENT parameter_declaration "=>" "." declaration_specifiers) (COMMENT parameter_declaration "=>" "." declaration_specifiers abstract_declarator) (COMMENT parameter_declaration "=>" "." declaration_specifiers declarator) (COMMENT parameter_list "=>" "." parameter_list COMMA parameter_declaration) (COMMENT parameter_list "=>" "." parameter_declaration) (COMMENT parameter_type_list "=>" "." parameter_list COMMA ELLIPSIS) (COMMENT parameter_type_list "=>" "." parameter_list) (COMMENT pointer "=>" "." STAR type_qualifier_list pointer) (COMMENT pointer "=>" "." STAR pointer) (COMMENT pointer "=>" "." STAR type_qualifier_list) (COMMENT pointer "=>" "." STAR) (COMMENT direct_declarator "=>" "." direct_declarator LPAREN RPAREN) (COMMENT direct_declarator "=>" "." direct_declarator LPAREN identifier_list RPAREN) (COMMENT direct_declarator "=>" "." direct_declarator LPAREN parameter_type_list RPAREN) (COMMENT direct_declarator "=>" "." direct_declarator LBRACK RBRACK) (COMMENT direct_declarator "=>" "." direct_declarator LBRACK constant_expression RBRACK) (COMMENT direct_declarator "=>" LPAREN "." declarator RPAREN) (COMMENT direct_declarator "=>" "." LPAREN declarator RPAREN) (COMMENT direct_declarator "=>" "." IDENTIFIER) (COMMENT declarator "=>" "." direct_declarator) (COMMENT declarator "=>" "." pointer direct_declarator) (COMMENT type_qualifier "=>" "." VOLATILE) (COMMENT type_qualifier "=>" "." CONST) (COMMENT enum_specifier "=>" "." ENUM IDENTIFIER) (COMMENT enum_specifier "=>" "." ENUM IDENTIFIER LCURLY enumerator_list RCURLY) (COMMENT enum_specifier "=>" "." ENUM LCURLY enumerator_list RCURLY) (COMMENT struct_or_union "=>" "." UNION) (COMMENT struct_or_union "=>" "." STRUCT) (COMMENT struct_or_union_specifier "=>" "." struct_or_union IDENTIFIER) (COMMENT struct_or_union_specifier "=>" "." struct_or_union LCURLY struct_declaration_list RCURLY) (COMMENT struct_or_union_specifier "=>" "." struct_or_union IDENTIFIER LCURLY struct_declaration_list RCURLY) (COMMENT type_specifier "=>" "." TYPE_NAME) (COMMENT type_specifier "=>" "." enum_specifier) (COMMENT type_specifier "=>" "." struct_or_union_specifier) (COMMENT type_specifier "=>" "." UNSIGNED) (COMMENT type_specifier "=>" "." SIGNED) (COMMENT type_specifier "=>" "." DOUBLE) (COMMENT type_specifier "=>" "." FLOAT) (COMMENT type_specifier "=>" "." LONG) (COMMENT type_specifier "=>" "." INT) (COMMENT type_specifier "=>" "." SHORT) (COMMENT type_specifier "=>" "." CHAR) (COMMENT type_specifier "=>" "." VOID) (COMMENT storage_class_specifier "=>" "." REGISTER) (COMMENT storage_class_specifier "=>" "." AUTO) (COMMENT storage_class_specifier "=>" "." STATIC) (COMMENT storage_class_specifier "=>" "." EXTERN) (COMMENT storage_class_specifier "=>" "." TYPEDEF) (COMMENT declaration_specifiers "=>" "." type_qualifier declaration_specifiers) (COMMENT declaration_specifiers "=>" "." type_qualifier) (COMMENT declaration_specifiers "=>" "." type_specifier declaration_specifiers) (COMMENT declaration_specifiers "=>" "." type_specifier) (COMMENT declaration_specifiers "=>" "." storage_class_specifier declaration_specifiers) (COMMENT declaration_specifiers "=>" "." storage_class_specifier) (SHIFT (IDENTIFIER) s114) (SHIFT (TYPE_NAME) s41) (SHIFT (TYPEDEF) s96) (SHIFT (EXTERN) s97) (SHIFT (STATIC) s98) (SHIFT (AUTO) s99) (SHIFT (REGISTER) s100) (SHIFT (CHAR) s42) (SHIFT (SHORT) s43) (SHIFT (INT) s44) (SHIFT (LONG) s45) (SHIFT (SIGNED) s46) (SHIFT (UNSIGNED) s47) (SHIFT (FLOAT) s48) (SHIFT (DOUBLE) s49) (SHIFT (CONST) s50) (SHIFT (VOLATILE) s51) (SHIFT (VOID) s52) (SHIFT (STRUCT) s53) (SHIFT (UNION) s54) (SHIFT (ENUM) s55) (SHIFT (LPAREN) s115) (SHIFT (RPAREN) s101) (SHIFT (LBRACK) s78) (SHIFT (STAR) s79) (GOTO declaration_specifiers s88) (GOTO storage_class_specifier s89) (GOTO type_specifier s90) (GOTO struct_or_union_specifier s35) (GOTO struct_or_union s36) (GOTO enum_specifier s38) (GOTO type_qualifier s91) (GOTO declarator s116) (GOTO direct_declarator s111) (GOTO pointer s112) (GOTO parameter_type_list s92) (GOTO parameter_list s93) (GOTO parameter_declaration s94) (GOTO abstract_declarator s95) (GOTO direct_abstract_declarator s76))
 (STATE s116 (COMMENT direct_declarator "=>" LPAREN declarator "." RPAREN) (SHIFT (RPAREN) s117))
 (STATE s117 (COMMENT direct_declarator "=>" LPAREN declarator RPAREN ".") (REDUCE () r134))
 (STATE s118 (COMMENT direct_declarator "=>" direct_declarator "." LPAREN RPAREN) (COMMENT direct_declarator "=>" direct_declarator "." LPAREN identifier_list RPAREN) (COMMENT direct_declarator "=>" direct_declarator "." LPAREN parameter_type_list RPAREN) (COMMENT direct_declarator "=>" direct_declarator "." LBRACK RBRACK) (COMMENT direct_declarator "=>" direct_declarator "." LBRACK constant_expression RBRACK) (COMMENT declarator "=>" pointer direct_declarator ".") (SHIFT (LPAREN) s128) (REDUCE (RPAREN) r131) (SHIFT (LBRACK) s129) (REDUCE (COMMA) r131) (REDUCE (COLON) r131) (REDUCE (SEMICOLON) r131))
 (STATE s119 (COMMENT direct_abstract_declarator "=>" direct_abstract_declarator "." LPAREN parameter_type_list RPAREN) (COMMENT direct_abstract_declarator "=>" direct_abstract_declarator "." LPAREN RPAREN) (COMMENT direct_abstract_declarator "=>" direct_abstract_declarator "." LBRACK constant_expression RBRACK) (COMMENT direct_abstract_declarator "=>" direct_abstract_declarator "." LBRACK RBRACK) (COMMENT abstract_declarator "=>" pointer direct_abstract_declarator ".") (SHIFT (LPAREN) s120) (REDUCE (RPAREN) r159) (SHIFT (LBRACK) s121) (REDUCE (COMMA) r159))
 (STATE s120 (COMMENT direct_abstract_declarator "=>" direct_abstract_declarator LPAREN "." parameter_type_list RPAREN) (COMMENT direct_abstract_declarator "=>" direct_abstract_declarator LPAREN "." RPAREN) (COMMENT parameter_declaration "=>" "." declaration_specifiers) (COMMENT parameter_declaration "=>" "." declaration_specifiers abstract_declarator) (COMMENT parameter_declaration "=>" "." declaration_specifiers declarator) (COMMENT parameter_list "=>" "." parameter_list COMMA parameter_declaration) (COMMENT parameter_list "=>" "." parameter_declaration) (COMMENT parameter_type_list "=>" "." parameter_list COMMA ELLIPSIS) (COMMENT parameter_type_list "=>" "." parameter_list) (COMMENT type_qualifier "=>" "." VOLATILE) (COMMENT type_qualifier "=>" "." CONST) (COMMENT enum_specifier "=>" "." ENUM IDENTIFIER) (COMMENT enum_specifier "=>" "." ENUM IDENTIFIER LCURLY enumerator_list RCURLY) (COMMENT enum_specifier "=>" "." ENUM LCURLY enumerator_list RCURLY) (COMMENT struct_or_union "=>" "." UNION) (COMMENT struct_or_union "=>" "." STRUCT) (COMMENT struct_or_union_specifier "=>" "." struct_or_union IDENTIFIER) (COMMENT struct_or_union_specifier "=>" "." struct_or_union LCURLY struct_declaration_list RCURLY) (COMMENT struct_or_union_specifier "=>" "." struct_or_union IDENTIFIER LCURLY struct_declaration_list RCURLY) (COMMENT type_specifier "=>" "." TYPE_NAME) (COMMENT type_specifier "=>" "." enum_specifier) (COMMENT type_specifier "=>" "." struct_or_union_specifier) (COMMENT type_specifier "=>" "." UNSIGNED) (COMMENT type_specifier "=>" "." SIGNED) (COMMENT type_specifier "=>" "." DOUBLE) (COMMENT type_specifier "=>" "." FLOAT) (COMMENT type_specifier "=>" "." LONG) (COMMENT type_specifier "=>" "." INT) (COMMENT type_specifier "=>" "." SHORT) (COMMENT type_specifier "=>" "." CHAR) (COMMENT type_specifier "=>" "." VOID) (COMMENT storage_class_specifier "=>" "." REGISTER) (COMMENT storage_class_specifier "=>" "." AUTO) (COMMENT storage_class_specifier "=>" "." STATIC) (COMMENT storage_class_specifier "=>" "." EXTERN) (COMMENT storage_class_specifier "=>" "." TYPEDEF) (COMMENT declaration_specifiers "=>" "." type_qualifier declaration_specifiers) (COMMENT declaration_specifiers "=>" "." type_qualifier) (COMMENT declaration_specifiers "=>" "." type_specifier declaration_specifiers) (COMMENT declaration_specifiers "=>" "." type_specifier) (COMMENT declaration_specifiers "=>" "." storage_class_specifier declaration_specifiers) (COMMENT declaration_specifiers "=>" "." storage_class_specifier) (SHIFT (TYPE_NAME) s41) (SHIFT (TYPEDEF) s96) (SHIFT (EXTERN) s97) (SHIFT (STATIC) s98) (SHIFT (AUTO) s99) (SHIFT (REGISTER) s100) (SHIFT (CHAR) s42) (SHIFT (SHORT) s43) (SHIFT (INT) s44) (SHIFT (LONG) s45) (SHIFT (SIGNED) s46) (SHIFT (UNSIGNED) s47) (SHIFT (FLOAT) s48) (SHIFT (DOUBLE) s49) (SHIFT (CONST) s50) (SHIFT (VOLATILE) s51) (SHIFT (VOID) s52) (SHIFT (STRUCT) s53) (SHIFT (UNION) s54) (SHIFT (ENUM) s55) (SHIFT (RPAREN) s126) (GOTO declaration_specifiers s88) (GOTO storage_class_specifier s89) (GOTO type_specifier s90) (GOTO struct_or_union_specifier s35) (GOTO struct_or_union s36) (GOTO enum_specifier s38) (GOTO type_qualifier s91) (GOTO parameter_type_list s125) (GOTO parameter_list s93) (GOTO parameter_declaration s94))
 (STATE s121 (COMMENT direct_abstract_declarator "=>" direct_abstract_declarator LBRACK "." constant_expression RBRACK) (COMMENT direct_abstract_declarator "=>" direct_abstract_declarator LBRACK "." RBRACK) (COMMENT constant_expression "=>" "." conditional_expression) (COMMENT conditional_expression "=>" "." logical_or_expression QMARK expression COLON conditional_expression) (COMMENT conditional_expression "=>" "." logical_or_expression) (COMMENT logical_or_expression "=>" "." logical_or_expression OR_OP logical_and_expression) (COMMENT logical_or_expression "=>" "." logical_and_expression) (COMMENT logical_and_expression "=>" "." logical_and_expression AND_OP inclusive_or_expression) (COMMENT logical_and_expression "=>" "." inclusive_or_expression) (COMMENT inclusive_or_expression "=>" "." inclusive_or_expression PIPE exclusive_or_expression) (COMMENT inclusive_or_expression "=>" "." exclusive_or_expression) (COMMENT exclusive_or_expression "=>" "." exclusive_or_expression CARROT and_expression) (COMMENT exclusive_or_expression "=>" "." and_expression) (COMMENT and_expression "=>" "." and_expression AMPERSAND equality_expression) (COMMENT and_expression "=>" "." equality_expression) (COMMENT equality_expression "=>" "." equality_expression NE_OP relational_expression) (COMMENT equality_expression "=>" "." equality_expression EQ_OP relational_expression) (COMMENT equality_expression "=>" "." relational_expression) (COMMENT relational_expression "=>" "." relational_expression GE_OP shift_expression) (COMMENT relational_expression "=>" "." relational_expression LE_OP shift_expression) (COMMENT relational_expression "=>" "." relational_expression GREATER_OP shift_expression) (COMMENT relational_expression "=>" "." relational_expression LESS_OP shift_expression) (COMMENT relational_expression "=>" "." shift_expression) (COMMENT shift_expression "=>" "." shift_expression RIGHT_OP additive_expression) (COMMENT shift_expression "=>" "." shift_expression LEFT_OP additive_expression) (COMMENT shift_expression "=>" "." additive_expression) (COMMENT additive_expression "=>" "." additive_expression MINUS multiplicative_expression) (COMMENT additive_expression "=>" "." additive_expression PLUS multiplicative_expression) (COMMENT additive_expression "=>" "." multiplicative_expression) (COMMENT multiplicative_expression "=>" "." multiplicative_expression AMPERSAND cast_expression) (COMMENT multiplicative_expression "=>" "." multiplicative_expression FORWARD_SLASH cast_expression) (COMMENT multiplicative_expression "=>" "." multiplicative_expression STAR cast_expression) (COMMENT multiplicative_expression "=>" "." cast_expression) (COMMENT cast_expression "=>" "." LPAREN type_name RPAREN cast_expression) (COMMENT cast_expression "=>" "." unary_expression) (COMMENT unary_operator "=>" "." BANG) (COMMENT unary_operator "=>" "." TWIDLE) (COMMENT unary_operator "=>" "." MINUS) (COMMENT unary_operator "=>" "." PLUS) (COMMENT unary_operator "=>" "." STAR) (COMMENT unary_operator "=>" "." AMPERSAND) (COMMENT unary_expression "=>" "." SIZEOF LPAREN type_name RPAREN) (COMMENT unary_expression "=>" "." SIZEOF unary_expression) (COMMENT unary_expression "=>" "." unary_operator cast_expression) (COMMENT unary_expression "=>" "." DEC_OP unary_expression) (COMMENT unary_expression "=>" "." INC_OP unary_expression) (COMMENT unary_expression "=>" "." postfix_expression) (COMMENT postfix_expression "=>" "." postfix_expression DEC_OP) (COMMENT postfix_expression "=>" "." postfix_expression INC_OP) (COMMENT postfix_expression "=>" "." postfix_expression PTR_OP IDENTIFIER) (COMMENT postfix_expression "=>" "." postfix_expression DOT IDENTIFIER) (COMMENT postfix_expression "=>" "." postfix_expression LPAREN argument_expression_list RPAREN) (COMMENT postfix_expression "=>" "." postfix_expression LPAREN RPAREN) (COMMENT postfix_expression "=>" "." postfix_expression LBRACK expression RBRACK) (COMMENT postfix_expression "=>" "." primary_expression) (COMMENT primary_expression "=>" "." LPAREN expression RPAREN) (COMMENT primary_expression "=>" "." STRING_LITERAL) (COMMENT primary_expression "=>" "." CONSTANT) (COMMENT primary_expression "=>" "." IDENTIFIER) (SHIFT (IDENTIFIER) s2) (SHIFT (CONSTANT) s3) (SHIFT (STRING_LITERAL) s4) (SHIFT (SIZEOF) s24) (SHIFT (INC_OP) s25) (SHIFT (DEC_OP) s26) (SHIFT (LPAREN) s27) (SHIFT (RBRACK) s123) (SHIFT (AMPERSAND) s28) (SHIFT (STAR) s29) (SHIFT (PLUS) s30) (SHIFT (MINUS) s31) (SHIFT (TWIDLE) s32) (SHIFT (BANG) s33) (GOTO primary_expression s6) (GOTO postfix_expression s7) (GOTO unary_expression s62) (GOTO unary_operator s9) (GOTO cast_expression s10) (GOTO multiplicative_expression s11) (GOTO additive_expression s12) (GOTO shift_expression s13) (GOTO relational_expression s14) (GOTO equality_expression s15) (GOTO and_expression s16) (GOTO exclusive_or_expression s17) (GOTO inclusive_or_expression s18) (GOTO logical_and_expression s19) (GOTO logical_or_expression s20) (GOTO conditional_expression s63) (GOTO constant_expression s122))
 (STATE s122 (COMMENT direct_abstract_declarator "=>" direct_abstract_declarator LBRACK constant_expression "." RBRACK) (SHIFT (RBRACK) s124))
 (STATE s123 (COMMENT direct_abstract_declarator "=>" direct_abstract_declarator LBRACK RBRACK ".") (REDUCE () r163))
 (STATE s124 (COMMENT direct_abstract_declarator "=>" direct_abstract_declarator LBRACK constant_expression RBRACK ".") (REDUCE () r164))
 (STATE s125 (COMMENT direct_abstract_declarator "=>" direct_abstract_declarator LPAREN parameter_type_list "." RPAREN) (SHIFT (RPAREN) s127))
 (STATE s126 (COMMENT direct_abstract_declarator "=>" direct_abstract_declarator LPAREN RPAREN ".") (REDUCE () r167))
 (STATE s127 (COMMENT direct_abstract_declarator "=>" direct_abstract_declarator LPAREN parameter_type_list RPAREN ".") (REDUCE () r168))
 (STATE s128 (COMMENT identifier_list "=>" "." identifier_list COMMA IDENTIFIER) (COMMENT identifier_list "=>" "." IDENTIFIER) (COMMENT parameter_declaration "=>" "." declaration_specifiers) (COMMENT parameter_declaration "=>" "." declaration_specifiers abstract_declarator) (COMMENT parameter_declaration "=>" "." declaration_specifiers declarator) (COMMENT parameter_list "=>" "." parameter_list COMMA parameter_declaration) (COMMENT parameter_list "=>" "." parameter_declaration) (COMMENT parameter_type_list "=>" "." parameter_list COMMA ELLIPSIS) (COMMENT parameter_type_list "=>" "." parameter_list) (COMMENT direct_declarator "=>" direct_declarator LPAREN "." RPAREN) (COMMENT direct_declarator "=>" direct_declarator LPAREN "." identifier_list RPAREN) (COMMENT direct_declarator "=>" direct_declarator LPAREN "." parameter_type_list RPAREN) (COMMENT type_qualifier "=>" "." VOLATILE) (COMMENT type_qualifier "=>" "." CONST) (COMMENT enum_specifier "=>" "." ENUM IDENTIFIER) (COMMENT enum_specifier "=>" "." ENUM IDENTIFIER LCURLY enumerator_list RCURLY) (COMMENT enum_specifier "=>" "." ENUM LCURLY enumerator_list RCURLY) (COMMENT struct_or_union "=>" "." UNION) (COMMENT struct_or_union "=>" "." STRUCT) (COMMENT struct_or_union_specifier "=>" "." struct_or_union IDENTIFIER) (COMMENT struct_or_union_specifier "=>" "." struct_or_union LCURLY struct_declaration_list RCURLY) (COMMENT struct_or_union_specifier "=>" "." struct_or_union IDENTIFIER LCURLY struct_declaration_list RCURLY) (COMMENT type_specifier "=>" "." TYPE_NAME) (COMMENT type_specifier "=>" "." enum_specifier) (COMMENT type_specifier "=>" "." struct_or_union_specifier) (COMMENT type_specifier "=>" "." UNSIGNED) (COMMENT type_specifier "=>" "." SIGNED) (COMMENT type_specifier "=>" "." DOUBLE) (COMMENT type_specifier "=>" "." FLOAT) (COMMENT type_specifier "=>" "." LONG) (COMMENT type_specifier "=>" "." INT) (COMMENT type_specifier "=>" "." SHORT) (COMMENT type_specifier "=>" "." CHAR) (COMMENT type_specifier "=>" "." VOID) (COMMENT storage_class_specifier "=>" "." REGISTER) (COMMENT storage_class_specifier "=>" "." AUTO) (COMMENT storage_class_specifier "=>" "." STATIC) (COMMENT storage_class_specifier "=>" "." EXTERN) (COMMENT storage_class_specifier "=>" "." TYPEDEF) (COMMENT declaration_specifiers "=>" "." type_qualifier declaration_specifiers) (COMMENT declaration_specifiers "=>" "." type_qualifier) (COMMENT declaration_specifiers "=>" "." type_specifier declaration_specifiers) (COMMENT declaration_specifiers "=>" "." type_specifier) (COMMENT declaration_specifiers "=>" "." storage_class_specifier declaration_specifiers) (COMMENT declaration_specifiers "=>" "." storage_class_specifier) (SHIFT (IDENTIFIER) s135) (SHIFT (TYPE_NAME) s41) (SHIFT (TYPEDEF) s96) (SHIFT (EXTERN) s97) (SHIFT (STATIC) s98) (SHIFT (AUTO) s99) (SHIFT (REGISTER) s100) (SHIFT (CHAR) s42) (SHIFT (SHORT) s43) (SHIFT (INT) s44) (SHIFT (LONG) s45) (SHIFT (SIGNED) s46) (SHIFT (UNSIGNED) s47) (SHIFT (FLOAT) s48) (SHIFT (DOUBLE) s49) (SHIFT (CONST) s50) (SHIFT (VOLATILE) s51) (SHIFT (VOID) s52) (SHIFT (STRUCT) s53) (SHIFT (UNION) s54) (SHIFT (ENUM) s55) (SHIFT (RPAREN) s136) (GOTO declaration_specifiers s88) (GOTO storage_class_specifier s89) (GOTO type_specifier s90) (GOTO struct_or_union_specifier s35) (GOTO struct_or_union s36) (GOTO enum_specifier s38) (GOTO type_qualifier s91) (GOTO parameter_type_list s133) (GOTO parameter_list s93) (GOTO parameter_declaration s94) (GOTO identifier_list s134))
 (STATE s129 (COMMENT direct_declarator "=>" direct_declarator LBRACK "." RBRACK) (COMMENT direct_declarator "=>" direct_declarator LBRACK "." constant_expression RBRACK) (COMMENT constant_expression "=>" "." conditional_expression) (COMMENT conditional_expression "=>" "." logical_or_expression QMARK expression COLON conditional_expression) (COMMENT conditional_expression "=>" "." logical_or_expression) (COMMENT logical_or_expression "=>" "." logical_or_expression OR_OP logical_and_expression) (COMMENT logical_or_expression "=>" "." logical_and_expression) (COMMENT logical_and_expression "=>" "." logical_and_expression AND_OP inclusive_or_expression) (COMMENT logical_and_expression "=>" "." inclusive_or_expression) (COMMENT inclusive_or_expression "=>" "." inclusive_or_expression PIPE exclusive_or_expression) (COMMENT inclusive_or_expression "=>" "." exclusive_or_expression) (COMMENT exclusive_or_expression "=>" "." exclusive_or_expression CARROT and_expression) (COMMENT exclusive_or_expression "=>" "." and_expression) (COMMENT and_expression "=>" "." and_expression AMPERSAND equality_expression) (COMMENT and_expression "=>" "." equality_expression) (COMMENT equality_expression "=>" "." equality_expression NE_OP relational_expression) (COMMENT equality_expression "=>" "." equality_expression EQ_OP relational_expression) (COMMENT equality_expression "=>" "." relational_expression) (COMMENT relational_expression "=>" "." relational_expression GE_OP shift_expression) (COMMENT relational_expression "=>" "." relational_expression LE_OP shift_expression) (COMMENT relational_expression "=>" "." relational_expression GREATER_OP shift_expression) (COMMENT relational_expression "=>" "." relational_expression LESS_OP shift_expression) (COMMENT relational_expression "=>" "." shift_expression) (COMMENT shift_expression "=>" "." shift_expression RIGHT_OP additive_expression) (COMMENT shift_expression "=>" "." shift_expression LEFT_OP additive_expression) (COMMENT shift_expression "=>" "." additive_expression) (COMMENT additive_expression "=>" "." additive_expression MINUS multiplicative_expression) (COMMENT additive_expression "=>" "." additive_expression PLUS multiplicative_expression) (COMMENT additive_expression "=>" "." multiplicative_expression) (COMMENT multiplicative_expression "=>" "." multiplicative_expression AMPERSAND cast_expression) (COMMENT multiplicative_expression "=>" "." multiplicative_expression FORWARD_SLASH cast_expression) (COMMENT multiplicative_expression "=>" "." multiplicative_expression STAR cast_expression) (COMMENT multiplicative_expression "=>" "." cast_expression) (COMMENT cast_expression "=>" "." LPAREN type_name RPAREN cast_expression) (COMMENT cast_expression "=>" "." unary_expression) (COMMENT unary_operator "=>" "." BANG) (COMMENT unary_operator "=>" "." TWIDLE) (COMMENT unary_operator "=>" "." MINUS) (COMMENT unary_operator "=>" "." PLUS) (COMMENT unary_operator "=>" "." STAR) (COMMENT unary_operator "=>" "." AMPERSAND) (COMMENT unary_expression "=>" "." SIZEOF LPAREN type_name RPAREN) (COMMENT unary_expression "=>" "." SIZEOF unary_expression) (COMMENT unary_expression "=>" "." unary_operator cast_expression) (COMMENT unary_expression "=>" "." DEC_OP unary_expression) (COMMENT unary_expression "=>" "." INC_OP unary_expression) (COMMENT unary_expression "=>" "." postfix_expression) (COMMENT postfix_expression "=>" "." postfix_expression DEC_OP) (COMMENT postfix_expression "=>" "." postfix_expression INC_OP) (COMMENT postfix_expression "=>" "." postfix_expression PTR_OP IDENTIFIER) (COMMENT postfix_expression "=>" "." postfix_expression DOT IDENTIFIER) (COMMENT postfix_expression "=>" "." postfix_expression LPAREN argument_expression_list RPAREN) (COMMENT postfix_expression "=>" "." postfix_expression LPAREN RPAREN) (COMMENT postfix_expression "=>" "." postfix_expression LBRACK expression RBRACK) (COMMENT postfix_expression "=>" "." primary_expression) (COMMENT primary_expression "=>" "." LPAREN expression RPAREN) (COMMENT primary_expression "=>" "." STRING_LITERAL) (COMMENT primary_expression "=>" "." CONSTANT) (COMMENT primary_expression "=>" "." IDENTIFIER) (SHIFT (IDENTIFIER) s2) (SHIFT (CONSTANT) s3) (SHIFT (STRING_LITERAL) s4) (SHIFT (SIZEOF) s24) (SHIFT (INC_OP) s25) (SHIFT (DEC_OP) s26) (SHIFT (LPAREN) s27) (SHIFT (RBRACK) s131) (SHIFT (AMPERSAND) s28) (SHIFT (STAR) s29) (SHIFT (PLUS) s30) (SHIFT (MINUS) s31) (SHIFT (TWIDLE) s32) (SHIFT (BANG) s33) (GOTO primary_expression s6) (GOTO postfix_expression s7) (GOTO unary_expression s62) (GOTO unary_operator s9) (GOTO cast_expression s10) (GOTO multiplicative_expression s11) (GOTO additive_expression s12) (GOTO shift_expression s13) (GOTO relational_expression s14) (GOTO equality_expression s15) (GOTO and_expression s16) (GOTO exclusive_or_expression s17) (GOTO inclusive_or_expression s18) (GOTO logical_and_expression s19) (GOTO logical_or_expression s20) (GOTO conditional_expression s63) (GOTO constant_expression s130))
 (STATE s130 (COMMENT direct_declarator "=>" direct_declarator LBRACK constant_expression "." RBRACK) (SHIFT (RBRACK) s132))
 (STATE s131 (COMMENT direct_declarator "=>" direct_declarator LBRACK RBRACK ".") (REDUCE () r136))
 (STATE s132 (COMMENT direct_declarator "=>" direct_declarator LBRACK constant_expression RBRACK ".") (REDUCE () r135))
 (STATE s133 (COMMENT direct_declarator "=>" direct_declarator LPAREN parameter_type_list "." RPAREN) (SHIFT (RPAREN) s140))
 (STATE s134 (COMMENT identifier_list "=>" identifier_list "." COMMA IDENTIFIER) (COMMENT direct_declarator "=>" direct_declarator LPAREN identifier_list "." RPAREN) (SHIFT (RPAREN) s137) (SHIFT (COMMA) s138))
 (STATE s135 (COMMENT identifier_list "=>" IDENTIFIER ".") (REDUCE () r153))
 (STATE s136 (COMMENT direct_declarator "=>" direct_declarator LPAREN RPAREN ".") (REDUCE () r139))
 (STATE s137 (COMMENT direct_declarator "=>" direct_declarator LPAREN identifier_list RPAREN ".") (REDUCE () r138))
 (STATE s138 (COMMENT identifier_list "=>" identifier_list COMMA "." IDENTIFIER) (SHIFT (IDENTIFIER) s139))
 (STATE s139 (COMMENT identifier_list "=>" identifier_list COMMA IDENTIFIER ".") (REDUCE () r154))
 (STATE s140 (COMMENT direct_declarator "=>" direct_declarator LPAREN parameter_type_list RPAREN ".") (REDUCE () r137))
 (STATE s141 (COMMENT struct_or_union_specifier "=>" struct_or_union IDENTIFIER ".") (COMMENT struct_or_union_specifier "=>" struct_or_union IDENTIFIER "." LCURLY struct_declaration_list RCURLY) (REDUCE (IDENTIFIER) r107) (REDUCE (TYPE_NAME) r107) (REDUCE (TYPEDEF) r107) (REDUCE (EXTERN) r107) (REDUCE (STATIC) r107) (REDUCE (AUTO) r107) (REDUCE (REGISTER) r107) (REDUCE (CHAR) r107) (REDUCE (SHORT) r107) (REDUCE (INT) r107) (REDUCE (LONG) r107) (REDUCE (SIGNED) r107) (REDUCE (UNSIGNED) r107) (REDUCE (FLOAT) r107) (REDUCE (DOUBLE) r107) (REDUCE (CONST) r107) (REDUCE (VOLATILE) r107) (REDUCE (VOID) r107) (REDUCE (STRUCT) r107) (REDUCE (UNION) r107) (REDUCE (ENUM) r107) (REDUCE (LPAREN) r107) (REDUCE (RPAREN) r107) (REDUCE (LBRACK) r107) (SHIFT (LCURLY) s160) (REDUCE (COMMA) r107) (REDUCE (STAR) r107) (REDUCE (COLON) r107))
 (STATE s142 (COMMENT type_qualifier "=>" "." VOLATILE) (COMMENT type_qualifier "=>" "." CONST) (COMMENT enum_specifier "=>" "." ENUM IDENTIFIER) (COMMENT enum_specifier "=>" "." ENUM IDENTIFIER LCURLY enumerator_list RCURLY) (COMMENT enum_specifier "=>" "." ENUM LCURLY enumerator_list RCURLY) (COMMENT specifier_qualifier_list "=>" "." type_qualifier) (COMMENT specifier_qualifier_list "=>" "." type_qualifier specifier_qualifier_list) (COMMENT specifier_qualifier_list "=>" "." type_specifier) (COMMENT specifier_qualifier_list "=>" "." type_specifier specifier_qualifier_list) (COMMENT structd_eclaration "=>" "." specifier_qualifier_list struct_declarator_list SEMICOLON) (COMMENT struct_declaration_list "=>" "." struct_declaration_list struct_declaration) (COMMENT struct_declaration_list "=>" "." struct_declaration) (COMMENT struct_or_union "=>" "." UNION) (COMMENT struct_or_union "=>" "." STRUCT) (COMMENT struct_or_union_specifier "=>" "." struct_or_union IDENTIFIER) (COMMENT struct_or_union_specifier "=>" struct_or_union LCURLY "." struct_declaration_list RCURLY) (COMMENT struct_or_union_specifier "=>" "." struct_or_union LCURLY struct_declaration_list RCURLY) (COMMENT struct_or_union_specifier "=>" "." struct_or_union IDENTIFIER LCURLY struct_declaration_list RCURLY) (COMMENT type_specifier "=>" "." TYPE_NAME) (COMMENT type_specifier "=>" "." enum_specifier) (COMMENT type_specifier "=>" "." struct_or_union_specifier) (COMMENT type_specifier "=>" "." UNSIGNED) (COMMENT type_specifier "=>" "." SIGNED) (COMMENT type_specifier "=>" "." DOUBLE) (COMMENT type_specifier "=>" "." FLOAT) (COMMENT type_specifier "=>" "." LONG) (COMMENT type_specifier "=>" "." INT) (COMMENT type_specifier "=>" "." SHORT) (COMMENT type_specifier "=>" "." CHAR) (COMMENT type_specifier "=>" "." VOID) (SHIFT (TYPE_NAME) s41) (SHIFT (CHAR) s42) (SHIFT (SHORT) s43) (SHIFT (INT) s44) (SHIFT (LONG) s45) (SHIFT (SIGNED) s46) (SHIFT (UNSIGNED) s47) (SHIFT (FLOAT) s48) (SHIFT (DOUBLE) s49) (SHIFT (CONST) s50) (SHIFT (VOLATILE) s51) (SHIFT (VOID) s52) (SHIFT (STRUCT) s53) (SHIFT (UNION) s54) (SHIFT (ENUM) s55) (GOTO type_specifier s34) (GOTO struct_or_union_specifier s35) (GOTO struct_or_union s36) (GOTO struct_declaration_list s143) (GOTO struct_declaration s144) (GOTO specifier_qualifier_list s145) (GOTO enum_specifier s38) (GOTO type_qualifier s39))
 (STATE s143 (COMMENT type_qualifier "=>" "." VOLATILE) (COMMENT type_qualifier "=>" "." CONST) (COMMENT enum_specifier "=>" "." ENUM IDENTIFIER) (COMMENT enum_specifier "=>" "." ENUM IDENTIFIER LCURLY enumerator_list RCURLY) (COMMENT enum_specifier "=>" "." ENUM LCURLY enumerator_list RCURLY) (COMMENT specifier_qualifier_list "=>" "." type_qualifier) (COMMENT specifier_qualifier_list "=>" "." type_qualifier specifier_qualifier_list) (COMMENT specifier_qualifier_list "=>" "." type_specifier) (COMMENT specifier_qualifier_list "=>" "." type_specifier specifier_qualifier_list) (COMMENT struct_declaration "=>" "." specifier_qualifier_list struct_declarator_list SEMICOLON) (COMMENT struct_declaration_list "=>" struct_declaration_list "." struct_declaration) (COMMENT struct_or_union "=>" "." UNION) (COMMENT struct_or_union "=>" "." STRUCT) (COMMENT struct_or_union_specifier "=>" "." struct_or_union IDENTIFIER) (COMMENT struct_or_union_specifier "=>" struct_or_union LCURLY struct_declaration_list "." RCURLY) (COMMENT struct_or_union_specifier "=>" "." struct_or_union LCURLY struct_declaration_list RCURLY) (COMMENT struct_or_union_specifier "=>" "." struct_or_union IDENTIFIER LCURLY struct_declaration_list RCURLY) (COMMENT type_specifier "=>" "." TYPE_NAME) (COMMENT type_specifier "=>" "." enum_specifier) (COMMENT type_specifier "=>" "." struct_or_union_specifier) (COMMENT type_specifier "=>" "." UNSIGNED) (COMMENT type_specifier "=>" "." SIGNED) (COMMENT type_specifier "=>" "." DOUBLE) (COMMENT type_specifier "=>" "." FLOAT) (COMMENT type_specifier "=>" "." LONG) (COMMENT type_specifier "=>" "." INT) (COMMENT type_specifier "=>" "." SHORT) (COMMENT type_specifier "=>" "." CHAR) (COMMENT type_specifier "=>" "." VOID) (SHIFT (TYPE_NAME) s41) (SHIFT (CHAR) s42) (SHIFT (SHORT) s43) (SHIFT (INT) s44) (SHIFT (LONG) s45) (SHIFT (SIGNED) s46) (SHIFT (UNSIGNED) s47) (SHIFT (FLOAT) s48) (SHIFT (DOUBLE) s49) (SHIFT (CONST) s50) (SHIFT (VOLATILE) s51) (SHIFT (VOID) s52) (SHIFT (STRUCT) s53) (SHIFT (UNION) s54) (SHIFT (ENUM) s55) (SHIFT (RCURLY) s159) (GOTO type_specifier s34) (GOTO struct_or_union_specifier s35) (GOTO struct_or_union s36) (GOTO struct_declaration s158) (GOTO specifier_qualifier_list s145) (GOTO enum_specifier s38) (GOTO type_qualifier s39))
 (STATE s144 (COMMENT struct_declaration_list "=>" struct_declaration ".") (REDUCE () r110))
 (STATE s145 (COMMENT pointer "=>" "." STAR type_qualifier_list pointer) (COMMENT pointer "=>" "." STAR pointer) (COMMENT pointer "=>" "." STAR type_qualifier_list) (COMMENT pointer "=>" "." STAR) (COMMENT direct_declarator "=>" "." direct_declarator LPAREN RPAREN) (COMMENT direct_declarator "=>" "." direct_declarator LPAREN identifier_list RPAREN) (COMMENT direct_declarator "=>" "." direct_declarator LPAREN parameter_type_list RPAREN) (COMMENT direct_declarator "=>" "." direct_declarator LBRACK RBRACK) (COMMENT direct_declarator "=>" "." direct_declarator LBRACK constant_expression RBRACK) (COMMENT direct_declarator "=>" "." LPAREN declarator RPAREN) (COMMENT direct_declarator "=>" "." IDENTIFIER) (COMMENT declarator "=>" "." direct_declarator) (COMMENT declarator "=>" "." pointer direct_declarator) (COMMENT struct_declarator "=>" "." declarator COLON constant_expression) (COMMENT struct_declarator "=>" "." COLON constant_expression) (COMMENT struct_declarator "=>" "." declarator) (COMMENT struct_declarator_list "=>" "." struct_declarator_list COMMA struct_declarator) (COMMENT struct_declarator_list "=>" "." struct_declarator) (COMMENT struct_declaration "=>" specifier_qualifier_list "." struct_declarator_list SEMICOLON) (SHIFT (IDENTIFIER) s114) (SHIFT (LPAREN) s150) (SHIFT (STAR) s79) (SHIFT (COLON) s151) (GOTO struct_declarator_list s146) (GOTO struct_declarator s147) (GOTO declarator s148) (GOTO direct_declarator s111) (GOTO pointer s149))
 (STATE s146 (COMMENT struct_declarator_list "=>" struct_declarator_list "." COMMA struct_declarator) (COMMENT struct_declaration "=>" specifier_qualifier_list struct_declarator_list "." SEMICOLON) (SHIFT (COMMA) s155) (SHIFT (SEMICOLON) s156))
 (STATE s147 (COMMENT struct_declarator_list "=>" struct_declarator ".") (REDUCE () r117))
 (STATE s148 (COMMENT struct_declarator "=>" declarator "." COLON constant_expression) (COMMENT struct_declarator "=>" declarator ".") (REDUCE (COMMA) r119) (SHIFT (COLON) s153) (REDUCE (SEMICOLON) r119))
 (STATE s149 (COMMENT direct_declarator "=>" "." direct_declarator LPAREN RPAREN) (COMMENT direct_declarator "=>" "." direct_declarator LPAREN identifier_list RPAREN) (COMMENT direct_declarator "=>" "." direct_declarator LPAREN parameter_type_list RPAREN) (COMMENT direct_declarator "=>" "." direct_declarator LBRACK RBRACK) (COMMENT direct_declarator "=>" "." direct_declarator LBRACK constant_expression RBRACK) (COMMENT direct_declarator "=>" "." LPAREN declarator RPAREN) (COMMENT direct_declarator "=>" "." IDENTIFIER) (COMMENT declarator "=>" pointer "." direct_declarator) (SHIFT (IDENTIFIER) s114) (SHIFT (LPAREN) s150) (GOTO direct_declarator s118))
 (STATE s150 (COMMENT pointer "=>" "." STAR type_qualifier_list pointer) (COMMENT pointer "=>" "." STAR pointer) (COMMENT pointer "=>" "." STAR type_qualifier_list) (COMMENT pointer "=>" "." STAR) (COMMENT direct_declarator "=>" "." direct_declarator LPAREN RPAREN) (COMMENT direct_declarator "=>" "." direct_declarator LPAREN identifier_list RPAREN) (COMMENT direct_declarator "=>" "." direct_declarator LPAREN parameter_type_list RPAREN) (COMMENT direct_declarator "=>" "." direct_declarator LBRACK RBRACK) (COMMENT direct_declarator "=>" "." direct_declarator LBRACK constant_expression RBRACK) (COMMENT direct_declarator "=>" LPAREN "." declarator RPAREN) (COMMENT direct_declarator "=>" "." LPAREN declarator RPAREN) (COMMENT direct_declarator "=>" "." IDENTIFIER) (COMMENT declarator "=>" "." direct_declarator) (COMMENT declarator "=>" "." pointer direct_declarator) (SHIFT (IDENTIFIER) s114) (SHIFT (LPAREN) s150) (SHIFT (STAR) s79) (GOTO declarator s116) (GOTO direct_declarator s111) (GOTO pointer s149))
 (STATE s151 (COMMENT struct_declarator "=>" COLON "." constant_expression) (COMMENT constant_expression "=>" "." conditional_expression) (COMMENT conditional_expression "=>" "." logical_or_expression QMARK expression COLON conditional_expression) (COMMENT conditional_expression "=>" "." logical_or_expression) (COMMENT logical_or_expression "=>" "." logical_or_expression OR_OP logical_and_expression) (COMMENT logical_or_expression "=>" "." logical_and_expression) (COMMENT logical_and_expression "=>" "." logical_and_expression AND_OP inclusive_or_expression) (COMMENT logical_and_expression "=>" "." inclusive_or_expression) (COMMENT inclusive_or_expression "=>" "." inclusive_or_expression PIPE exclusive_or_expression) (COMMENT inclusive_or_expression "=>" "." exclusive_or_expression) (COMMENT exclusive_or_expression "=>" "." exclusive_or_expression CARROT and_expression) (COMMENT exclusive_or_expression "=>" "." and_expression) (COMMENT and_expression "=>" "." and_expression AMPERSAND equality_expression) (COMMENT and_expression "=>" "." equality_expression) (COMMENT equality_expression "=>" "." equality_expression NE_OP relational_expression) (COMMENT equality_expression "=>" "." equality_expression EQ_OP relational_expression) (COMMENT equality_expression "=>" "." relational_expression) (COMMENT relational_expression "=>" "." relational_expression GE_OP shift_expression) (COMMENT relational_expression "=>" "." relational_expression LE_OP shift_expression) (COMMENT relational_expression "=>" "." relational_expression GREATER_OP shift_expression) (COMMENT relational_expression "=>" "." relational_expression LESS_OP shift_expression) (COMMENT relational_expression "=>" "." shift_expression) (COMMENT shift_expression "=>" "." shift_expression RIGHT_OP additive_expression) (COMMENT shift_expression "=>" "." shift_expression LEFT_OP additive_expression) (COMMENT shift_expression "=>" "." additive_expression) (COMMENT additive_expression "=>" "." additive_expression MINUS multiplicative_expression) (COMMENT additive_expression "=>" "." additive_expression PLUS multiplicative_expression) (COMMENT additive_expression "=>" "." multiplicative_expression) (COMMENT multiplicative_expression "=>" "." multiplicative_expression AMPERSAND cast_expression) (COMMENT multiplicative_expression "=>" "." multiplicative_expression FORWARD_SLASH cast_expression) (COMMENT multiplicative_expression "=>" "." multiplicative_expression STAR cast_expression) (COMMENT multiplicative_expression "=>" "." cast_expression) (COMMENT cast_expression "=>" "." LPAREN type_name RPAREN cast_expression) (COMMENT cast_expression "=>" "." unary_expression) (COMMENT unary_operator "=>" "." BANG) (COMMENT unary_operator "=>" "." TWIDLE) (COMMENT unary_operator "=>" "." MINUS) (COMMENT unary_operator "=>" "." PLUS) (COMMENT unary_operator "=>" "." STAR) (COMMENT unary_operator "=>" "." AMPERSAND) (COMMENT unary_expression "=>" "." SIZEOF LPAREN type_name RPAREN) (COMMENT unary_expression "=>" "." SIZEOF unary_expression) (COMMENT unary_expression "=>" "." unary_operator cast_expression) (COMMENT unary_expression "=>" "." DEC_OP unary_expression) (COMMENT unary_expression "=>" "." INC_OP unary_expression) (COMMENT unary_expression "=>" "." postfix_expression) (COMMENT postfix_expression "=>" "." postfix_expression DEC_OP) (COMMENT postfix_expression "=>" "." postfix_expression INC_OP) (COMMENT postfix_expression "=>" "." postfix_expression PTR_OP IDENTIFIER) (COMMENT postfix_expression "=>" "." postfix_expression DOT IDENTIFIER) (COMMENT postfix_expression "=>" "." postfix_expression LPAREN argument_expression_list RPAREN) (COMMENT postfix_expression "=>" "." postfix_expression LPAREN RPAREN) (COMMENT postfix_expression "=>" "." postfix_expression LBRACK expression RBRACK) (COMMENT postfix_expression "=>" "." primary_expression) (COMMENT primary_expression "=>" "." LPAREN expression RPAREN) (COMMENT primary_expression "=>" "." STRING_LITERAL) (COMMENT primary_expression "=>" "." CONSTANT) (COMMENT primary_expression "=>" "." IDENTIFIER) (SHIFT (IDENTIFIER) s2) (SHIFT (CONSTANT) s3) (SHIFT (STRING_LITERAL) s4) (SHIFT (SIZEOF) s24) (SHIFT (INC_OP) s25) (SHIFT (DEC_OP) s26) (SHIFT (LPAREN) s27) (SHIFT (AMPERSAND) s28) (SHIFT (STAR) s29) (SHIFT (PLUS) s30) (SHIFT (MINUS) s31) (SHIFT (TWIDLE) s32) (SHIFT (BANG) s33) (GOTO primary_expression s6) (GOTO postfix_expression s7) (GOTO unary_expression s62) (GOTO unary_operator s9) (GOTO cast_expression s10) (GOTO multiplicative_expression s11) (GOTO additive_expression s12) (GOTO shift_expression s13) (GOTO relational_expression s14) (GOTO equality_expression s15) (GOTO and_expression s16) (GOTO exclusive_or_expression s17) (GOTO inclusive_or_expression s18) (GOTO logical_and_expression s19) (GOTO logical_or_expression s20) (GOTO conditional_expression s63) (GOTO constant_expression s152))
 (STATE s152 (COMMENT struct_declarator "=>" COLON constant_expression ".") (REDUCE () r120))
 (STATE s153 (COMMENT struct_declarator "=>" declarator COLON "." constant_expression) (COMMENT constant_expression "=>" "." conditional_expression) (COMMENT conditional_expression "=>" "." logical_or_expression QMARK expression COLON conditional_expression) (COMMENT conditional_expression "=>" "." logical_or_expression) (COMMENT logical_or_expression "=>" "." logical_or_expression OR_OP logical_and_expression) (COMMENT logical_or_expression "=>" "." logical_and_expression) (COMMENT logical_and_expression "=>" "." logical_and_expression AND_OP inclusive_or_expression) (COMMENT logical_and_expression "=>" "." inclusive_or_expression) (COMMENT inclusive_or_expression "=>" "." inclusive_or_expression PIPE exclusive_or_expression) (COMMENT inclusive_or_expression "=>" "." exclusive_or_expression) (COMMENT exclusive_or_expression "=>" "." exclusive_or_expression CARROT and_expression) (COMMENT exclusive_or_expression "=>" "." and_expression) (COMMENT and_expression "=>" "." and_expression AMPERSAND equality_expression) (COMMENT and_expression "=>" "." equality_expression) (COMMENT equality_expression "=>" "." equality_expression NE_OP relational_expression) (COMMENT equality_expression "=>" "." equality_expression EQ_OP relational_expression) (COMMENT equality_expression "=>" "." relational_expression) (COMMENT relational_expression "=>" "." relational_expression GE_OP shift_expression) (COMMENT relational_expression "=>" "." relational_expression LE_OP shift_expression) (COMMENT relational_expression "=>" "." relational_expression GREATER_OP shift_expression) (COMMENT relational_expression "=>" "." relational_expression LESS_OP shift_expression) (COMMENT relational_expression "=>" "." shift_expression) (COMMENT shift_expression "=>" "." shift_expression RIGHT_OP additive_expression) (COMMENT shift_expression "=>" "." shift_expression LEFT_OP additive_expression) (COMMENT shift_expression "=>" "." additive_expression) (COMMENT additive_expression "=>" "." additive_expression MINUS multiplicative_expression) (COMMENT additive_expression "=>" "." additive_expression PLUS multiplicative_expression) (COMMENT additive_expression "=>" "." multiplicative_expression) (COMMENT multiplicative_expression "=>" "." multiplicative_expression AMPERSAND cast_expression) (COMMENT multiplicative_expression "=>" "." multiplicative_expression FORWARD_SLASH cast_expression) (COMMENT multiplicative_expression "=>" "." multiplicative_expression STAR cast_expression) (COMMENT multiplicative_expression "=>" "." cast_expression) (COMMENT cast_expression "=>" "." LPAREN type_name RPAREN cast_expression) (COMMENT cast_expression "=>" "." unary_expression) (COMMENT unary_operator "=>" "." BANG) (COMMENT unary_operator "=>" "." TWIDLE) (COMMENT unary_operator "=>" "." MINUS) (COMMENT unary_operator "=>" "." PLUS) (COMMENT unary_operator "=>" "." STAR) (COMMENT unary_operator "=>" "." AMPERSAND) (COMMENT unary_expression "=>" "." SIZEOF LPAREN type_name RPAREN) (COMMENT unary_expression "=>" "." SIZEOF unary_expression) (COMMENT unary_expression "=>" "." unary_operator cast_expression) (COMMENT unary_expression "=>" "." DEC_OP unary_expression) (COMMENT unary_expression "=>" "." INC_OP unary_expression) (COMMENT unary_expression "=>" "." postfix_expression) (COMMENT postfix_expression "=>" "." postfix_expression DEC_OP) (COMMENT postfix_expression "=>" "." postfix_expression INC_OP) (COMMENT postfix_expression "=>" "." postfix_expression PTR_OP IDENTIFIER) (COMMENT postfix_expression "=>" "." postfix_expression DOT IDENTIFIER) (COMMENT postfix_expression "=>" "." postfix_expression LPAREN argument_expression_list RPAREN) (COMMENT postfix_expression "=>" "." postfix_expression LPAREN RPAREN) (COMMENT postfix_expression "=>" "." postfix_expression LBRACK expression RBRACK) (COMMENT postfix_expression "=>" "." primary_expression) (COMMENT primary_expression "=>" "." LPAREN expression RPAREN) (COMMENT primary_expression "=>" "." STRING_LITERAL) (COMMENT primary_expression "=>" "." CONSTANT) (COMMENT primary_expression "=>" "." IDENTIFIER) (SHIFT (IDENTIFIER) s2) (SHIFT (CONSTANT) s3) (SHIFT (STRING_LITERAL) s4) (SHIFT (SIZEOF) s24) (SHIFT (INC_OP) s25) (SHIFT (DEC_OP) s26) (SHIFT (LPAREN) s27) (SHIFT (AMPERSAND) s28) (SHIFT (STAR) s29) (SHIFT (PLUS) s30) (SHIFT (MINUS) s31) (SHIFT (TWIDLE) s32) (SHIFT (BANG) s33) (GOTO primary_expression s6) (GOTO postfix_expression s7) (GOTO unary_expression s62) (GOTO unary_operator s9) (GOTO cast_expression s10) (GOTO multiplicative_expression s11) (GOTO additive_expression s12) (GOTO shift_expression s13) (GOTO relational_expression s14) (GOTO equality_expression s15) (GOTO and_expression s16) (GOTO exclusive_or_expression s17) (GOTO inclusive_or_expression s18) (GOTO logical_and_expression s19) (GOTO logical_or_expression s20) (GOTO conditional_expression s63) (GOTO constant_expression s154))
 (STATE s154 (COMMENT struct_declarator "=>" declarator COLON constant_expression ".") (REDUCE () r121))
 (STATE s155 (COMMENT pointer "=>" "." STAR type_qualifier_list pointer) (COMMENT pointer "=>" "." STAR pointer) (COMMENT pointer "=>" "." STAR type_qualifier_list) (COMMENT pointer "=>" "." STAR) (COMMENT direct_declarator "=>" "." direct_declarator LPAREN RPAREN) (COMMENT direct_declarator "=>" "." direct_declarator LPAREN identifier_list RPAREN) (COMMENT direct_declarator "=>" "." direct_declarator LPAREN parameter_type_list RPAREN) (COMMENT direct_declarator "=>" "." direct_declarator LBRACK RBRACK) (COMMENT direct_declarator "=>" "." direct_declarator LBRACK constant_expression RBRACK) (COMMENT direct_declarator "=>" "." LPAREN declarator RPAREN) (COMMENT direct_declarator "=>" "." IDENTIFIER) (COMMENT declarator "=>" "." direct_declarator) (COMMENT declarator "=>" "." pointer direct_declarator) (COMMENT struct_declarator "=>" "." declarator COLON constant_expression) (COMMENT struct_declarator "=>" "." COLON constant_expression) (COMMENT struct_declarator "=>" "." declarator) (COMMENT struct_declarator_list "=>" struct_declarator_list COMMA "." struct_declarator) (SHIFT (IDENTIFIER) s114) (SHIFT (LPAREN) s150) (SHIFT (STAR) s79) (SHIFT (COLON) s151) (GOTO struct_declarator s157) (GOTO declarator s148) (GOTO direct_declarator s111) (GOTO pointer s149))
 (STATE s156 (COMMENT struct_declaration "=>" specifier_qualifier_list struct_declarator_list SEMICOLON ".") (REDUCE () r112))
 (STATE s157 (COMMENT struct_declarator_list "=>" struct_declarator_list COMMA struct_declarator ".") (REDUCE () r118))
 (STATE s158 (COMMENT struct_declaration_list "=>" struct_declaration_list struct_declaration ".") (REDUCE () r111))
 (STATE s159 (COMMENT struct_or_union_specifier "=>" struct_or_union LCURLY struct_declaration_list RCURLY ".") (REDUCE () r106))
 (STATE s160 (COMMENT type_qualifier "=>" "." VOLATILE) (COMMENT type_qualifier "=>" "." CONST) (COMMENT enum_specifier "=>" "." ENUM IDENTIFIER) (COMMENT enum_specifier "=>" "." ENUM IDENTIFIER LCURLY enumerator_list RCURLY) (COMMENT enum_specifier "=>" "." ENUM LCURLY enumerator_list RCURLY) (COMMENT specifier_qualifier_list "=>" "." type_qualifier) (COMMENT specifier_qualifier_list "=>" "." type_qualifier specifier_qualifier_list) (COMMENT specifier_qualifier_list "=>" "." type_specifier) (COMMENT specifier_qualifier_list "=>" "." type_specifier specifier_qualifier_list) (COMMENT struct_declaration "=>" "." specifier_qualifier_list struct_declarator_list SEMICOLON) (COMMENT struct_declaration_list "=>" "." struct_declaration_list struct_declaration) (COMMENT struct_declaration_list "=>" "." struct_declaration) (COMMENT struct_or_union "=>" "." UNION) (COMMENT struct_or_union "=>" "." STRUCT) (COMMENT struct_or_union_specifier "=>" "." struct_or_union IDENTIFIER) (COMMENT struct_or_union_specifier "=>" "." struct_or_union LCURLY struct_declaration_list RCURLY) (COMMENT struct_or_union_specifier "=>" struct_or_union IDENTIFIER LCURLY "." struct_declaration_list RCURLY) (COMMENT struct_or_union_specifier "=>" "." struct_or_union IDENTIFIER LCURLY struct_declaration_list RCURLY) (COMMENT type_specifier "=>" "." TYPE_NAME) (COMMENT type_specifier "=>" "." enum_specifier) (COMMENT type_specifier "=>" "." struct_or_union_specifier) (COMMENT type_specifier "=>" "." UNSIGNED) (COMMENT type_specifier "=>" "." SIGNED) (COMMENT type_specifier "=>" "." DOUBLE) (COMMENT type_specifier "=>" "." FLOAT) (COMMENT type_specifier "=>" "." LONG) (COMMENT type_specifier "=>" "." INT) (COMMENT type_specifier "=>" "." SHORT) (COMMENT type_specifier "=>" "." CHAR) (COMMENT type_specifier "=>" "." VOID) (SHIFT (TYPE_NAME) s41) (SHIFT (CHAR) s42) (SHIFT (SHORT) s43) (SHIFT (INT) s44) (SHIFT (LONG) s45) (SHIFT (SIGNED) s46) (SHIFT (UNSIGNED) s47) (SHIFT (FLOAT) s48) (SHIFT (DOUBLE) s49) (SHIFT (CONST) s50) (SHIFT (VOLATILE) s51) (SHIFT (VOID) s52) (SHIFT (STRUCT) s53) (SHIFT (UNION) s54) (SHIFT (ENUM) s55) (GOTO type_specifier s34) (GOTO struct_or_union_specifier s35) (GOTO struct_or_union s36) (GOTO struct_declaration_list s161) (GOTO struct_declaration s144) (GOTO specifier_qualifier_list s145) (GOTO enum_specifier s38) (GOTO type_qualifier s39))
 (STATE s161 (COMMENT type_qualifier "=>" "." VOLATILE) (COMMENT type_qualifier "=>" "." CONST) (COMMENT enum_specifier "=>" "." ENUM IDENTIFIER) (COMMENT enum_specifier "=>" "." ENUM IDENTIFIER LCURLY enumerator_list RCURLY) (COMMENT enum_specifier "=>" "." ENUM LCURLY enumerator_list RCURLY) (COMMENT specifier_qualifier_list "=>" "." type_qualifier) (COMMENT specifier_qualifier_list "=>" "." type_qualifier specifier_qualifier_list) (COMMENT specifier_qualifier_list "=>" "." type_specifier) (COMMENT specifier_qualifier_list "=>" "." type_specifier specifier_qualifier_list) (COMMENT struct_declaration "=>" "." specifier_qualifier_list struct_declarator_list SEMICOLON) (COMMENT struct_declaration_list "=>" struct_declaration_list "." struct_declaration) (COMMENT struct_or_union "=>" "." UNION) (COMMENT struct_or_union "=>" "." STRUCT) (COMMENT struct_or_union_specifier "=>" "." struct_or_union IDENTIFIER) (COMMENT struct_or_union_specifier "=>" "." struct_or_union LCURLY struct_declaration_list RCURLY) (COMMENT struct_or_union_specifier "=>" struct_or_union IDENTIFIER LCURLY struct_declaration_list "." RCURLY) (COMMENT struct_or_union_specifier "=>" "." struct_or_union IDENTIFIER LCURLY struct_declaration_list RCURLY) (COMMENT type_specifier "=>" "." TYPE_NAME) (COMMENT type_specifier "=>" "." enum_specifier) (COMMENT type_specifier "=>" "." struct_or_union_specifier) (COMMENT type_specifier "=>" "." UNSIGNED) (COMMENT type_specifier "=>" "." SIGNED) (COMMENT type_specifier "=>" "." DOUBLE) (COMMENT type_specifier "=>" "." FLOAT) (COMMENT type_specifier "=>" "." LONG) (COMMENT type_specifier "=>" "." INT) (COMMENT type_specifier "=>" "." SHORT) (COMMENT type_specifier "=>" "." CHAR) (COMMENT type_specifier "=>" "." VOID) (SHIFT (TYPE_NAME) s41) (SHIFT (CHAR) s42) (SHIFT (SHORT) s43) (SHIFT (INT) s44) (SHIFT (LONG) s45) (SHIFT (SIGNED) s46) (SHIFT (UNSIGNED) s47) (SHIFT (FLOAT) s48) (SHIFT (DOUBLE) s49) (SHIFT (CONST) s50) (SHIFT (VOLATILE) s51) (SHIFT (VOID) s52) (SHIFT (STRUCT) s53) (SHIFT (UNION) s54) (SHIFT (ENUM) s55) (SHIFT (RCURLY) s162) (GOTO type_specifier s34) (GOTO struct_or_union_specifier s35) (GOTO struct_or_union s36) (GOTO struct_declaration s158) (GOTO specifier_qualifier_list s145) (GOTO enum_specifier s38) (GOTO type_qualifier s39))
 (STATE s162 (COMMENT struct_or_union_specifier "=>" struct_or_union IDENTIFIER LCURLY struct_declaration_list RCURLY ".") (REDUCE () r105))
 (STATE s163 (COMMENT specifier_qualifier_list "=>" type_specifier specifier_qualifier_list ".") (REDUCE () r113))
 (STATE s164 (COMMENT unary_expression "=>" DEC_OP unary_expression ".") (REDUCE () r18))
 (STATE s165 (COMMENT unary_expression "=>" INC_OP unary_expression ".") (REDUCE () r17))
 (STATE s166 (COMMENT unary_expression "=>" SIZEOF unary_expression ".") (REDUCE () r20))
 (STATE s167 (COMMENT type_name "=>" "." specifier_qualifier_list abstract_declarator) (COMMENT type_name "=>" "." specifier_qualifier_list) (COMMENT type_qualifier "=>" "." VOLATILE) (COMMENT type_qualifier "=>" "." CONST) (COMMENT enum_specifier "=>" "." ENUM IDENTIFIER) (COMMENT enum_specifier "=>" "." ENUM IDENTIFIER LCURLY enumerator_list RCURLY) (COMMENT enum_specifier "=>" "." ENUM LCURLY enumerator_list RCURLY) (COMMENT specifier_qualifier_list "=>" "." type_qualifier) (COMMENT specifier_qualifier_list "=>" "." type_qualifier specifier_qualifier_list) (COMMENT specifier_qualifier_list "=>" "." type_specifier) (COMMENT specifier_qualifier_list "=>" "." type_specifier specifier_qualifier_list) (COMMENT struct_or_union "=>" "." UNION) (COMMENT struct_or_union "=>" "." STRUCT) (COMMENT struct_or_union_specifier "=>" "." struct_or_union IDENTIFIER) (COMMENT struct_or_union_specifier "=>" "." struct_or_union LCURLY struct_declaration_list RCURLY) (COMMENT struct_or_union_specifier "=>" "." struct_or_union IDENTIFIER LCURLY struct_declaration_list RCURLY) (COMMENT type_specifier "=>" "." TYPE_NAME) (COMMENT type_specifier "=>" "." enum_specifier) (COMMENT type_specifier "=>" "." struct_or_union_specifier) (COMMENT type_specifier "=>" "." UNSIGNED) (COMMENT type_specifier "=>" "." SIGNED) (COMMENT type_specifier "=>" "." DOUBLE) (COMMENT type_specifier "=>" "." FLOAT) (COMMENT type_specifier "=>" "." LONG) (COMMENT type_specifier "=>" "." INT) (COMMENT type_specifier "=>" "." SHORT) (COMMENT type_specifier "=>" "." CHAR) (COMMENT type_specifier "=>" "." VOID) (COMMENT expression "=>" "." expression COMMA assignment_expression) (COMMENT expression "=>" "." assignment_expression) (COMMENT assignment_expression "=>" "." unary_expression assignment_operator assignment_expression) (COMMENT assignment_expression "=>" "." conditional_expression) (COMMENT conditional_expression "=>" "." logical_or_expression QMARK expression COLON conditional_expression) (COMMENT conditional_expression "=>" "." logical_or_expression) (COMMENT logical_or_expression "=>" "." logical_or_expression OR_OP logical_and_expression) (COMMENT logical_or_expression "=>" "." logical_and_expression) (COMMENT logical_and_expression "=>" "." logical_and_expression AND_OP inclusive_or_expression) (COMMENT logical_and_expression "=>" "." inclusive_or_expression) (COMMENT inclusive_or_expression "=>" "." inclusive_or_expression PIPE exclusive_or_expression) (COMMENT inclusive_or_expression "=>" "." exclusive_or_expression) (COMMENT exclusive_or_expression "=>" "." exclusive_or_expression CARROT and_expression) (COMMENT exclusive_or_expression "=>" "." and_expression) (COMMENT and_expression "=>" "." and_expression AMPERSAND equality_expression) (COMMENT and_expression "=>" "." equality_expression) (COMMENT equality_expression "=>" "." equality_expression NE_OP relational_expression) (COMMENT equality_expression "=>" "." equality_expression EQ_OP relational_expression) (COMMENT equality_expression "=>" "." relational_expression) (COMMENT relational_expression "=>" "." relational_expression GE_OP shift_expression) (COMMENT relational_expression "=>" "." relational_expression LE_OP shift_expression) (COMMENT relational_expression "=>" "." relational_expression GREATER_OP shift_expression) (COMMENT relational_expression "=>" "." relational_expression LESS_OP shift_expression) (COMMENT relational_expression "=>" "." shift_expression) (COMMENT shift_expression "=>" "." shift_expression RIGHT_OP additive_expression) (COMMENT shift_expression "=>" "." shift_expression LEFT_OP additive_expression) (COMMENT shift_expression "=>" "." additive_expression) (COMMENT additive_expression "=>" "." additive_expression MINUS multiplicative_expression) (COMMENT additive_expression "=>" "." additive_expression PLUS multiplicative_expression) (COMMENT additive_expression "=>" "." multiplicative_expression) (COMMENT multiplicative_expression "=>" "." multiplicative_expression AMPERSAND cast_expression) (COMMENT multiplicative_expression "=>" "." multiplicative_expression FORWARD_SLASH cast_expression) (COMMENT multiplicative_expression "=>" "." multiplicative_expression STAR cast_expression) (COMMENT multiplicative_expression "=>" "." cast_expression) (COMMENT cast_expression "=>" "." LPAREN type_name RPAREN cast_expression) (COMMENT cast_expression "=>" "." unary_expression) (COMMENT unary_operator "=>" "." BANG) (COMMENT unary_operator "=>" "." TWIDLE) (COMMENT unary_operator "=>" "." MINUS) (COMMENT unary_operator "=>" "." PLUS) (COMMENT unary_operator "=>" "." STAR) (COMMENT unary_operator "=>" "." AMPERSAND) (COMMENT unary_expression "=>" SIZEOF LPAREN "." type_name RPAREN) (COMMENT unary_expression "=>" "." SIZEOF LPAREN type_name RPAREN) (COMMENT unary_expression "=>" "." SIZEOF unary_expression) (COMMENT unary_expression "=>" "." unary_operator cast_expression) (COMMENT unary_expression "=>" "." DEC_OP unary_expression) (COMMENT unary_expression "=>" "." INC_OP unary_expression) (COMMENT unary_expression "=>" "." postfix_expression) (COMMENT postfix_expression "=>" "." postfix_expression DEC_OP) (COMMENT postfix_expression "=>" "." postfix_expression INC_OP) (COMMENT postfix_expression "=>" "." postfix_expression PTR_OP IDENTIFIER) (COMMENT postfix_expression "=>" "." postfix_expression DOT IDENTIFIER) (COMMENT postfix_expression "=>" "." postfix_expression LPAREN argument_expression_list RPAREN) (COMMENT postfix_expression "=>" "." postfix_expression LPAREN RPAREN) (COMMENT postfix_expression "=>" "." postfix_expression LBRACK expression RBRACK) (COMMENT postfix_expression "=>" "." primary_expression) (COMMENT primary_expression "=>" LPAREN "." expression RPAREN) (COMMENT primary_expression "=>" "." LPAREN expression RPAREN) (COMMENT primary_expression "=>" "." STRING_LITERAL) (COMMENT primary_expression "=>" "." CONSTANT) (COMMENT primary_expression "=>" "." IDENTIFIER) (SHIFT (IDENTIFIER) s2) (SHIFT (CONSTANT) s3) (SHIFT (STRING_LITERAL) s4) (SHIFT (SIZEOF) s24) (SHIFT (INC_OP) s25) (SHIFT (DEC_OP) s26) (SHIFT (TYPE_NAME) s41) (SHIFT (CHAR) s42) (SHIFT (SHORT) s43) (SHIFT (INT) s44) (SHIFT (LONG) s45) (SHIFT (SIGNED) s46) (SHIFT (UNSIGNED) s47) (SHIFT (FLOAT) s48) (SHIFT (DOUBLE) s49) (SHIFT (CONST) s50) (SHIFT (VOLATILE) s51) (SHIFT (VOID) s52) (SHIFT (STRUCT) s53) (SHIFT (UNION) s54) (SHIFT (ENUM) s55) (SHIFT (LPAREN) s27) (SHIFT (AMPERSAND) s28) (SHIFT (STAR) s29) (SHIFT (PLUS) s30) (SHIFT (MINUS) s31) (SHIFT (TWIDLE) s32) (SHIFT (BANG) s33) (GOTO primary_expression s6) (GOTO postfix_expression s7) (GOTO unary_expression s8) (GOTO unary_operator s9) (GOTO cast_expression s10) (GOTO multiplicative_expression s11) (GOTO additive_expression s12) (GOTO shift_expression s13) (GOTO relational_expression s14) (GOTO equality_expression s15) (GOTO and_expression s16) (GOTO exclusive_or_expression s17) (GOTO inclusive_or_expression s18) (GOTO logical_and_expression s19) (GOTO logical_or_expression s20) (GOTO conditional_expression s21) (GOTO assignment_expression s22) (GOTO expression s23) (GOTO type_specifier s34) (GOTO struct_or_union_specifier s35) (GOTO struct_or_union s36) (GOTO specifier_qualifier_list s37) (GOTO enum_specifier s38) (GOTO type_qualifier s39) (GOTO type_name s168))
 (STATE s168 (COMMENT unary_expression "=>" SIZEOF LPAREN type_name "." RPAREN) (SHIFT (RPAREN) s169))
 (STATE s169 (COMMENT unary_expression "=>" SIZEOF LPAREN type_name RPAREN ".") (REDUCE () r21))
 (STATE s170 (COMMENT primary_expression "=>" LPAREN expression RPAREN ".") (REDUCE () r5))
 (STATE s171 (COMMENT expression "=>" expression COMMA "." assignment_expression) (COMMENT assignment_expression "=>" "." unary_expression assignment_operator assignment_expression) (COMMENT assignment_expression "=>" "." conditional_expression) (COMMENT conditional_expression "=>" "." logical_or_expression QMARK expression COLON conditional_expression) (COMMENT conditional_expression "=>" "." logical_or_expression) (COMMENT logical_or_expression "=>" "." logical_or_expression OR_OP logical_and_expression) (COMMENT logical_or_expression "=>" "." logical_and_expression) (COMMENT logical_and_expression "=>" "." logical_and_expression AND_OP inclusive_or_expression) (COMMENT logical_and_expression "=>" "." inclusive_or_expression) (COMMENT inclusive_or_expression "=>" "." inclusive_or_expression PIPE exclusive_or_expression) (COMMENT inclusive_or_expression "=>" "." exclusive_or_expression) (COMMENT exclusive_or_expression "=>" "." exclusive_or_expression CARROT and_expression) (COMMENT exclusive_or_expression "=>" "." and_expression) (COMMENT and_expression "=>" "." and_expression AMPERSAND equality_expression) (COMMENT and_expression "=>" "." equality_expression) (COMMENT equality_expression "=>" "." equality_expression NE_OP relational_expression) (COMMENT equality_expression "=>" "." equality_expression EQ_OP relational_expression) (COMMENT equality_expression "=>" "." relational_expression) (COMMENT relational_expression "=>" "." relational_expression GE_OP shift_expression) (COMMENT relational_expression "=>" "." relational_expression LE_OP shift_expression) (COMMENT relational_expression "=>" "." relational_expression GREATER_OP shift_expression) (COMMENT relational_expression "=>" "." relational_expression LESS_OP shift_expression) (COMMENT relational_expression "=>" "." shift_expression) (COMMENT shift_expression "=>" "." shift_expression RIGHT_OP additive_expression) (COMMENT shift_expression "=>" "." shift_expression LEFT_OP additive_expression) (COMMENT shift_expression "=>" "." additive_expression) (COMMENT additive_expression "=>" "." additive_expression MINUS multiplicative_expression) (COMMENT additive_expression "=>" "." additive_expression PLUS multiplicative_expression) (COMMENT additive_expression "=>" "." multiplicative_expression) (COMMENT multiplicative_expression "=>" "." multiplicative_expression AMPERSAND cast_expression) (COMMENT multiplicative_expression "=>" "." multiplicative_expression FORWARD_SLASH cast_expression) (COMMENT multiplicative_expression "=>" "." multiplicative_expression STAR cast_expression) (COMMENT multiplicative_expression "=>" "." cast_expression) (COMMENT cast_expression "=>" "." LPAREN type_name RPAREN cast_expression) (COMMENT cast_expression "=>" "." unary_expression) (COMMENT unary_operator "=>" "." BANG) (COMMENT unary_operator "=>" "." TWIDLE) (COMMENT unary_operator "=>" "." MINUS) (COMMENT unary_operator "=>" "." PLUS) (COMMENT unary_operator "=>" "." STAR) (COMMENT unary_operator "=>" "." AMPERSAND) (COMMENT unary_expression "=>" "." SIZEOF LPAREN type_name RPAREN) (COMMENT unary_expression "=>" "." SIZEOF unary_expression) (COMMENT unary_expression "=>" "." unary_operator cast_expression) (COMMENT unary_expression "=>" "." DEC_OP unary_expression) (COMMENT unary_expression "=>" "." INC_OP unary_expression) (COMMENT unary_expression "=>" "." postfix_expression) (COMMENT postfix_expression "=>" "." postfix_expression DEC_OP) (COMMENT postfix_expression "=>" "." postfix_expression INC_OP) (COMMENT postfix_expression "=>" "." postfix_expression PTR_OP IDENTIFIER) (COMMENT postfix_expression "=>" "." postfix_expression DOT IDENTIFIER) (COMMENT postfix_expression "=>" "." postfix_expression LPAREN argument_expression_list RPAREN) (COMMENT postfix_expression "=>" "." postfix_expression LPAREN RPAREN) (COMMENT postfix_expression "=>" "." postfix_expression LBRACK expression RBRACK) (COMMENT postfix_expression "=>" "." primary_expression) (COMMENT primary_expression "=>" "." LPAREN expression RPAREN) (COMMENT primary_expression "=>" "." STRING_LITERAL) (COMMENT primary_expression "=>" "." CONSTANT) (COMMENT primary_expression "=>" "." IDENTIFIER) (SHIFT (IDENTIFIER) s2) (SHIFT (CONSTANT) s3) (SHIFT (STRING_LITERAL) s4) (SHIFT (SIZEOF) s24) (SHIFT (INC_OP) s25) (SHIFT (DEC_OP) s26) (SHIFT (LPAREN) s27) (SHIFT (AMPERSAND) s28) (SHIFT (STAR) s29) (SHIFT (PLUS) s30) (SHIFT (MINUS) s31) (SHIFT (TWIDLE) s32) (SHIFT (BANG) s33) (GOTO primary_expression s6) (GOTO postfix_expression s7) (GOTO unary_expression s8) (GOTO unary_operator s9) (GOTO cast_expression s10) (GOTO multiplicative_expression s11) (GOTO additive_expression s12) (GOTO shift_expression s13) (GOTO relational_expression s14) (GOTO equality_expression s15) (GOTO and_expression s16) (GOTO exclusive_or_expression s17) (GOTO inclusive_or_expression s18) (GOTO logical_and_expression s19) (GOTO logical_or_expression s20) (GOTO conditional_expression s21) (GOTO assignment_expression s172))
 (STATE s172 (COMMENT expression "=>" expression COMMA assignment_expression ".") (REDUCE () r74))
 (STATE s173 (COMMENT logical_or_expression "=>" logical_or_expression OR_OP "." logical_and_expression) (COMMENT logical_and_expression "=>" "." logical_and_expression AND_OP inclusive_or_expression) (COMMENT logical_and_expression "=>" "." inclusive_or_expression) (COMMENT inclusive_or_expression "=>" "." inclusive_or_expression PIPE exclusive_or_expression) (COMMENT inclusive_or_expression "=>" "." exclusive_or_expression) (COMMENT exclusive_or_expression "=>" "." exclusive_or_expression CARROT and_expression) (COMMENT exclusive_or_expression "=>" "." and_expression) (COMMENT and_expression "=>" "." and_expression AMPERSAND equality_expression) (COMMENT and_expression "=>" "." equality_expression) (COMMENT equality_expression "=>" "." equality_expression NE_OP relational_expression) (COMMENT equality_expression "=>" "." equality_expression EQ_OP relational_expression) (COMMENT equality_expression "=>" "." relational_expression) (COMMENT relational_expression "=>" "." relational_expression GE_OP shift_expression) (COMMENT relational_expression "=>" "." relational_expression LE_OP shift_expression) (COMMENT relational_expression "=>" "." relational_expression GREATER_OP shift_expression) (COMMENT relational_expression "=>" "." relational_expression LESS_OP shift_expression) (COMMENT relational_expression "=>" "." shift_expression) (COMMENT shift_expression "=>" "." shift_expression RIGHT_OP additive_expression) (COMMENT shift_expression "=>" "." shift_expression LEFT_OP additive_expression) (COMMENT shift_expression "=>" "." additive_expression) (COMMENT additive_expression "=>" "." additive_expression MINUS multiplicative_expression) (COMMENT additive_expression "=>" "." additive_expression PLUS multiplicative_expression) (COMMENT additive_expression "=>" "." multiplicative_expression) (COMMENT multiplicative_expression "=>" "." multiplicative_expression AMPERSAND cast_expression) (COMMENT multiplicative_expression "=>" "." multiplicative_expression FORWARD_SLASH cast_expression) (COMMENT multiplicative_expression "=>" "." multiplicative_expression STAR cast_expression) (COMMENT multiplicative_expression "=>" "." cast_expression) (COMMENT cast_expression "=>" "." LPAREN type_name RPAREN cast_expression) (COMMENT cast_expression "=>" "." unary_expression) (COMMENT unary_operator "=>" "." BANG) (COMMENT unary_operator "=>" "." TWIDLE) (COMMENT unary_operator "=>" "." MINUS) (COMMENT unary_operator "=>" "." PLUS) (COMMENT unary_operator "=>" "." STAR) (COMMENT unary_operator "=>" "." AMPERSAND) (COMMENT unary_expression "=>" "." SIZEOF LPAREN type_name RPAREN) (COMMENT unary_expression "=>" "." SIZEOF unary_expression) (COMMENT unary_expression "=>" "." unary_operator cast_expression) (COMMENT unary_expression "=>" "." DEC_OP unary_expression) (COMMENT unary_expression "=>" "." INC_OP unary_expression) (COMMENT unary_expression "=>" "." postfix_expression) (COMMENT postfix_expression "=>" "." postfix_expression DEC_OP) (COMMENT postfix_expression "=>" "." postfix_expression INC_OP) (COMMENT postfix_expression "=>" "." postfix_expression PTR_OP IDENTIFIER) (COMMENT postfix_expression "=>" "." postfix_expression DOT IDENTIFIER) (COMMENT postfix_expression "=>" "." postfix_expression LPAREN argument_expression_list RPAREN) (COMMENT postfix_expression "=>" "." postfix_expression LPAREN RPAREN) (COMMENT postfix_expression "=>" "." postfix_expression LBRACK expression RBRACK) (COMMENT postfix_expression "=>" "." primary_expression) (COMMENT primary_expression "=>" "." LPAREN expression RPAREN) (COMMENT primary_expression "=>" "." STRING_LITERAL) (COMMENT primary_expression "=>" "." CONSTANT) (COMMENT primary_expression "=>" "." IDENTIFIER) (SHIFT (IDENTIFIER) s2) (SHIFT (CONSTANT) s3) (SHIFT (STRING_LITERAL) s4) (SHIFT (SIZEOF) s24) (SHIFT (INC_OP) s25) (SHIFT (DEC_OP) s26) (SHIFT (LPAREN) s27) (SHIFT (AMPERSAND) s28) (SHIFT (STAR) s29) (SHIFT (PLUS) s30) (SHIFT (MINUS) s31) (SHIFT (TWIDLE) s32) (SHIFT (BANG) s33) (GOTO primary_expression s6) (GOTO postfix_expression s7) (GOTO unary_expression s62) (GOTO unary_operator s9) (GOTO cast_expression s10) (GOTO multiplicative_expression s11) (GOTO additive_expression s12) (GOTO shift_expression s13) (GOTO relational_expression s14) (GOTO equality_expression s15) (GOTO and_expression s16) (GOTO exclusive_or_expression s17) (GOTO inclusive_or_expression s18) (GOTO logical_and_expression s178))
 (STATE s174 (COMMENT expression "=>" "." expression COMMA assignment_expression) (COMMENT expression "=>" "." assignment_expression) (COMMENT assignment_expression "=>" "." unary_expression assignment_operator assignment_expression) (COMMENT assignment_expression "=>" "." conditional_expression) (COMMENT conditional_expression "=>" logical_or_expression QMARK "." expression COLON conditional_expression) (COMMENT conditional_expression "=>" "." logical_or_expression QMARK expression COLON conditional_expression) (COMMENT conditional_expression "=>" "." logical_or_expression) (COMMENT logical_or_expression "=>" "." logical_or_expression OR_OP logical_and_expression) (COMMENT logical_or_expression "=>" "." logical_and_expression) (COMMENT logical_and_expression "=>" "." logical_and_expression AND_OP inclusive_or_expression) (COMMENT logical_and_expression "=>" "." inclusive_or_expression) (COMMENT inclusive_or_expression "=>" "." inclusive_or_expression PIPE exclusive_or_expression) (COMMENT inclusive_or_expression "=>" "." exclusive_or_expression) (COMMENT exclusive_or_expression "=>" "." exclusive_or_expression CARROT and_expression) (COMMENT exclusive_or_expression "=>" "." and_expression) (COMMENT and_expression "=>" "." and_expression AMPERSAND equality_expression) (COMMENT and_expression "=>" "." equality_expression) (COMMENT equality_expression "=>" "." equality_expression NE_OP relational_expression) (COMMENT equality_expression "=>" "." equality_expression EQ_OP relational_expression) (COMMENT equality_expression "=>" "." relational_expression) (COMMENT relational_expression "=>" "." relational_expression GE_OP shift_expression) (COMMENT relational_expression "=>" "." relational_expression LE_OP shift_expression) (COMMENT relational_expression "=>" "." relational_expression GREATER_OP shift_expression) (COMMENT relational_expression "=>" "." relational_expression LESS_OP shift_expression) (COMMENT relational_expression "=>" "." shift_expression) (COMMENT shift_expression "=>" "." shift_expression RIGHT_OP additive_expression) (COMMENT shift_expression "=>" "." shift_expression LEFT_OP additive_expression) (COMMENT shift_expression "=>" "." additive_expression) (COMMENT additive_expression "=>" "." additive_expression MINUS multiplicative_expression) (COMMENT additive_expression "=>" "." additive_expression PLUS multiplicative_expression) (COMMENT additive_expression "=>" "." multiplicative_expression) (COMMENT multiplicative_expression "=>" "." multiplicative_expression AMPERSAND cast_expression) (COMMENT multiplicative_expression "=>" "." multiplicative_expression FORWARD_SLASH cast_expression) (COMMENT multiplicative_expression "=>" "." multiplicative_expression STAR cast_expression) (COMMENT multiplicative_expression "=>" "." cast_expression) (COMMENT cast_expression "=>" "." LPAREN type_name RPAREN cast_expression) (COMMENT cast_expression "=>" "." unary_expression) (COMMENT unary_operator "=>" "." BANG) (COMMENT unary_operator "=>" "." TWIDLE) (COMMENT unary_operator "=>" "." MINUS) (COMMENT unary_operator "=>" "." PLUS) (COMMENT unary_operator "=>" "." STAR) (COMMENT unary_operator "=>" "." AMPERSAND) (COMMENT unary_expression "=>" "." SIZEOF LPAREN type_name RPAREN) (COMMENT unary_expression "=>" "." SIZEOF unary_expression) (COMMENT unary_expression "=>" "." unary_operator cast_expression) (COMMENT unary_expression "=>" "." DEC_OP unary_expression) (COMMENT unary_expression "=>" "." INC_OP unary_expression) (COMMENT unary_expression "=>" "." postfix_expression) (COMMENT postfix_expression "=>" "." postfix_expression DEC_OP) (COMMENT postfix_expression "=>" "." postfix_expression INC_OP) (COMMENT postfix_expression "=>" "." postfix_expression PTR_OP IDENTIFIER) (COMMENT postfix_expression "=>" "." postfix_expression DOT IDENTIFIER) (COMMENT postfix_expression "=>" "." postfix_expression LPAREN argument_expression_list RPAREN) (COMMENT postfix_expression "=>" "." postfix_expression LPAREN RPAREN) (COMMENT postfix_expression "=>" "." postfix_expression LBRACK expression RBRACK) (COMMENT postfix_expression "=>" "." primary_expression) (COMMENT primary_expression "=>" "." LPAREN expression RPAREN) (COMMENT primary_expression "=>" "." STRING_LITERAL) (COMMENT primary_expression "=>" "." CONSTANT) (COMMENT primary_expression "=>" "." IDENTIFIER) (SHIFT (IDENTIFIER) s2) (SHIFT (CONSTANT) s3) (SHIFT (STRING_LITERAL) s4) (SHIFT (SIZEOF) s24) (SHIFT (INC_OP) s25) (SHIFT (DEC_OP) s26) (SHIFT (LPAREN) s27) (SHIFT (AMPERSAND) s28) (SHIFT (STAR) s29) (SHIFT (PLUS) s30) (SHIFT (MINUS) s31) (SHIFT (TWIDLE) s32) (SHIFT (BANG) s33) (GOTO primary_expression s6) (GOTO postfix_expression s7) (GOTO unary_expression s8) (GOTO unary_operator s9) (GOTO cast_expression s10) (GOTO multiplicative_expression s11) (GOTO additive_expression s12) (GOTO shift_expression s13) (GOTO relational_expression s14) (GOTO equality_expression s15) (GOTO and_expression s16) (GOTO exclusive_or_expression s17) (GOTO inclusive_or_expression s18) (GOTO logical_and_expression s19) (GOTO logical_or_expression s20) (GOTO conditional_expression s21) (GOTO assignment_expression s22) (GOTO expression s175))
 (STATE s175 (COMMENT expression "=>" expression "." COMMA assignment_expression) (COMMENT conditional_expression "=>" logical_or_expression QMARK expression "." COLON conditional_expression) (SHIFT (COMMA) s171) (SHIFT (COLON) s176))
 (STATE s176 (COMMENT conditional_expression "=>" logical_or_expression QMARK expression COLON "." conditional_expression) (COMMENT conditional_expression "=>" "." logical_or_expression QMARK expression COLON conditional_expression) (COMMENT conditional_expression "=>" "." logical_or_expression) (COMMENT logical_or_expression "=>" "." logical_or_expression OR_OP logical_and_expression) (COMMENT logical_or_expression "=>" "." logical_and_expression) (COMMENT logical_and_expression "=>" "." logical_and_expression AND_OP inclusive_or_expression) (COMMENT logical_and_expression "=>" "." inclusive_or_expression) (COMMENT inclusive_or_expression "=>" "." inclusive_or_expression PIPE exclusive_or_expression) (COMMENT inclusive_or_expression "=>" "." exclusive_or_expression) (COMMENT exclusive_or_expression "=>" "." exclusive_or_expression CARROT and_expression) (COMMENT exclusive_or_expression "=>" "." and_expression) (COMMENT and_expression "=>" "." and_expression AMPERSAND equality_expression) (COMMENT and_expression "=>" "." equality_expression) (COMMENT equality_expression "=>" "." equality_expression NE_OP relational_expression) (COMMENT equality_expression "=>" "." equality_expression EQ_OP relational_expression) (COMMENT equality_expression "=>" "." relational_expression) (COMMENT relational_expression "=>" "." relational_expression GE_OP shift_expression) (COMMENT relational_expression "=>" "." relational_expression LE_OP shift_expression) (COMMENT relational_expression "=>" "." relational_expression GREATER_OP shift_expression) (COMMENT relational_expression "=>" "." relational_expression LESS_OP shift_expression) (COMMENT relational_expression "=>" "." shift_expression) (COMMENT shift_expression "=>" "." shift_expression RIGHT_OP additive_expression) (COMMENT shift_expression "=>" "." shift_expression LEFT_OP additive_expression) (COMMENT shift_expression "=>" "." additive_expression) (COMMENT additive_expression "=>" "." additive_expression MINUS multiplicative_expression) (COMMENT additive_expression "=>" "." additive_expression PLUS multiplicative_expression) (COMMENT additive_expression "=>" "." multiplicative_expression) (COMMENT multiplicative_expression "=>" "." multiplicative_expression AMPERSAND cast_expression) (COMMENT multiplicative_expression "=>" "." multiplicative_expression FORWARD_SLASH cast_expression) (COMMENT multiplicative_expression "=>" "." multiplicative_expression STAR cast_expression) (COMMENT multiplicative_expression "=>" "." cast_expression) (COMMENT cast_expression "=>" "." LPAREN type_name RPAREN cast_expression) (COMMENT cast_expression "=>" "." unary_expression) (COMMENT unary_operator "=>" "." BANG) (COMMENT unary_operator "=>" "." TWIDLE) (COMMENT unary_operator "=>" "." MINUS) (COMMENT unary_operator "=>" "." PLUS) (COMMENT unary_operator "=>" "." STAR) (COMMENT unary_operator "=>" "." AMPERSAND) (COMMENT unary_expression "=>" "." SIZEOF LPAREN type_name RPAREN) (COMMENT unary_expression "=>" "." SIZEOF unary_expression) (COMMENT unary_expression "=>" "." unary_operator cast_expression) (COMMENT unary_expression "=>" "." DEC_OP unary_expression) (COMMENT unary_expression "=>" "." INC_OP unary_expression) (COMMENT unary_expression "=>" "." postfix_expression) (COMMENT postfix_expression "=>" "." postfix_expression DEC_OP) (COMMENT postfix_expression "=>" "." postfix_expression INC_OP) (COMMENT postfix_expression "=>" "." postfix_expression PTR_OP IDENTIFIER) (COMMENT postfix_expression "=>" "." postfix_expression DOT IDENTIFIER) (COMMENT postfix_expression "=>" "." postfix_expression LPAREN argument_expression_list RPAREN) (COMMENT postfix_expression "=>" "." postfix_expression LPAREN RPAREN) (COMMENT postfix_expression "=>" "." postfix_expression LBRACK expression RBRACK) (COMMENT postfix_expression "=>" "." primary_expression) (COMMENT primary_expression "=>" "." LPAREN expression RPAREN) (COMMENT primary_expression "=>" "." STRING_LITERAL) (COMMENT primary_expression "=>" "." CONSTANT) (COMMENT primary_expression "=>" "." IDENTIFIER) (SHIFT (IDENTIFIER) s2) (SHIFT (CONSTANT) s3) (SHIFT (STRING_LITERAL) s4) (SHIFT (SIZEOF) s24) (SHIFT (INC_OP) s25) (SHIFT (DEC_OP) s26) (SHIFT (LPAREN) s27) (SHIFT (AMPERSAND) s28) (SHIFT (STAR) s29) (SHIFT (PLUS) s30) (SHIFT (MINUS) s31) (SHIFT (TWIDLE) s32) (SHIFT (BANG) s33) (GOTO primary_expression s6) (GOTO postfix_expression s7) (GOTO unary_expression s62) (GOTO unary_operator s9) (GOTO cast_expression s10) (GOTO multiplicative_expression s11) (GOTO additive_expression s12) (GOTO shift_expression s13) (GOTO relational_expression s14) (GOTO equality_expression s15) (GOTO and_expression s16) (GOTO exclusive_or_expression s17) (GOTO inclusive_or_expression s18) (GOTO logical_and_expression s19) (GOTO logical_or_expression s20) (GOTO conditional_expression s177))
 (STATE s177 (COMMENT conditional_expression "=>" logical_or_expression QMARK expression COLON conditional_expression ".") (REDUCE () r59))
 (STATE s178 (COMMENT logical_or_expression "=>" logical_or_expression OR_OP logical_and_expression ".") (COMMENT logical_and_expression "=>" logical_and_expression "." AND_OP inclusive_or_expression) (SHIFT (AND_OP) s179) (REDUCE (OR_OP) r57) (REDUCE (RPAREN) r57) (REDUCE (RBRACK) r57) (REDUCE (RCURLY) r57) (REDUCE (COMMA) r57) (REDUCE (QMARK) r57) (REDUCE (COLON) r57) (REDUCE (SEMICOLON) r57))
 (STATE s179 (COMMENT logical_and_expression "=>" logical_and_expression AND_OP "." inclusive_or_expression) (COMMENT inclusive_or_expression "=>" "." inclusive_or_expression PIPE exclusive_or_expression) (COMMENT inclusive_or_expression "=>" "." exclusive_or_expression) (COMMENT exclusive_or_expression "=>" "." exclusive_or_expression CARROT and_expression) (COMMENT exclusive_or_expression "=>" "." and_expression) (COMMENT and_expression "=>" "." and_expression AMPERSAND equality_expression) (COMMENT and_expression "=>" "." equality_expression) (COMMENT equality_expression "=>" "." equality_expression NE_OP relational_expression) (COMMENT equality_expression "=>" "." equality_expression EQ_OP relational_expression) (COMMENT equality_expression "=>" "." relational_expression) (COMMENT relational_expression "=>" "." relational_expression GE_OP shift_expression) (COMMENT relational_expression "=>" "." relational_expression LE_OP shift_expression) (COMMENT relational_expression "=>" "." relational_expression GREATER_OP shift_expression) (COMMENT relational_expression "=>" "." relational_expression LESS_OP shift_expression) (COMMENT relational_expression "=>" "." shift_expression) (COMMENT shift_expression "=>" "." shift_expression RIGHT_OP additive_expression) (COMMENT shift_expression "=>" "." shift_expression LEFT_OP additive_expression) (COMMENT shift_expression "=>" "." additive_expression) (COMMENT additive_expression "=>" "." additive_expression MINUS multiplicative_expression) (COMMENT additive_expression "=>" "." additive_expression PLUS multiplicative_expression) (COMMENT additive_expression "=>" "." multiplicative_expression) (COMMENT multiplicative_expression "=>" "." multiplicative_expression AMPERSAND cast_expression) (COMMENT multiplicative_expression "=>" "." multiplicative_expression FORWARD_SLASH cast_expression) (COMMENT multiplicative_expression "=>" "." multiplicative_expression STAR cast_expression) (COMMENT multiplicative_expression "=>" "." cast_expression) (COMMENT cast_expression "=>" "." LPAREN type_name RPAREN cast_expression) (COMMENT cast_expression "=>" "." unary_expression) (COMMENT unary_operator "=>" "." BANG) (COMMENT unary_operator "=>" "." TWIDLE) (COMMENT unary_operator "=>" "." MINUS) (COMMENT unary_operator "=>" "." PLUS) (COMMENT unary_operator "=>" "." STAR) (COMMENT unary_operator "=>" "." AMPERSAND) (COMMENT unary_expression "=>" "." SIZEOF LPAREN type_name RPAREN) (COMMENT unary_expression "=>" "." SIZEOF unary_expression) (COMMENT unary_expression "=>" "." unary_operator cast_expression) (COMMENT unary_expression "=>" "." DEC_OP unary_expression) (COMMENT unary_expression "=>" "." INC_OP unary_expression) (COMMENT unary_expression "=>" "." postfix_expression) (COMMENT postfix_expression "=>" "." postfix_expression DEC_OP) (COMMENT postfix_expression "=>" "." postfix_expression INC_OP) (COMMENT postfix_expression "=>" "." postfix_expression PTR_OP IDENTIFIER) (COMMENT postfix_expression "=>" "." postfix_expression DOT IDENTIFIER) (COMMENT postfix_expression "=>" "." postfix_expression LPAREN argument_expression_list RPAREN) (COMMENT postfix_expression "=>" "." postfix_expression LPAREN RPAREN) (COMMENT postfix_expression "=>" "." postfix_expression LBRACK expression RBRACK) (COMMENT postfix_expression "=>" "." primary_expression) (COMMENT primary_expression "=>" "." LPAREN expression RPAREN) (COMMENT primary_expression "=>" "." STRING_LITERAL) (COMMENT primary_expression "=>" "." CONSTANT) (COMMENT primary_expression "=>" "." IDENTIFIER) (SHIFT (IDENTIFIER) s2) (SHIFT (CONSTANT) s3) (SHIFT (STRING_LITERAL) s4) (SHIFT (SIZEOF) s24) (SHIFT (INC_OP) s25) (SHIFT (DEC_OP) s26) (SHIFT (LPAREN) s27) (SHIFT (AMPERSAND) s28) (SHIFT (STAR) s29) (SHIFT (PLUS) s30) (SHIFT (MINUS) s31) (SHIFT (TWIDLE) s32) (SHIFT (BANG) s33) (GOTO primary_expression s6) (GOTO postfix_expression s7) (GOTO unary_expression s62) (GOTO unary_operator s9) (GOTO cast_expression s10) (GOTO multiplicative_expression s11) (GOTO additive_expression s12) (GOTO shift_expression s13) (GOTO relational_expression s14) (GOTO equality_expression s15) (GOTO and_expression s16) (GOTO exclusive_or_expression s17) (GOTO inclusive_or_expression s180))
 (STATE s180 (COMMENT logical_and_expression "=>" logical_and_expression AND_OP inclusive_or_expression ".") (COMMENT inclusive_or_expression "=>" inclusive_or_expression "." PIPE exclusive_or_expression) (REDUCE (AND_OP) r55) (REDUCE (OR_OP) r55) (REDUCE (RPAREN) r55) (REDUCE (RBRACK) r55) (REDUCE (RCURLY) r55) (REDUCE (COMMA) r55) (SHIFT (PIPE) s181) (REDUCE (QMARK) r55) (REDUCE (COLON) r55) (REDUCE (SEMICOLON) r55))
 (STATE s181 (COMMENT inclusive_or_expression "=>" inclusive_or_expression PIPE "." exclusive_or_expression) (COMMENT exclusive_or_expression "=>" "." exclusive_or_expression CARROT and_expression) (COMMENT exclusive_or_expression "=>" "." and_expression) (COMMENT and_expression "=>" "." and_expression AMPERSAND equality_expression) (COMMENT and_expression "=>" "." equality_expression) (COMMENT equality_expression "=>" "." equality_expression NE_OP relational_expression) (COMMENT equality_expression "=>" "." equality_expression EQ_OP relational_expression) (COMMENT equality_expression "=>" "." relational_expression) (COMMENT relational_expression "=>" "." relational_expression GE_OP shift_expression) (COMMENT relational_expression "=>" "." relational_expression LE_OP shift_expression) (COMMENT relational_expression "=>" "." relational_expression GREATER_OP shift_expression) (COMMENT relational_expression "=>" "." relational_expression LESS_OP shift_expression) (COMMENT relational_expression "=>" "." shift_expression) (COMMENT shift_expression "=>" "." shift_expression RIGHT_OP additive_expression) (COMMENT shift_expression "=>" "." shift_expression LEFT_OP additive_expression) (COMMENT shift_expression "=>" "." additive_expression) (COMMENT additive_expression "=>" "." additive_expression MINUS multiplicative_expression) (COMMENT additive_expression "=>" "." additive_expression PLUS multiplicative_expression) (COMMENT additive_expression "=>" "." multiplicative_expression) (COMMENT multiplicative_expression "=>" "." multiplicative_expression AMPERSAND cast_expression) (COMMENT multiplicative_expression "=>" "." multiplicative_expression FORWARD_SLASH cast_expression) (COMMENT multiplicative_expression "=>" "." multiplicative_expression STAR cast_expression) (COMMENT multiplicative_expression "=>" "." cast_expression) (COMMENT cast_expression "=>" "." LPAREN type_name RPAREN cast_expression) (COMMENT cast_expression "=>" "." unary_expression) (COMMENT unary_operator "=>" "." BANG) (COMMENT unary_operator "=>" "." TWIDLE) (COMMENT unary_operator "=>" "." MINUS) (COMMENT unary_operator "=>" "." PLUS) (COMMENT unary_operator "=>" "." STAR) (COMMENT unary_operator "=>" "." AMPERSAND) (COMMENT unary_expression "=>" "." SIZEOF LPAREN type_name RPAREN) (COMMENT unary_expression "=>" "." SIZEOF unary_expression) (COMMENT unary_expression "=>" "." unary_operator cast_expression) (COMMENT unary_expression "=>" "." DEC_OP unary_expression) (COMMENT unary_expression "=>" "." INC_OP unary_expression) (COMMENT unary_expression "=>" "." postfix_expression) (COMMENT postfix_expression "=>" "." postfix_expression DEC_OP) (COMMENT postfix_expression "=>" "." postfix_expression INC_OP) (COMMENT postfix_expression "=>" "." postfix_expression PTR_OP IDENTIFIER) (COMMENT postfix_expression "=>" "." postfix_expression DOT IDENTIFIER) (COMMENT postfix_expression "=>" "." postfix_expression LPAREN argument_expression_list RPAREN) (COMMENT postfix_expression "=>" "." postfix_expression LPAREN RPAREN) (COMMENT postfix_expression "=>" "." postfix_expression LBRACK expression RBRACK) (COMMENT postfix_expression "=>" "." primary_expression) (COMMENT primary_expression "=>" "." LPAREN expression RPAREN) (COMMENT primary_expression "=>" "." STRING_LITERAL) (COMMENT primary_expression "=>" "." CONSTANT) (COMMENT primary_expression "=>" "." IDENTIFIER) (SHIFT (IDENTIFIER) s2) (SHIFT (CONSTANT) s3) (SHIFT (STRING_LITERAL) s4) (SHIFT (SIZEOF) s24) (SHIFT (INC_OP) s25) (SHIFT (DEC_OP) s26) (SHIFT (LPAREN) s27) (SHIFT (AMPERSAND) s28) (SHIFT (STAR) s29) (SHIFT (PLUS) s30) (SHIFT (MINUS) s31) (SHIFT (TWIDLE) s32) (SHIFT (BANG) s33) (GOTO primary_expression s6) (GOTO postfix_expression s7) (GOTO unary_expression s62) (GOTO unary_operator s9) (GOTO cast_expression s10) (GOTO multiplicative_expression s11) (GOTO additive_expression s12) (GOTO shift_expression s13) (GOTO relational_expression s14) (GOTO equality_expression s15) (GOTO and_expression s16) (GOTO exclusive_or_expression s182))
 (STATE s182 (COMMENT inclusive_or_expression "=>" inclusive_or_expression PIPE exclusive_or_expression ".") (COMMENT exclusive_or_expression "=>" exclusive_or_expression "." CARROT and_expression) (REDUCE (AND_OP) r53) (REDUCE (OR_OP) r53) (REDUCE (RPAREN) r53) (REDUCE (RBRACK) r53) (REDUCE (RCURLY) r53) (REDUCE (COMMA) r53) (SHIFT (CARROT) s183) (REDUCE (PIPE) r53) (REDUCE (QMARK) r53) (REDUCE (COLON) r53) (REDUCE (SEMICOLON) r53))
 (STATE s183 (COMMENT exclusive_or_expression "=>" exclusive_or_expression CARROT "." and_expression) (COMMENT and_expression "=>" "." and_expression AMPERSAND equality_expression) (COMMENT and_expression "=>" "." equality_expression) (COMMENT equality_expression "=>" "." equality_expression NE_OP relational_expression) (COMMENT equality_expression "=>" "." equality_expression EQ_OP relational_expression) (COMMENT equality_expression "=>" "." relational_expression) (COMMENT relational_expression "=>" "." relational_expression GE_OP shift_expression) (COMMENT relational_expression "=>" "." relational_expression LE_OP shift_expression) (COMMENT relational_expression "=>" "." relational_expression GREATER_OP shift_expression) (COMMENT relational_expression "=>" "." relational_expression LESS_OP shift_expression) (COMMENT relational_expression "=>" "." shift_expression) (COMMENT shift_expression "=>" "." shift_expression RIGHT_OP additive_expression) (COMMENT shift_expression "=>" "." shift_expression LEFT_OP additive_expression) (COMMENT shift_expression "=>" "." additive_expression) (COMMENT additive_expression "=>" "." additive_expression MINUS multiplicative_expression) (COMMENT additive_expression "=>" "." additive_expression PLUS multiplicative_expression) (COMMENT additive_expression "=>" "." multiplicative_expression) (COMMENT multiplicative_expression "=>" "." multiplicative_expression AMPERSAND cast_expression) (COMMENT multiplicative_expression "=>" "." multiplicative_expression FORWARD_SLASH cast_expression) (COMMENT multiplicative_expression "=>" "." multiplicative_expression STAR cast_expression) (COMMENT multiplicative_expression "=>" "." cast_expression) (COMMENT cast_expression "=>" "." LPAREN type_name RPAREN cast_expression) (COMMENT cast_expression "=>" "." unary_expression) (COMMENT unary_operator "=>" "." BANG) (COMMENT unary_operator "=>" "." TWIDLE) (COMMENT unary_operator "=>" "." MINUS) (COMMENT unary_operator "=>" "." PLUS) (COMMENT unary_operator "=>" "." STAR) (COMMENT unary_operator "=>" "." AMPERSAND) (COMMENT unary_expression "=>" "." SIZEOF LPAREN type_name RPAREN) (COMMENT unary_expression "=>" "." SIZEOF unary_expression) (COMMENT unary_expression "=>" "." unary_operator cast_expression) (COMMENT unary_expression "=>" "." DEC_OP unary_expression) (COMMENT unary_expression "=>" "." INC_OP unary_expression) (COMMENT unary_expression "=>" "." postfix_expression) (COMMENT postfix_expression "=>" "." postfix_expression DEC_OP) (COMMENT postfix_expression "=>" "." postfix_expression INC_OP) (COMMENT postfix_expression "=>" "." postfix_expression PTR_OP IDENTIFIER) (COMMENT postfix_expression "=>" "." postfix_expression DOT IDENTIFIER) (COMMENT postfix_expression "=>" "." postfix_expression LPAREN argument_expression_list RPAREN) (COMMENT postfix_expression "=>" "." postfix_expression LPAREN RPAREN) (COMMENT postfix_expression "=>" "." postfix_expression LBRACK expression RBRACK) (COMMENT postfix_expression "=>" "." primary_expression) (COMMENT primary_expression "=>" "." LPAREN expression RPAREN) (COMMENT primary_expression "=>" "." STRING_LITERAL) (COMMENT primary_expression "=>" "." CONSTANT) (COMMENT primary_expression "=>" "." IDENTIFIER) (SHIFT (IDENTIFIER) s2) (SHIFT (CONSTANT) s3) (SHIFT (STRING_LITERAL) s4) (SHIFT (SIZEOF) s24) (SHIFT (INC_OP) s25) (SHIFT (DEC_OP) s26) (SHIFT (LPAREN) s27) (SHIFT (AMPERSAND) s28) (SHIFT (STAR) s29) (SHIFT (PLUS) s30) (SHIFT (MINUS) s31) (SHIFT (TWIDLE) s32) (SHIFT (BANG) s33) (GOTO primary_expression s6) (GOTO postfix_expression s7) (GOTO unary_expression s62) (GOTO unary_operator s9) (GOTO cast_expression s10) (GOTO multiplicative_expression s11) (GOTO additive_expression s12) (GOTO shift_expression s13) (GOTO relational_expression s14) (GOTO equality_expression s15) (GOTO and_expression s184))
 (STATE s184 (COMMENT exclusive_or_expression "=>" exclusive_or_expression CARROT and_expression ".") (COMMENT and_expression "=>" and_expression "." AMPERSAND equality_expression) (REDUCE (AND_OP) r51) (REDUCE (OR_OP) r51) (REDUCE (RPAREN) r51) (REDUCE (RBRACK) r51) (REDUCE (RCURLY) r51) (REDUCE (COMMA) r51) (SHIFT (AMPERSAND) s185) (REDUCE (CARROT) r51) (REDUCE (PIPE) r51) (REDUCE (QMARK) r51) (REDUCE (COLON) r51) (REDUCE (SEMICOLON) r51))
 (STATE s185 (COMMENT and_expression "=>" and_expression AMPERSAND "." equality_expression) (COMMENT equality_expression "=>" "." equality_expression NE_OP relational_expression) (COMMENT equality_expression "=>" "." equality_expression EQ_OP relational_expression) (COMMENT equality_expression "=>" "." relational_expression) (COMMENT relational_expression "=>" "." relational_expression GE_OP shift_expression) (COMMENT relational_expression "=>" "." relational_expression LE_OP shift_expression) (COMMENT relational_expression "=>" "." relational_expression GREATER_OP shift_expression) (COMMENT relational_expression "=>" "." relational_expression LESS_OP shift_expression) (COMMENT relational_expression "=>" "." shift_expression) (COMMENT shift_expression "=>" "." shift_expression RIGHT_OP additive_expression) (COMMENT shift_expression "=>" "." shift_expression LEFT_OP additive_expression) (COMMENT shift_expression "=>" "." additive_expression) (COMMENT additive_expression "=>" "." additive_expression MINUS multiplicative_expression) (COMMENT additive_expression "=>" "." additive_expression PLUS multiplicative_expression) (COMMENT additive_expression "=>" "." multiplicative_expression) (COMMENT multiplicative_expression "=>" "." multiplicative_expression AMPERSAND cast_expression) (COMMENT multiplicative_expression "=>" "." multiplicative_expression FORWARD_SLASH cast_expression) (COMMENT multiplicative_expression "=>" "." multiplicative_expression STAR cast_expression) (COMMENT multiplicative_expression "=>" "." cast_expression) (COMMENT cast_expression "=>" "." LPAREN type_name RPAREN cast_expression) (COMMENT cast_expression "=>" "." unary_expression) (COMMENT unary_operator "=>" "." BANG) (COMMENT unary_operator "=>" "." TWIDLE) (COMMENT unary_operator "=>" "." MINUS) (COMMENT unary_operator "=>" "." PLUS) (COMMENT unary_operator "=>" "." STAR) (COMMENT unary_operator "=>" "." AMPERSAND) (COMMENT unary_expression "=>" "." SIZEOF LPAREN type_name RPAREN) (COMMENT unary_expression "=>" "." SIZEOF unary_expression) (COMMENT unary_expression "=>" "." unary_operator cast_expression) (COMMENT unary_expression "=>" "." DEC_OP unary_expression) (COMMENT unary_expression "=>" "." INC_OP unary_expression) (COMMENT unary_expression "=>" "." postfix_expression) (COMMENT postfix_expression "=>" "." postfix_expression DEC_OP) (COMMENT postfix_expression "=>" "." postfix_expression INC_OP) (COMMENT postfix_expression "=>" "." postfix_expression PTR_OP IDENTIFIER) (COMMENT postfix_expression "=>" "." postfix_expression DOT IDENTIFIER) (COMMENT postfix_expression "=>" "." postfix_expression LPAREN argument_expression_list RPAREN) (COMMENT postfix_expression "=>" "." postfix_expression LPAREN RPAREN) (COMMENT postfix_expression "=>" "." postfix_expression LBRACK expression RBRACK) (COMMENT postfix_expression "=>" "." primary_expression) (COMMENT primary_expression "=>" "." LPAREN expression RPAREN) (COMMENT primary_expression "=>" "." STRING_LITERAL) (COMMENT primary_expression "=>" "." CONSTANT) (COMMENT primary_expression "=>" "." IDENTIFIER) (SHIFT (IDENTIFIER) s2) (SHIFT (CONSTANT) s3) (SHIFT (STRING_LITERAL) s4) (SHIFT (SIZEOF) s24) (SHIFT (INC_OP) s25) (SHIFT (DEC_OP) s26) (SHIFT (LPAREN) s27) (SHIFT (AMPERSAND) s28) (SHIFT (STAR) s29) (SHIFT (PLUS) s30) (SHIFT (MINUS) s31) (SHIFT (TWIDLE) s32) (SHIFT (BANG) s33) (GOTO primary_expression s6) (GOTO postfix_expression s7) (GOTO unary_expression s62) (GOTO unary_operator s9) (GOTO cast_expression s10) (GOTO multiplicative_expression s11) (GOTO additive_expression s12) (GOTO shift_expression s13) (GOTO relational_expression s14) (GOTO equality_expression s186))
 (STATE s186 (COMMENT and_expression "=>" and_expression AMPERSAND equality_expression ".") (COMMENT equality_expression "=>" equality_expression "." NE_OP relational_expression) (COMMENT equality_expression "=>" equality_expression "." EQ_OP relational_expression) (SHIFT (EQ_OP) s187) (SHIFT (NE_OP) s188) (REDUCE (AND_OP) r49) (REDUCE (OR_OP) r49) (REDUCE (RPAREN) r49) (REDUCE (RBRACK) r49) (REDUCE (RCURLY) r49) (REDUCE (COMMA) r49) (REDUCE (AMPERSAND) r49) (REDUCE (CARROT) r49) (REDUCE (PIPE) r49) (REDUCE (QMARK) r49) (REDUCE (COLON) r49) (REDUCE (SEMICOLON) r49))
 (STATE s187 (COMMENT equality_expression "=>" equality_expression EQ_OP "." relational_expression) (COMMENT relational_expression "=>" "." relational_expression GE_OP shift_expression) (COMMENT relational_expression "=>" "." relational_expression LE_OP shift_expression) (COMMENT relational_expression "=>" "." relational_expression GREATER_OP shift_expression) (COMMENT relational_expression "=>" "." relational_expression LESS_OP shift_expression) (COMMENT relational_expression "=>" "." shift_expression) (COMMENT shift_expression "=>" "." shift_expression RIGHT_OP additive_expression) (COMMENT shift_expression "=>" "." shift_expression LEFT_OP additive_expression) (COMMENT shift_expression "=>" "." additive_expression) (COMMENT additive_expression "=>" "." additive_expression MINUS multiplicative_expression) (COMMENT additive_expression "=>" "." additive_expression PLUS multiplicative_expression) (COMMENT additive_expression "=>" "." multiplicative_expression) (COMMENT multiplicative_expression "=>" "." multiplicative_expression AMPERSAND cast_expression) (COMMENT multiplicative_expression "=>" "." multiplicative_expression FORWARD_SLASH cast_expression) (COMMENT multiplicative_expression "=>" "." multiplicative_expression STAR cast_expression) (COMMENT multiplicative_expression "=>" "." cast_expression) (COMMENT cast_expression "=>" "." LPAREN type_name RPAREN cast_expression) (COMMENT cast_expression "=>" "." unary_expression) (COMMENT unary_operator "=>" "." BANG) (COMMENT unary_operator "=>" "." TWIDLE) (COMMENT unary_operator "=>" "." MINUS) (COMMENT unary_operator "=>" "." PLUS) (COMMENT unary_operator "=>" "." STAR) (COMMENT unary_operator "=>" "." AMPERSAND) (COMMENT unary_expression "=>" "." SIZEOF LPAREN type_name RPAREN) (COMMENT unary_expression "=>" "." SIZEOF unary_expression) (COMMENT unary_expression "=>" "." unary_operator cast_expression) (COMMENT unary_expression "=>" "." DEC_OP unary_expression) (COMMENT unary_expression "=>" "." INC_OP unary_expression) (COMMENT unary_expression "=>" "." postfix_expression) (COMMENT postfix_expression "=>" "." postfix_expression DEC_OP) (COMMENT postfix_expression "=>" "." postfix_expression INC_OP) (COMMENT postfix_expression "=>" "." postfix_expression PTR_OP IDENTIFIER) (COMMENT postfix_expression "=>" "." postfix_expression DOT IDENTIFIER) (COMMENT postfix_expression "=>" "." postfix_expression LPAREN argument_expression_list RPAREN) (COMMENT postfix_expression "=>" "." postfix_expression LPAREN RPAREN) (COMMENT postfix_expression "=>" "." postfix_expression LBRACK expression RBRACK) (COMMENT postfix_expression "=>" "." primary_expression) (COMMENT primary_expression "=>" "." LPAREN expression RPAREN) (COMMENT primary_expression "=>" "." STRING_LITERAL) (COMMENT primary_expression "=>" "." CONSTANT) (COMMENT primary_expression "=>" "." IDENTIFIER) (SHIFT (IDENTIFIER) s2) (SHIFT (CONSTANT) s3) (SHIFT (STRING_LITERAL) s4) (SHIFT (SIZEOF) s24) (SHIFT (INC_OP) s25) (SHIFT (DEC_OP) s26) (SHIFT (LPAREN) s27) (SHIFT (AMPERSAND) s28) (SHIFT (STAR) s29) (SHIFT (PLUS) s30) (SHIFT (MINUS) s31) (SHIFT (TWIDLE) s32) (SHIFT (BANG) s33) (GOTO primary_expression s6) (GOTO postfix_expression s7) (GOTO unary_expression s62) (GOTO unary_operator s9) (GOTO cast_expression s10) (GOTO multiplicative_expression s11) (GOTO additive_expression s12) (GOTO shift_expression s13) (GOTO relational_expression s212))
 (STATE s188 (COMMENT equality_expression "=>" equality_expression NE_OP "." relational_expression) (COMMENT relational_expression "=>" "." relational_expression GE_OP shift_expression) (COMMENT relational_expression "=>" "." relational_expression LE_OP shift_expression) (COMMENT relational_expression "=>" "." relational_expression GREATER_OP shift_expression) (COMMENT relational_expression "=>" "." relational_expression LESS_OP shift_expression) (COMMENT relational_expression "=>" "." shift_expression) (COMMENT shift_expression "=>" "." shift_expression RIGHT_OP additive_expression) (COMMENT shift_expression "=>" "." shift_expression LEFT_OP additive_expression) (COMMENT shift_expression "=>" "." additive_expression) (COMMENT additive_expression "=>" "." additive_expression MINUS multiplicative_expression) (COMMENT additive_expression "=>" "." additive_expression PLUS multiplicative_expression) (COMMENT additive_expression "=>" "." multiplicative_expression) (COMMENT multiplicative_expression "=>" "." multiplicative_expression AMPERSAND cast_expression) (COMMENT multiplicative_expression "=>" "." multiplicative_expression FORWARD_SLASH cast_expression) (COMMENT multiplicative_expression "=>" "." multiplicative_expression STAR cast_expression) (COMMENT multiplicative_expression "=>" "." cast_expression) (COMMENT cast_expression "=>" "." LPAREN type_name RPAREN cast_expression) (COMMENT cast_expression "=>" "." unary_expression) (COMMENT unary_operator "=>" "." BANG) (COMMENT unary_operator "=>" "." TWIDLE) (COMMENT unary_operator "=>" "." MINUS) (COMMENT unary_operator "=>" "." PLUS) (COMMENT unary_operator "=>" "." STAR) (COMMENT unary_operator "=>" "." AMPERSAND) (COMMENT unary_expression "=>" "." SIZEOF LPAREN type_name RPAREN) (COMMENT unary_expression "=>" "." SIZEOF unary_expression) (COMMENT unary_expression "=>" "." unary_operator cast_expression) (COMMENT unary_expression "=>" "." DEC_OP unary_expression) (COMMENT unary_expression "=>" "." INC_OP unary_expression) (COMMENT unary_expression "=>" "." postfix_expression) (COMMENT postfix_expression "=>" "." postfix_expression DEC_OP) (COMMENT postfix_expression "=>" "." postfix_expression INC_OP) (COMMENT postfix_expression "=>" "." postfix_expression PTR_OP IDENTIFIER) (COMMENT postfix_expression "=>" "." postfix_expression DOT IDENTIFIER) (COMMENT postfix_expression "=>" "." postfix_expression LPAREN argument_expression_list RPAREN) (COMMENT postfix_expression "=>" "." postfix_expression LPAREN RPAREN) (COMMENT postfix_expression "=>" "." postfix_expression LBRACK expression RBRACK) (COMMENT postfix_expression "=>" "." primary_expression) (COMMENT primary_expression "=>" "." LPAREN expression RPAREN) (COMMENT primary_expression "=>" "." STRING_LITERAL) (COMMENT primary_expression "=>" "." CONSTANT) (COMMENT primary_expression "=>" "." IDENTIFIER) (SHIFT (IDENTIFIER) s2) (SHIFT (CONSTANT) s3) (SHIFT (STRING_LITERAL) s4) (SHIFT (SIZEOF) s24) (SHIFT (INC_OP) s25) (SHIFT (DEC_OP) s26) (SHIFT (LPAREN) s27) (SHIFT (AMPERSAND) s28) (SHIFT (STAR) s29) (SHIFT (PLUS) s30) (SHIFT (MINUS) s31) (SHIFT (TWIDLE) s32) (SHIFT (BANG) s33) (GOTO primary_expression s6) (GOTO postfix_expression s7) (GOTO unary_expression s62) (GOTO unary_operator s9) (GOTO cast_expression s10) (GOTO multiplicative_expression s11) (GOTO additive_expression s12) (GOTO shift_expression s13) (GOTO relational_expression s189))
 (STATE s189 (COMMENT equality_expression "=>" equality_expression NE_OP relational_expression ".") (COMMENT relational_expression "=>" relational_expression "." GE_OP shift_expression) (COMMENT relational_expression "=>" relational_expression "." LE_OP shift_expression) (COMMENT relational_expression "=>" relational_expression "." GREATER_OP shift_expression) (COMMENT relational_expression "=>" relational_expression "." LESS_OP shift_expression) (SHIFT (LE_OP) s190) (SHIFT (GE_OP) s191) (REDUCE (EQ_OP) r47) (REDUCE (NE_OP) r47) (REDUCE (AND_OP) r47) (REDUCE (OR_OP) r47) (REDUCE (RPAREN) r47) (REDUCE (RBRACK) r47) (REDUCE (RCURLY) r47) (REDUCE (COMMA) r47) (REDUCE (AMPERSAND) r47) (SHIFT (LESS_OP) s192) (SHIFT (GREATER_OP) s193) (REDUCE (CARROT) r47) (REDUCE (PIPE) r47) (REDUCE (QMARK) r47) (REDUCE (COLON) r47) (REDUCE (SEMICOLON) r47))
 (STATE s190 (COMMENT relational_expression "=>" relational_expression LE_OP "." shift_expression) (COMMENT shift_expression "=>" "." shift_expression RIGHT_OP additive_expression) (COMMENT shift_expression "=>" "." shift_expression LEFT_OP additive_expression) (COMMENT shift_expression "=>" "." additive_expression) (COMMENT additive_expression "=>" "." additive_expression MINUS multiplicative_expression) (COMMENT additive_expression "=>" "." additive_expression PLUS multiplicative_expression) (COMMENT additive_expression "=>" "." multiplicative_expression) (COMMENT multiplicative_expression "=>" "." multiplicative_expression AMPERSAND cast_expression) (COMMENT multiplicative_expression "=>" "." multiplicative_expression FORWARD_SLASH cast_expression) (COMMENT multiplicative_expression "=>" "." multiplicative_expression STAR cast_expression) (COMMENT multiplicative_expression "=>" "." cast_expression) (COMMENT cast_expression "=>" "." LPAREN type_name RPAREN cast_expression) (COMMENT cast_expression "=>" "." unary_expression) (COMMENT unary_operator "=>" "." BANG) (COMMENT unary_operator "=>" "." TWIDLE) (COMMENT unary_operator "=>" "." MINUS) (COMMENT unary_operator "=>" "." PLUS) (COMMENT unary_operator "=>" "." STAR) (COMMENT unary_operator "=>" "." AMPERSAND) (COMMENT unary_expression "=>" "." SIZEOF LPAREN type_name RPAREN) (COMMENT unary_expression "=>" "." SIZEOF unary_expression) (COMMENT unary_expression "=>" "." unary_operator cast_expression) (COMMENT unary_expression "=>" "." DEC_OP unary_expression) (COMMENT unary_expression "=>" "." INC_OP unary_expression) (COMMENT unary_expression "=>" "." postfix_expression) (COMMENT postfix_expression "=>" "." postfix_expression DEC_OP) (COMMENT postfix_expression "=>" "." postfix_expression INC_OP) (COMMENT postfix_expression "=>" "." postfix_expression PTR_OP IDENTIFIER) (COMMENT postfix_expression "=>" "." postfix_expression DOT IDENTIFIER) (COMMENT postfix_expression "=>" "." postfix_expression LPAREN argument_expression_list RPAREN) (COMMENT postfix_expression "=>" "." postfix_expression LPAREN RPAREN) (COMMENT postfix_expression "=>" "." postfix_expression LBRACK expression RBRACK) (COMMENT postfix_expression "=>" "." primary_expression) (COMMENT primary_expression "=>" "." LPAREN expression RPAREN) (COMMENT primary_expression "=>" "." STRING_LITERAL) (COMMENT primary_expression "=>" "." CONSTANT) (COMMENT primary_expression "=>" "." IDENTIFIER) (SHIFT (IDENTIFIER) s2) (SHIFT (CONSTANT) s3) (SHIFT (STRING_LITERAL) s4) (SHIFT (SIZEOF) s24) (SHIFT (INC_OP) s25) (SHIFT (DEC_OP) s26) (SHIFT (LPAREN) s27) (SHIFT (AMPERSAND) s28) (SHIFT (STAR) s29) (SHIFT (PLUS) s30) (SHIFT (MINUS) s31) (SHIFT (TWIDLE) s32) (SHIFT (BANG) s33) (GOTO primary_expression s6) (GOTO postfix_expression s7) (GOTO unary_expression s62) (GOTO unary_operator s9) (GOTO cast_expression s10) (GOTO multiplicative_expression s11) (GOTO additive_expression s12) (GOTO shift_expression s211))
 (STATE s191 (COMMENT relational_expression "=>" relational_expression GE_OP "." shift_expression) (COMMENT shift_expression "=>" "." shift_expression RIGHT_OP additive_expression) (COMMENT shift_expression "=>" "." shift_expression LEFT_OP additive_expression) (COMMENT shift_expression "=>" "." additive_expression) (COMMENT additive_expression "=>" "." additive_expression MINUS multiplicative_expression) (COMMENT additive_expression "=>" "." additive_expression PLUS multiplicative_expression) (COMMENT additive_expression "=>" "." multiplicative_expression) (COMMENT multiplicative_expression "=>" "." multiplicative_expression AMPERSAND cast_expression) (COMMENT multiplicative_expression "=>" "." multiplicative_expression FORWARD_SLASH cast_expression) (COMMENT multiplicative_expression "=>" "." multiplicative_expression STAR cast_expression) (COMMENT multiplicative_expression "=>" "." cast_expression) (COMMENT cast_expression "=>" "." LPAREN type_name RPAREN cast_expression) (COMMENT cast_expression "=>" "." unary_expression) (COMMENT unary_operator "=>" "." BANG) (COMMENT unary_operator "=>" "." TWIDLE) (COMMENT unary_operator "=>" "." MINUS) (COMMENT unary_operator "=>" "." PLUS) (COMMENT unary_operator "=>" "." STAR) (COMMENT unary_operator "=>" "." AMPERSAND) (COMMENT unary_expression "=>" "." SIZEOF LPAREN type_name RPAREN) (COMMENT unary_expression "=>" "." SIZEOF unary_expression) (COMMENT unary_expression "=>" "." unary_operator cast_expression) (COMMENT unary_expression "=>" "." DEC_OP unary_expression) (COMMENT unary_expression "=>" "." INC_OP unary_expression) (COMMENT unary_expression "=>" "." postfix_expression) (COMMENT postfix_expression "=>" "." postfix_expression DEC_OP) (COMMENT postfix_expression "=>" "." postfix_expression INC_OP) (COMMENT postfix_expression "=>" "." postfix_expression PTR_OP IDENTIFIER) (COMMENT postfix_expression "=>" "." postfix_expression DOT IDENTIFIER) (COMMENT postfix_expression "=>" "." postfix_expression LPAREN argument_expression_list RPAREN) (COMMENT postfix_expression "=>" "." postfix_expression LPAREN RPAREN) (COMMENT postfix_expression "=>" "." postfix_expression LBRACK expression RBRACK) (COMMENT postfix_expression "=>" "." primary_expression) (COMMENT primary_expression "=>" "." LPAREN expression RPAREN) (COMMENT primary_expression "=>" "." STRING_LITERAL) (COMMENT primary_expression "=>" "." CONSTANT) (COMMENT primary_expression "=>" "." IDENTIFIER) (SHIFT (IDENTIFIER) s2) (SHIFT (CONSTANT) s3) (SHIFT (STRING_LITERAL) s4) (SHIFT (SIZEOF) s24) (SHIFT (INC_OP) s25) (SHIFT (DEC_OP) s26) (SHIFT (LPAREN) s27) (SHIFT (AMPERSAND) s28) (SHIFT (STAR) s29) (SHIFT (PLUS) s30) (SHIFT (MINUS) s31) (SHIFT (TWIDLE) s32) (SHIFT (BANG) s33) (GOTO primary_expression s6) (GOTO postfix_expression s7) (GOTO unary_expression s62) (GOTO unary_operator s9) (GOTO cast_expression s10) (GOTO multiplicative_expression s11) (GOTO additive_expression s12) (GOTO shift_expression s210))
 (STATE s192 (COMMENT relational_expression "=>" relational_expression LESS_OP "." shift_expression) (COMMENT shift_expression "=>" "." shift_expression RIGHT_OP additive_expression) (COMMENT shift_expression "=>" "." shift_expression LEFT_OP additive_expression) (COMMENT shift_expression "=>" "." additive_expression) (COMMENT additive_expression "=>" "." additive_expression MINUS multiplicative_expression) (COMMENT additive_expression "=>" "." additive_expression PLUS multiplicative_expression) (COMMENT additive_expression "=>" "." multiplicative_expression) (COMMENT multiplicative_expression "=>" "." multiplicative_expression AMPERSAND cast_expression) (COMMENT multiplicative_expression "=>" "." multiplicative_expression FORWARD_SLASH cast_expression) (COMMENT multiplicative_expression "=>" "." multiplicative_expression STAR cast_expression) (COMMENT multiplicative_expression "=>" "." cast_expression) (COMMENT cast_expression "=>" "." LPAREN type_name RPAREN cast_expression) (COMMENT cast_expression "=>" "." unary_expression) (COMMENT unary_operator "=>" "." BANG) (COMMENT unary_operator "=>" "." TWIDLE) (COMMENT unary_operator "=>" "." MINUS) (COMMENT unary_operator "=>" "." PLUS) (COMMENT unary_operator "=>" "." STAR) (COMMENT unary_operator "=>" "." AMPERSAND) (COMMENT unary_expression "=>" "." SIZEOF LPAREN type_name RPAREN) (COMMENT unary_expression "=>" "." SIZEOF unary_expression) (COMMENT unary_expression "=>" "." unary_operator cast_expression) (COMMENT unary_expression "=>" "." DEC_OP unary_expression) (COMMENT unary_expression "=>" "." INC_OP unary_expression) (COMMENT unary_expression "=>" "." postfix_expression) (COMMENT postfix_expression "=>" "." postfix_expression DEC_OP) (COMMENT postfix_expression "=>" "." postfix_expression INC_OP) (COMMENT postfix_expression "=>" "." postfix_expression PTR_OP IDENTIFIER) (COMMENT postfix_expression "=>" "." postfix_expression DOT IDENTIFIER) (COMMENT postfix_expression "=>" "." postfix_expression LPAREN argument_expression_list RPAREN) (COMMENT postfix_expression "=>" "." postfix_expression LPAREN RPAREN) (COMMENT postfix_expression "=>" "." postfix_expression LBRACK expression RBRACK) (COMMENT postfix_expression "=>" "." primary_expression) (COMMENT primary_expression "=>" "." LPAREN expression RPAREN) (COMMENT primary_expression "=>" "." STRING_LITERAL) (COMMENT primary_expression "=>" "." CONSTANT) (COMMENT primary_expression "=>" "." IDENTIFIER) (SHIFT (IDENTIFIER) s2) (SHIFT (CONSTANT) s3) (SHIFT (STRING_LITERAL) s4) (SHIFT (SIZEOF) s24) (SHIFT (INC_OP) s25) (SHIFT (DEC_OP) s26) (SHIFT (LPAREN) s27) (SHIFT (AMPERSAND) s28) (SHIFT (STAR) s29) (SHIFT (PLUS) s30) (SHIFT (MINUS) s31) (SHIFT (TWIDLE) s32) (SHIFT (BANG) s33) (GOTO primary_expression s6) (GOTO postfix_expression s7) (GOTO unary_expression s62) (GOTO unary_operator s9) (GOTO cast_expression s10) (GOTO multiplicative_expression s11) (GOTO additive_expression s12) (GOTO shift_expression s209))
 (STATE s193 (COMMENT relational_expression "=>" relational_expression GREATER_OP "." shift_expression) (COMMENT shift_expression "=>" "." shift_expression RIGHT_OP additive_expression) (COMMENT shift_expression "=>" "." shift_expression LEFT_OP additive_expression) (COMMENT shift_expression "=>" "." additive_expression) (COMMENT additive_expression "=>" "." additive_expression MINUS multiplicative_expression) (COMMENT additive_expression "=>" "." additive_expression PLUS multiplicative_expression) (COMMENT additive_expression "=>" "." multiplicative_expression) (COMMENT multiplicative_expression "=>" "." multiplicative_expression AMPERSAND cast_expression) (COMMENT multiplicative_expression "=>" "." multiplicative_expression FORWARD_SLASH cast_expression) (COMMENT multiplicative_expression "=>" "." multiplicative_expression STAR cast_expression) (COMMENT multiplicative_expression "=>" "." cast_expression) (COMMENT cast_expression "=>" "." LPAREN type_name RPAREN cast_expression) (COMMENT cast_expression "=>" "." unary_expression) (COMMENT unary_operator "=>" "." BANG) (COMMENT unary_operator "=>" "." TWIDLE) (COMMENT unary_operator "=>" "." MINUS) (COMMENT unary_operator "=>" "." PLUS) (COMMENT unary_operator "=>" "." STAR) (COMMENT unary_operator "=>" "." AMPERSAND) (COMMENT unary_expression "=>" "." SIZEOF LPAREN type_name RPAREN) (COMMENT unary_expression "=>" "." SIZEOF unary_expression) (COMMENT unary_expression "=>" "." unary_operator cast_expression) (COMMENT unary_expression "=>" "." DEC_OP unary_expression) (COMMENT unary_expression "=>" "." INC_OP unary_expression) (COMMENT unary_expression "=>" "." postfix_expression) (COMMENT postfix_expression "=>" "." postfix_expression DEC_OP) (COMMENT postfix_expression "=>" "." postfix_expression INC_OP) (COMMENT postfix_expression "=>" "." postfix_expression PTR_OP IDENTIFIER) (COMMENT postfix_expression "=>" "." postfix_expression DOT IDENTIFIER) (COMMENT postfix_expression "=>" "." postfix_expression LPAREN argument_expression_list RPAREN) (COMMENT postfix_expression "=>" "." postfix_expression LPAREN RPAREN) (COMMENT postfix_expression "=>" "." postfix_expression LBRACK expression RBRACK) (COMMENT postfix_expression "=>" "." primary_expression) (COMMENT primary_expression "=>" "." LPAREN expression RPAREN) (COMMENT primary_expression "=>" "." STRING_LITERAL) (COMMENT primary_expression "=>" "." CONSTANT) (COMMENT primary_expression "=>" "." IDENTIFIER) (SHIFT (IDENTIFIER) s2) (SHIFT (CONSTANT) s3) (SHIFT (STRING_LITERAL) s4) (SHIFT (SIZEOF) s24) (SHIFT (INC_OP) s25) (SHIFT (DEC_OP) s26) (SHIFT (LPAREN) s27) (SHIFT (AMPERSAND) s28) (SHIFT (STAR) s29) (SHIFT (PLUS) s30) (SHIFT (MINUS) s31) (SHIFT (TWIDLE) s32) (SHIFT (BANG) s33) (GOTO primary_expression s6) (GOTO postfix_expression s7) (GOTO unary_expression s62) (GOTO unary_operator s9) (GOTO cast_expression s10) (GOTO multiplicative_expression s11) (GOTO additive_expression s12) (GOTO shift_expression s194))
 (STATE s194 (COMMENT relational_expression "=>" relational_expression GREATER_OP shift_expression ".") (COMMENT shift_expression "=>" shift_expression "." RIGHT_OP additive_expression) (COMMENT shift_expression "=>" shift_expression "." LEFT_OP additive_expression) (SHIFT (LEFT_OP) s195) (SHIFT (RIGHT_OP) s196) (REDUCE (LE_OP) r42) (REDUCE (GE_OP) r42) (REDUCE (EQ_OP) r42) (REDUCE (NE_OP) r42) (REDUCE (AND_OP) r42) (REDUCE (OR_OP) r42) (REDUCE (RPAREN) r42) (REDUCE (RBRACK) r42) (REDUCE (RCURLY) r42) (REDUCE (COMMA) r42) (REDUCE (AMPERSAND) r42) (REDUCE (LESS_OP) r42) (REDUCE (GREATER_OP) r42) (REDUCE (CARROT) r42) (REDUCE (PIPE) r42) (REDUCE (QMARK) r42) (REDUCE (COLON) r42) (REDUCE (SEMICOLON) r42))
 (STATE s195 (COMMENT shift_expression "=>" shift_expression LEFT_OP "." additive_expression) (COMMENT additive_expression "=>" "." additive_expression MINUS multiplicative_expression) (COMMENT additive_expression "=>" "." additive_expression PLUS multiplicative_expression) (COMMENT additive_expression "=>" "." multiplicative_expression) (COMMENT multiplicative_expression "=>" "." multiplicative_expression AMPERSAND cast_expression) (COMMENT multiplicative_expression "=>" "." multiplicative_expression FORWARD_SLASH cast_expression) (COMMENT multiplicative_expression "=>" "." multiplicative_expression STAR cast_expression) (COMMENT multiplicative_expression "=>" "." cast_expression) (COMMENT cast_expression "=>" "." LPAREN type_name RPAREN cast_expression) (COMMENT cast_expression "=>" "." unary_expression) (COMMENT unary_operator "=>" "." BANG) (COMMENT unary_operator "=>" "." TWIDLE) (COMMENT unary_operator "=>" "." MINUS) (COMMENT unary_operator "=>" "." PLUS) (COMMENT unary_operator "=>" "." STAR) (COMMENT unary_operator "=>" "." AMPERSAND) (COMMENT unary_expression "=>" "." SIZEOF LPAREN type_name RPAREN) (COMMENT unary_expression "=>" "." SIZEOF unary_expression) (COMMENT unary_expression "=>" "." unary_operator cast_expression) (COMMENT unary_expression "=>" "." DEC_OP unary_expression) (COMMENT unary_expression "=>" "." INC_OP unary_expression) (COMMENT unary_expression "=>" "." postfix_expression) (COMMENT postfix_expression "=>" "." postfix_expression DEC_OP) (COMMENT postfix_expression "=>" "." postfix_expression INC_OP) (COMMENT postfix_expression "=>" "." postfix_expression PTR_OP IDENTIFIER) (COMMENT postfix_expression "=>" "." postfix_expression DOT IDENTIFIER) (COMMENT postfix_expression "=>" "." postfix_expression LPAREN argument_expression_list RPAREN) (COMMENT postfix_expression "=>" "." postfix_expression LPAREN RPAREN) (COMMENT postfix_expression "=>" "." postfix_expression LBRACK expression RBRACK) (COMMENT postfix_expression "=>" "." primary_expression) (COMMENT primary_expression "=>" "." LPAREN expression RPAREN) (COMMENT primary_expression "=>" "." STRING_LITERAL) (COMMENT primary_expression "=>" "." CONSTANT) (COMMENT primary_expression "=>" "." IDENTIFIER) (SHIFT (IDENTIFIER) s2) (SHIFT (CONSTANT) s3) (SHIFT (STRING_LITERAL) s4) (SHIFT (SIZEOF) s24) (SHIFT (INC_OP) s25) (SHIFT (DEC_OP) s26) (SHIFT (LPAREN) s27) (SHIFT (AMPERSAND) s28) (SHIFT (STAR) s29) (SHIFT (PLUS) s30) (SHIFT (MINUS) s31) (SHIFT (TWIDLE) s32) (SHIFT (BANG) s33) (GOTO primary_expression s6) (GOTO postfix_expression s7) (GOTO unary_expression s62) (GOTO unary_operator s9) (GOTO cast_expression s10) (GOTO multiplicative_expression s11) (GOTO additive_expression s208))
 (STATE s196 (COMMENT shift_expression "=>" shift_expression RIGHT_OP "." additive_expression) (COMMENT additive_expression "=>" "." additive_expression MINUS multiplicative_expression) (COMMENT additive_expression "=>" "." additive_expression PLUS multiplicative_expression) (COMMENT additive_expression "=>" "." multiplicative_expression) (COMMENT multiplicative_expression "=>" "." multiplicative_expression AMPERSAND cast_expression) (COMMENT multiplicative_expression "=>" "." multiplicative_expression FORWARD_SLASH cast_expression) (COMMENT multiplicative_expression "=>" "." multiplicative_expression STAR cast_expression) (COMMENT multiplicative_expression "=>" "." cast_expression) (COMMENT cast_expression "=>" "." LPAREN type_name RPAREN cast_expression) (COMMENT cast_expression "=>" "." unary_expression) (COMMENT unary_operator "=>" "." BANG) (COMMENT unary_operator "=>" "." TWIDLE) (COMMENT unary_operator "=>" "." MINUS) (COMMENT unary_operator "=>" "." PLUS) (COMMENT unary_operator "=>" "." STAR) (COMMENT unary_operator "=>" "." AMPERSAND) (COMMENT unary_expression "=>" "." SIZEOF LPAREN type_name RPAREN) (COMMENT unary_expression "=>" "." SIZEOF unary_expression) (COMMENT unary_expression "=>" "." unary_operator cast_expression) (COMMENT unary_expression "=>" "." DEC_OP unary_expression) (COMMENT unary_expression "=>" "." INC_OP unary_expression) (COMMENT unary_expression "=>" "." postfix_expression) (COMMENT postfix_expression "=>" "." postfix_expression DEC_OP) (COMMENT postfix_expression "=>" "." postfix_expression INC_OP) (COMMENT postfix_expression "=>" "." postfix_expression PTR_OP IDENTIFIER) (COMMENT postfix_expression "=>" "." postfix_expression DOT IDENTIFIER) (COMMENT postfix_expression "=>" "." postfix_expression LPAREN argument_expression_list RPAREN) (COMMENT postfix_expression "=>" "." postfix_expression LPAREN RPAREN) (COMMENT postfix_expression "=>" "." postfix_expression LBRACK expression RBRACK) (COMMENT postfix_expression "=>" "." primary_expression) (COMMENT primary_expression "=>" "." LPAREN expression RPAREN) (COMMENT primary_expression "=>" "." STRING_LITERAL) (COMMENT primary_expression "=>" "." CONSTANT) (COMMENT primary_expression "=>" "." IDENTIFIER) (SHIFT (IDENTIFIER) s2) (SHIFT (CONSTANT) s3) (SHIFT (STRING_LITERAL) s4) (SHIFT (SIZEOF) s24) (SHIFT (INC_OP) s25) (SHIFT (DEC_OP) s26) (SHIFT (LPAREN) s27) (SHIFT (AMPERSAND) s28) (SHIFT (STAR) s29) (SHIFT (PLUS) s30) (SHIFT (MINUS) s31) (SHIFT (TWIDLE) s32) (SHIFT (BANG) s33) (GOTO primary_expression s6) (GOTO postfix_expression s7) (GOTO unary_expression s62) (GOTO unary_operator s9) (GOTO cast_expression s10) (GOTO multiplicative_expression s11) (GOTO additive_expression s197))
 (STATE s197 (COMMENT shift_expression "=>" shift_expression RIGHT_OP additive_expression ".") (COMMENT additive_expression "=>" additive_expression "." MINUS multiplicative_expression) (COMMENT additive_expression "=>" additive_expression "." PLUS multiplicative_expression) (REDUCE (LEFT_OP) r39) (REDUCE (RIGHT_OP) r39) (REDUCE (LE_OP) r39) (REDUCE (GE_OP) r39) (REDUCE (EQ_OP) r39) (REDUCE (NE_OP) r39) (REDUCE (AND_OP) r39) (REDUCE (OR_OP) r39) (REDUCE (RPAREN) r39) (REDUCE (RBRACK) r39) (REDUCE (RCURLY) r39) (REDUCE (COMMA) r39) (REDUCE (AMPERSAND) r39) (SHIFT (PLUS) s198) (SHIFT (MINUS) s199) (REDUCE (LESS_OP) r39) (REDUCE (GREATER_OP) r39) (REDUCE (CARROT) r39) (REDUCE (PIPE) r39) (REDUCE (QMARK) r39) (REDUCE (COLON) r39) (REDUCE (SEMICOLON) r39))
 (STATE s198 (COMMENT additive_expression "=>" additive_expression PLUS "." multiplicative_expression) (COMMENT multiplicative_expression "=>" "." multiplicative_expression AMPERSAND cast_expression) (COMMENT multiplicative_expression "=>" "." multiplicative_expression FORWARD_SLASH cast_expression) (COMMENT multiplicative_expression "=>" "." multiplicative_expression STAR cast_expression) (COMMENT multiplicative_expression "=>" "." cast_expression) (COMMENT cast_expression "=>" "." LPAREN type_name RPAREN cast_expression) (COMMENT cast_expression "=>" "." unary_expression) (COMMENT unary_operator "=>" "." BANG) (COMMENT unary_operator "=>" "." TWIDLE) (COMMENT unary_operator "=>" "." MINUS) (COMMENT unary_operator "=>" "." PLUS) (COMMENT unary_operator "=>" "." STAR) (COMMENT unary_operator "=>" "." AMPERSAND) (COMMENT unary_expression "=>" "." SIZEOF LPAREN type_name RPAREN) (COMMENT unary_expression "=>" "." SIZEOF unary_expression) (COMMENT unary_expression "=>" "." unary_operator cast_expression) (COMMENT unary_expression "=>" "." DEC_OP unary_expression) (COMMENT unary_expression "=>" "." INC_OP unary_expression) (COMMENT unary_expression "=>" "." postfix_expression) (COMMENT postfix_expression "=>" "." postfix_expression DEC_OP) (COMMENT postfix_expression "=>" "." postfix_expression INC_OP) (COMMENT postfix_expression "=>" "." postfix_expression PTR_OP IDENTIFIER) (COMMENT postfix_expression "=>" "." postfix_expression DOT IDENTIFIER) (COMMENT postfix_expression "=>" "." postfix_expression LPAREN argument_expression_list RPAREN) (COMMENT postfix_expression "=>" "." postfix_expression LPAREN RPAREN) (COMMENT postfix_expression "=>" "." postfix_expression LBRACK expression RBRACK) (COMMENT postfix_expression "=>" "." primary_expression) (COMMENT primary_expression "=>" "." LPAREN expression RPAREN) (COMMENT primary_expression "=>" "." STRING_LITERAL) (COMMENT primary_expression "=>" "." CONSTANT) (COMMENT primary_expression "=>" "." IDENTIFIER) (SHIFT (IDENTIFIER) s2) (SHIFT (CONSTANT) s3) (SHIFT (STRING_LITERAL) s4) (SHIFT (SIZEOF) s24) (SHIFT (INC_OP) s25) (SHIFT (DEC_OP) s26) (SHIFT (LPAREN) s27) (SHIFT (AMPERSAND) s28) (SHIFT (STAR) s29) (SHIFT (PLUS) s30) (SHIFT (MINUS) s31) (SHIFT (TWIDLE) s32) (SHIFT (BANG) s33) (GOTO primary_expression s6) (GOTO postfix_expression s7) (GOTO unary_expression s62) (GOTO unary_operator s9) (GOTO cast_expression s10) (GOTO multiplicative_expression s207))
 (STATE s199 (COMMENT additive_expression "=>" additive_expression MINUS "." multiplicative_expression) (COMMENT multiplicative_expression "=>" "." multiplicative_expression AMPERSAND cast_expression) (COMMENT multiplicative_expression "=>" "." multiplicative_expression FORWARD_SLASH cast_expression) (COMMENT multiplicative_expression "=>" "." multiplicative_expression STAR cast_expression) (COMMENT multiplicative_expression "=>" "." cast_expression) (COMMENT cast_expression "=>" "." LPAREN type_name RPAREN cast_expression) (COMMENT cast_expression "=>" "." unary_expression) (COMMENT unary_operator "=>" "." BANG) (COMMENT unary_operator "=>" "." TWIDLE) (COMMENT unary_operator "=>" "." MINUS) (COMMENT unary_operator "=>" "." PLUS) (COMMENT unary_operator "=>" "." STAR) (COMMENT unary_operator "=>" "." AMPERSAND) (COMMENT unary_expression "=>" "." SIZEOF LPAREN type_name RPAREN) (COMMENT unary_expression "=>" "." SIZEOF unary_expression) (COMMENT unary_expression "=>" "." unary_operator cast_expression) (COMMENT unary_expression "=>" "." DEC_OP unary_expression) (COMMENT unary_expression "=>" "." INC_OP unary_expression) (COMMENT unary_expression "=>" "." postfix_expression) (COMMENT postfix_expression "=>" "." postfix_expression DEC_OP) (COMMENT postfix_expression "=>" "." postfix_expression INC_OP) (COMMENT postfix_expression "=>" "." postfix_expression PTR_OP IDENTIFIER) (COMMENT postfix_expression "=>" "." postfix_expression DOT IDENTIFIER) (COMMENT postfix_expression "=>" "." postfix_expression LPAREN argument_expression_list RPAREN) (COMMENT postfix_expression "=>" "." postfix_expression LPAREN RPAREN) (COMMENT postfix_expression "=>" "." postfix_expression LBRACK expression RBRACK) (COMMENT postfix_expression "=>" "." primary_expression) (COMMENT primary_expression "=>" "." LPAREN expression RPAREN) (COMMENT primary_expression "=>" "." STRING_LITERAL) (COMMENT primary_expression "=>" "." CONSTANT) (COMMENT primary_expression "=>" "." IDENTIFIER) (SHIFT (IDENTIFIER) s2) (SHIFT (CONSTANT) s3) (SHIFT (STRING_LITERAL) s4) (SHIFT (SIZEOF) s24) (SHIFT (INC_OP) s25) (SHIFT (DEC_OP) s26) (SHIFT (LPAREN) s27) (SHIFT (AMPERSAND) s28) (SHIFT (STAR) s29) (SHIFT (PLUS) s30) (SHIFT (MINUS) s31) (SHIFT (TWIDLE) s32) (SHIFT (BANG) s33) (GOTO primary_expression s6) (GOTO postfix_expression s7) (GOTO unary_expression s62) (GOTO unary_operator s9) (GOTO cast_expression s10) (GOTO multiplicative_expression s200))
 (STATE s200 (COMMENT additive_expression "=>" additive_expression MINUS multiplicative_expression ".") (COMMENT multiplicative_expression "=>" multiplicative_expression "." AMPERSAND cast_expression) (COMMENT multiplicative_expression "=>" multiplicative_expression "." FORWARD_SLASH cast_expression) (COMMENT multiplicative_expression "=>" multiplicative_expression "." STAR cast_expression) (REDUCE (LEFT_OP) r36) (REDUCE (RIGHT_OP) r36) (REDUCE (LE_OP) r36) (REDUCE (GE_OP) r36) (REDUCE (EQ_OP) r36) (REDUCE (NE_OP) r36) (REDUCE (AND_OP) r36) (REDUCE (OR_OP) r36) (REDUCE (RPAREN) r36) (REDUCE (RBRACK) r36) (REDUCE (RCURLY) r36) (REDUCE (COMMA) r36) (COMMENT (REDUCE (AMPERSAND) r36)) (SHIFT (AMPERSAND) s201) (SHIFT (STAR) s202) (REDUCE (PLUS) r36) (REDUCE (MINUS) r36) (SHIFT (FORWARD_SLASH) s203) (REDUCE (LESS_OP) r36) (REDUCE (GREATER_OP) r36) (REDUCE (CARROT) r36) (REDUCE (PIPE) r36) (REDUCE (QMARK) r36) (REDUCE (COLON) r36) (REDUCE (SEMICOLON) r36))
 (STATE s201 (COMMENT multiplicative_expression "=>" multiplicative_expression AMPERSAND "." cast_expression) (COMMENT cast_expression "=>" "." LPAREN type_name RPAREN cast_expression) (COMMENT cast_expression "=>" "." unary_expression) (COMMENT unary_operator "=>" "." BANG) (COMMENT unary_operator "=>" "." TWIDLE) (COMMENT unary_operator "=>" "." MINUS) (COMMENT unary_operator "=>" "." PLUS) (COMMENT unary_operator "=>" "." STAR) (COMMENT unary_operator "=>" "." AMPERSAND) (COMMENT unary_expression "=>" "." SIZEOF LPAREN type_name RPAREN) (COMMENT unary_expression "=>" "." SIZEOF unary_expression) (COMMENT unary_expression "=>" "." unary_operator cast_expression) (COMMENT unary_expression "=>" "." DEC_OP unary_expression) (COMMENT unary_expression "=>" "." INC_OP unary_expression) (COMMENT unary_expression "=>" "." postfix_expression) (COMMENT postfix_expression "=>" "." postfix_expression DEC_OP) (COMMENT postfix_expression "=>" "." postfix_expression INC_OP) (COMMENT postfix_expression "=>" "." postfix_expression PTR_OP IDENTIFIER) (COMMENT postfix_expression "=>" "." postfix_expression DOT IDENTIFIER) (COMMENT postfix_expression "=>" "." postfix_expression LPAREN argument_expression_list RPAREN) (COMMENT postfix_expression "=>" "." postfix_expression LPAREN RPAREN) (COMMENT postfix_expression "=>" "." postfix_expression LBRACK expression RBRACK) (COMMENT postfix_expression "=>" "." primary_expression) (COMMENT primary_expression "=>" "." LPAREN expression RPAREN) (COMMENT primary_expression "=>" "." STRING_LITERAL) (COMMENT primary_expression "=>" "." CONSTANT) (COMMENT primary_expression "=>" "." IDENTIFIER) (SHIFT (IDENTIFIER) s2) (SHIFT (CONSTANT) s3) (SHIFT (STRING_LITERAL) s4) (SHIFT (SIZEOF) s24) (SHIFT (INC_OP) s25) (SHIFT (DEC_OP) s26) (SHIFT (LPAREN) s27) (SHIFT (AMPERSAND) s28) (SHIFT (STAR) s29) (SHIFT (PLUS) s30) (SHIFT (MINUS) s31) (SHIFT (TWIDLE) s32) (SHIFT (BANG) s33) (GOTO primary_expression s6) (GOTO postfix_expression s7) (GOTO unary_expression s62) (GOTO unary_operator s9) (GOTO cast_expression s206))
 (STATE s202 (COMMENT multiplicative_expression "=>" multiplicative_expression STAR "." cast_expression) (COMMENT cast_expression "=>" "." LPAREN type_name RPAREN cast_expression) (COMMENT cast_expression "=>" "." unary_expression) (COMMENT unary_operator "=>" "." BANG) (COMMENT unary_operator "=>" "." TWIDLE) (COMMENT unary_operator "=>" "." MINUS) (COMMENT unary_operator "=>" "." PLUS) (COMMENT unary_operator "=>" "." STAR) (COMMENT unary_operator "=>" "." AMPERSAND) (COMMENT unary_expression "=>" "." SIZEOF LPAREN type_name RPAREN) (COMMENT unary_expression "=>" "." SIZEOF unary_expression) (COMMENT unary_expression "=>" "." unary_operator cast_expression) (COMMENT unary_expression "=>" "." DEC_OP unary_expression) (COMMENT unary_expression "=>" "." INC_OP unary_expression) (COMMENT unary_expression "=>" "." postfix_expression) (COMMENT postfix_expression "=>" "." postfix_expression DEC_OP) (COMMENT postfix_expression "=>" "." postfix_expression INC_OP) (COMMENT postfix_expression "=>" "." postfix_expression PTR_OP IDENTIFIER) (COMMENT postfix_expression "=>" "." postfix_expression DOT IDENTIFIER) (COMMENT postfix_expression "=>" "." postfix_expression LPAREN argument_expression_list RPAREN) (COMMENT postfix_expression "=>" "." postfix_expression LPAREN RPAREN) (COMMENT postfix_expression "=>" "." postfix_expression LBRACK expression RBRACK) (COMMENT postfix_expression "=>" "." primary_expression) (COMMENT primary_expression "=>" "." LPAREN expression RPAREN) (COMMENT primary_expression "=>" "." STRING_LITERAL) (COMMENT primary_expression "=>" "." CONSTANT) (COMMENT primary_expression "=>" "." IDENTIFIER) (SHIFT (IDENTIFIER) s2) (SHIFT (CONSTANT) s3) (SHIFT (STRING_LITERAL) s4) (SHIFT (SIZEOF) s24) (SHIFT (INC_OP) s25) (SHIFT (DEC_OP) s26) (SHIFT (LPAREN) s27) (SHIFT (AMPERSAND) s28) (SHIFT (STAR) s29) (SHIFT (PLUS) s30) (SHIFT (MINUS) s31) (SHIFT (TWIDLE) s32) (SHIFT (BANG) s33) (GOTO primary_expression s6) (GOTO postfix_expression s7) (GOTO unary_expression s62) (GOTO unary_operator s9) (GOTO cast_expression s205))
 (STATE s203 (COMMENT multiplicative_expression "=>" multiplicative_expression FORWARD_SLASH "." cast_expression) (COMMENT cast_expression "=>" "." LPAREN type_name RPAREN cast_expression) (COMMENT cast_expression "=>" "." unary_expression) (COMMENT unary_operator "=>" "." BANG) (COMMENT unary_operator "=>" "." TWIDLE) (COMMENT unary_operator "=>" "." MINUS) (COMMENT unary_operator "=>" "." PLUS) (COMMENT unary_operator "=>" "." STAR) (COMMENT unary_operator "=>" "." AMPERSAND) (COMMENT unary_expression "=>" "." SIZEOF LPAREN type_name RPAREN) (COMMENT unary_expression "=>" "." SIZEOF unary_expression) (COMMENT unary_expression "=>" "." unary_operator cast_expression) (COMMENT unary_expression "=>" "." DEC_OP unary_expression) (COMMENT unary_expression "=>" "." INC_OP unary_expression) (COMMENT unary_expression "=>" "." postfix_expression) (COMMENT postfix_expression "=>" "." postfix_expression DEC_OP) (COMMENT postfix_expression "=>" "." postfix_expression INC_OP) (COMMENT postfix_expression "=>" "." postfix_expression PTR_OP IDENTIFIER) (COMMENT postfix_expression "=>" "." postfix_expression DOT IDENTIFIER) (COMMENT postfix_expression "=>" "." postfix_expression LPAREN argument_expression_list RPAREN) (COMMENT postfix_expression "=>" "." postfix_expression LPAREN RPAREN) (COMMENT postfix_expression "=>" "." postfix_expression LBRACK expression RBRACK) (COMMENT postfix_expression "=>" "." primary_expression) (COMMENT primary_expression "=>" "." LPAREN expression RPAREN) (COMMENT primary_expression "=>" "." STRING_LITERAL) (COMMENT primary_expression "=>" "." CONSTANT) (COMMENT primary_expression "=>" "." IDENTIFIER) (SHIFT (IDENTIFIER) s2) (SHIFT (CONSTANT) s3) (SHIFT (STRING_LITERAL) s4) (SHIFT (SIZEOF) s24) (SHIFT (INC_OP) s25) (SHIFT (DEC_OP) s26) (SHIFT (LPAREN) s27) (SHIFT (AMPERSAND) s28) (SHIFT (STAR) s29) (SHIFT (PLUS) s30) (SHIFT (MINUS) s31) (SHIFT (TWIDLE) s32) (SHIFT (BANG) s33) (GOTO primary_expression s6) (GOTO postfix_expression s7) (GOTO unary_expression s62) (GOTO unary_operator s9) (GOTO cast_expression s204))
 (STATE s204 (COMMENT multiplicative_expression "=>" multiplicative_expression FORWARD_SLASH cast_expression ".") (REDUCE () r32))
 (STATE s205 (COMMENT multiplicative_expression "=>" multiplicative_expression STAR cast_expression ".") (REDUCE () r31))
 (STATE s206 (COMMENT multiplicative_expression "=>" multiplicative_expression AMPERSAND cast_expression ".") (REDUCE () r33))
 (STATE s207 (COMMENT additive_expression "=>" additive_expression PLUS multiplicative_expression ".") (COMMENT multiplicative_expression "=>" multiplicative_expression "." AMPERSAND cast_expression) (COMMENT multiplicative_expression "=>" multiplicative_expression "." FORWARD_SLASH cast_expression) (COMMENT multiplicative_expression "=>" multiplicative_expression "." STAR cast_expression) (REDUCE (LEFT_OP) r35) (REDUCE (RIGHT_OP) r35) (REDUCE (LE_OP) r35) (REDUCE (GE_OP) r35) (REDUCE (EQ_OP) r35) (REDUCE (NE_OP) r35) (REDUCE (AND_OP) r35) (REDUCE (OR_OP) r35) (REDUCE (RPAREN) r35) (REDUCE (RBRACK) r35) (REDUCE (RCURLY) r35) (REDUCE (COMMA) r35) (COMMENT (REDUCE (AMPERSAND) r35)) (SHIFT (AMPERSAND) s201) (SHIFT (STAR) s202) (REDUCE (PLUS) r35) (REDUCE (MINUS) r35) (SHIFT (FORWARD_SLASH) s203) (REDUCE (LESS_OP) r35) (REDUCE (GREATER_OP) r35) (REDUCE (CARROT) r35) (REDUCE (PIPE) r35) (REDUCE (QMARK) r35) (REDUCE (COLON) r35) (REDUCE (SEMICOLON) r35))
 (STATE s208 (COMMENT shift_expression "=>" shift_expression LEFT_OP additive_expression ".") (COMMENT additive_expression "=>" additive_expression "." MINUS multiplicative_expression) (COMMENT additive_expression "=>" additive_expression "." PLUS multiplicative_expression) (REDUCE (LEFT_OP) r38) (REDUCE (RIGHT_OP) r38) (REDUCE (LE_OP) r38) (REDUCE (GE_OP) r38) (REDUCE (EQ_OP) r38) (REDUCE (NE_OP) r38) (REDUCE (AND_OP) r38) (REDUCE (OR_OP) r38) (REDUCE (RPAREN) r38) (REDUCE (RBRACK) r38) (REDUCE (RCURLY) r38) (REDUCE (COMMA) r38) (REDUCE (AMPERSAND) r38) (SHIFT (PLUS) s198) (SHIFT (MINUS) s199) (REDUCE (LESS_OP) r38) (REDUCE (GREATER_OP) r38) (REDUCE (CARROT) r38) (REDUCE (PIPE) r38) (REDUCE (QMARK) r38) (REDUCE (COLON) r38) (REDUCE (SEMICOLON) r38))
 (STATE s209 (COMMENT relational_expression "=>" relational_expression LESS_OP shift_expression ".") (COMMENT shift_expression "=>" shift_expression "." RIGHT_OP additive_expression) (COMMENT shift_expression "=>" shift_expression "." LEFT_OP additive_expression) (SHIFT (LEFT_OP) s195) (SHIFT (RIGHT_OP) s196) (REDUCE (LE_OP) r41) (REDUCE (GE_OP) r41) (REDUCE (EQ_OP) r41) (REDUCE (NE_OP) r41) (REDUCE (AND_OP) r41) (REDUCE (OR_OP) r41) (REDUCE (RPAREN) r41) (REDUCE (RBRACK) r41) (REDUCE (RCURLY) r41) (REDUCE (COMMA) r41) (REDUCE (AMPERSAND) r41) (REDUCE (LESS_OP) r41) (REDUCE (GREATER_OP) r41) (REDUCE (CARROT) r41) (REDUCE (PIPE) r41) (REDUCE (QMARK) r41) (REDUCE (COLON) r41) (REDUCE (SEMICOLON) r41))
 (STATE s210 (COMMENT relational_expression "=>" relational_expression GE_OP shift_expression ".") (COMMENT shift_expression "=>" shift_expression "." RIGHT_OP additive_expression) (COMMENT shift_expression "=>" shift_expression "." LEFT_OP additive_expression) (SHIFT (LEFT_OP) s195) (SHIFT (RIGHT_OP) s196) (REDUCE (LE_OP) r44) (REDUCE (GE_OP) r44) (REDUCE (EQ_OP) r44) (REDUCE (NE_OP) r44) (REDUCE (AND_OP) r44) (REDUCE (OR_OP) r44) (REDUCE (RPAREN) r44) (REDUCE (RBRACK) r44) (REDUCE (RCURLY) r44) (REDUCE (COMMA) r44) (REDUCE (AMPERSAND) r44) (REDUCE (LESS_OP) r44) (REDUCE (GREATER_OP) r44) (REDUCE (CARROT) r44) (REDUCE (PIPE) r44) (REDUCE (QMARK) r44) (REDUCE (COLON) r44) (REDUCE (SEMICOLON) r44))
 (STATE s211 (COMMENT relational_expression "=>" relational_expression LE_OP shift_expression ".") (COMMENT shift_expression "=>" shift_expression "." RIGHT_OP additive_expression) (COMMENT shift_expression "=>" shift_expression "." LEFT_OP additive_expression) (SHIFT (LEFT_OP) s195) (SHIFT (RIGHT_OP) s196) (REDUCE (LE_OP) r43) (REDUCE (GE_OP) r43) (REDUCE (EQ_OP) r43) (REDUCE (NE_OP) r43) (REDUCE (AND_OP) r43) (REDUCE (OR_OP) r43) (REDUCE (RPAREN) r43) (REDUCE (RBRACK) r43) (REDUCE (RCURLY) r43) (REDUCE (COMMA) r43) (REDUCE (AMPERSAND) r43) (REDUCE (LESS_OP) r43) (REDUCE (GREATER_OP) r43) (REDUCE (CARROT) r43) (REDUCE (PIPE) r43) (REDUCE (QMARK) r43) (REDUCE (COLON) r43) (REDUCE (SEMICOLON) r43))
 (STATE s212 (COMMENT equality_expression "=>" equality_expression EQ_OP relational_expression ".") (COMMENT relational_expression "=>" relational_expression "." GE_OP shift_expression) (COMMENT relational_expression "=>" relational_expression "." LE_OP shift_expression) (COMMENT relational_expression "=>" relational_expression "." GREATER_OP shift_expression) (COMMENT relational_expression "=>" relational_expression "." LESS_OP shift_expression) (SHIFT (LE_OP) s190) (SHIFT (GE_OP) s191) (REDUCE (EQ_OP) r46) (REDUCE (NE_OP) r46) (REDUCE (AND_OP) r46) (REDUCE (OR_OP) r46) (REDUCE (RPAREN) r46) (REDUCE (RBRACK) r46) (REDUCE (RCURLY) r46) (REDUCE (COMMA) r46) (REDUCE (AMPERSAND) r46) (SHIFT (LESS_OP) s192) (SHIFT (GREATER_OP) s193) (REDUCE (CARROT) r46) (REDUCE (PIPE) r46) (REDUCE (QMARK) r46) (REDUCE (COLON) r46) (REDUCE (SEMICOLON) r46))
 (STATE s213 (COMMENT unary_expression "=>" unary_operator cast_expression ".") (REDUCE () r19))
 (STATE s214 (COMMENT assignment_expression "=>" unary_expression assignment_operator "." assignment_expression) (COMMENT assignment_expression "=>" "." unary_expression assignment_operator assignment_expression) (COMMENT assignment_expression "=>" "." conditional_expression) (COMMENT conditional_expression "=>" "." logical_or_expression QMARK expression COLON conditional_expression) (COMMENT conditional_expression "=>" "." logical_or_expression) (COMMENT logical_or_expression "=>" "." logical_or_expression OR_OP logical_and_expression) (COMMENT logical_or_expression "=>" "." logical_and_expression) (COMMENT logical_and_expression "=>" "." logical_and_expression AND_OP inclusive_or_expression) (COMMENT logical_and_expression "=>" "." inclusive_or_expression) (COMMENT inclusive_or_expression "=>" "." inclusive_or_expression PIPE exclusive_or_expression) (COMMENT inclusive_or_expression "=>" "." exclusive_or_expression) (COMMENT exclusive_or_expression "=>" "." exclusive_or_expression CARROT and_expression) (COMMENT exclusive_or_expression "=>" "." and_expression) (COMMENT and_expression "=>" "." and_expression AMPERSAND equality_expression) (COMMENT and_expression "=>" "." equality_expression) (COMMENT equality_expression "=>" "." equality_expression NE_OP relational_expression) (COMMENT equality_expression "=>" "." equality_expression EQ_OP relational_expression) (COMMENT equality_expression "=>" "." relational_expression) (COMMENT relational_expression "=>" "." relational_expression GE_OP shift_expression) (COMMENT relational_expression "=>" "." relational_expression LE_OP shift_expression) (COMMENT relational_expression "=>" "." relational_expression GREATER_OP shift_expression) (COMMENT relational_expression "=>" "." relational_expression LESS_OP shift_expression) (COMMENT relational_expression "=>" "." shift_expression) (COMMENT shift_expression "=>" "." shift_expression RIGHT_OP additive_expression) (COMMENT shift_expression "=>" "." shift_expression LEFT_OP additive_expression) (COMMENT shift_expression "=>" "." additive_expression) (COMMENT additive_expression "=>" "." additive_expression MINUS multiplicative_expression) (COMMENT additive_expression "=>" "." additive_expression PLUS multiplicative_expression) (COMMENT additive_expression "=>" "." multiplicative_expression) (COMMENT multiplicative_expression "=>" "." multiplicative_expression AMPERSAND cast_expression) (COMMENT multiplicative_expression "=>" "." multiplicative_expression FORWARD_SLASH cast_expression) (COMMENT multiplicative_expression "=>" "." multiplicative_expression STAR cast_expression) (COMMENT multiplicative_expression "=>" "." cast_expression) (COMMENT cast_expression "=>" "." LPAREN type_name RPAREN cast_expression) (COMMENT cast_expression "=>" "." unary_expression) (COMMENT unary_operator "=>" "." BANG) (COMMENT unary_operator "=>" "." TWIDLE) (COMMENT unary_operator "=>" "." MINUS) (COMMENT unary_operator "=>" "." PLUS) (COMMENT unary_operator "=>" "." STAR) (COMMENT unary_operator "=>" "." AMPERSAND) (COMMENT unary_expression "=>" "." SIZEOF LPAREN type_name RPAREN) (COMMENT unary_expression "=>" "." SIZEOF unary_expression) (COMMENT unary_expression "=>" "." unary_operator cast_expression) (COMMENT unary_expression "=>" "." DEC_OP unary_expression) (COMMENT unary_expression "=>" "." INC_OP unary_expression) (COMMENT unary_expression "=>" "." postfix_expression) (COMMENT postfix_expression "=>" "." postfix_expression DEC_OP) (COMMENT postfix_expression "=>" "." postfix_expression INC_OP) (COMMENT postfix_expression "=>" "." postfix_expression PTR_OP IDENTIFIER) (COMMENT postfix_expression "=>" "." postfix_expression DOT IDENTIFIER) (COMMENT postfix_expression "=>" "." postfix_expression LPAREN argument_expression_list RPAREN) (COMMENT postfix_expression "=>" "." postfix_expression LPAREN RPAREN) (COMMENT postfix_expression "=>" "." postfix_expression LBRACK expression RBRACK) (COMMENT postfix_expression "=>" "." primary_expression) (COMMENT primary_expression "=>" "." LPAREN expression RPAREN) (COMMENT primary_expression "=>" "." STRING_LITERAL) (COMMENT primary_expression "=>" "." CONSTANT) (COMMENT primary_expression "=>" "." IDENTIFIER) (SHIFT (IDENTIFIER) s2) (SHIFT (CONSTANT) s3) (SHIFT (STRING_LITERAL) s4) (SHIFT (SIZEOF) s24) (SHIFT (INC_OP) s25) (SHIFT (DEC_OP) s26) (SHIFT (LPAREN) s27) (SHIFT (AMPERSAND) s28) (SHIFT (STAR) s29) (SHIFT (PLUS) s30) (SHIFT (MINUS) s31) (SHIFT (TWIDLE) s32) (SHIFT (BANG) s33) (GOTO primary_expression s6) (GOTO postfix_expression s7) (GOTO unary_expression s8) (GOTO unary_operator s9) (GOTO cast_expression s10) (GOTO multiplicative_expression s11) (GOTO additive_expression s12) (GOTO shift_expression s13) (GOTO relational_expression s14) (GOTO equality_expression s15) (GOTO and_expression s16) (GOTO exclusive_or_expression s17) (GOTO inclusive_or_expression s18) (GOTO logical_and_expression s19) (GOTO logical_or_expression s20) (GOTO conditional_expression s21) (GOTO assignment_expression s226))
 (STATE s215 (COMMENT assignment_operator "=>" MUL_ASSIGN ".") (REDUCE () r63))
 (STATE s216 (COMMENT assignment_operator "=>" DIV_ASSIGN ".") (REDUCE () r64))
 (STATE s217 (COMMENT assignment_operator "=>" MOD_ASSIGN ".") (REDUCE () r65))
 (STATE s218 (COMMENT assignment_operator "=>" ADD_ASSIGN ".") (REDUCE () r66))
 (STATE s219 (COMMENT assignment_operator "=>" SUB_ASSIGN ".") (REDUCE () r67))
 (STATE s220 (COMMENT assignment_operator "=>" LEFT_ASSIGN ".") (REDUCE () r68))
 (STATE s221 (COMMENT assignment_operator "=>" RIGHT_ASSIGN ".") (REDUCE () r69))
 (STATE s222 (COMMENT assignment_operator "=>" AND_ASSIGN ".") (REDUCE () r70))
 (STATE s223 (COMMENT assignment_operator "=>" XOR_ASSIGN ".") (REDUCE () r71))
 (STATE s224 (COMMENT assignment_operator "=>" OR_ASSIGN ".") (REDUCE () r72))
 (STATE s225 (COMMENT assignment_operator "=>" EQUAL_SIGN ".") (REDUCE () r62))
 (STATE s226 (COMMENT assignment_expression "=>" unary_expression assignment_operator assignment_expression ".") (REDUCE () r61))
 (STATE s227 (COMMENT postfix_expression "=>" postfix_expression PTR_OP "." IDENTIFIER) (SHIFT (IDENTIFIER) s242))
 (STATE s228 (COMMENT postfix_expression "=>" postfix_expression INC_OP ".") (REDUCE () r12))
 (STATE s229 (COMMENT postfix_expression "=>" postfix_expression DEC_OP ".") (REDUCE () r13))
 (STATE s230 (COMMENT assignment_expression "=>" "." unary_expression assignment_operator assignment_expression) (COMMENT assignment_expression "=>" "." conditional_expression) (COMMENT conditional_expression "=>" "." logical_or_expression QMARK expression COLON conditional_expression) (COMMENT conditional_expression "=>" "." logical_or_expression) (COMMENT logical_or_expression "=>" "." logical_or_expression OR_OP logical_and_expression) (COMMENT logical_or_expression "=>" "." logical_and_expression) (COMMENT logical_and_expression "=>" "." logical_and_expression AND_OP inclusive_or_expression) (COMMENT logical_and_expression "=>" "." inclusive_or_expression) (COMMENT inclusive_or_expression "=>" "." inclusive_or_expression PIPE exclusive_or_expression) (COMMENT inclusive_or_expression "=>" "." exclusive_or_expression) (COMMENT exclusive_or_expression "=>" "." exclusive_or_expression CARROT and_expression) (COMMENT exclusive_or_expression "=>" "." and_expression) (COMMENT and_expression "=>" "." and_expression AMPERSAND equality_expression) (COMMENT and_expression "=>" "." equality_expression) (COMMENT equality_expression "=>" "." equality_expression NE_OP relational_expression) (COMMENT equality_expression "=>" "." equality_expression EQ_OP relational_expression) (COMMENT equality_expression "=>" "." relational_expression) (COMMENT relational_expression "=>" "." relational_expression GE_OP shift_expression) (COMMENT relational_expression "=>" "." relational_expression LE_OP shift_expression) (COMMENT relational_expression "=>" "." relational_expression GREATER_OP shift_expression) (COMMENT relational_expression "=>" "." relational_expression LESS_OP shift_expression) (COMMENT relational_expression "=>" "." shift_expression) (COMMENT shift_expression "=>" "." shift_expression RIGHT_OP additive_expression) (COMMENT shift_expression "=>" "." shift_expression LEFT_OP additive_expression) (COMMENT shift_expression "=>" "." additive_expression) (COMMENT additive_expression "=>" "." additive_expression MINUS multiplicative_expression) (COMMENT additive_expression "=>" "." additive_expression PLUS multiplicative_expression) (COMMENT additive_expression "=>" "." multiplicative_expression) (COMMENT multiplicative_expression "=>" "." multiplicative_expression AMPERSAND cast_expression) (COMMENT multiplicative_expression "=>" "." multiplicative_expression FORWARD_SLASH cast_expression) (COMMENT multiplicative_expression "=>" "." multiplicative_expression STAR cast_expression) (COMMENT multiplicative_expression "=>" "." cast_expression) (COMMENT cast_expression "=>" "." LPAREN type_name RPAREN cast_expression) (COMMENT cast_expression "=>" "." unary_expression) (COMMENT unary_operator "=>" "." BANG) (COMMENT unary_operator "=>" "." TWIDLE) (COMMENT unary_operator "=>" "." MINUS) (COMMENT unary_operator "=>" "." PLUS) (COMMENT unary_operator "=>" "." STAR) (COMMENT unary_operator "=>" "." AMPERSAND) (COMMENT unary_expression "=>" "." SIZEOF LPAREN type_name RPAREN) (COMMENT unary_expression "=>" "." SIZEOF unary_expression) (COMMENT unary_expression "=>" "." unary_operator cast_expression) (COMMENT unary_expression "=>" "." DEC_OP unary_expression) (COMMENT unary_expression "=>" "." INC_OP unary_expression) (COMMENT unary_expression "=>" "." postfix_expression) (COMMENT argument_expression_list "=>" "." argument_expression_list COMMA assignment_expression) (COMMENT argument_expression_list "=>" "." assignment_expression) (COMMENT postfix_expression "=>" "." postfix_expression DEC_OP) (COMMENT postfix_expression "=>" "." postfix_expression INC_OP) (COMMENT postfix_expression "=>" "." postfix_expression PTR_OP IDENTIFIER) (COMMENT postfix_expression "=>" "." postfix_expression DOT IDENTIFIER) (COMMENT postfix_expression "=>" postfix_expression LPAREN "." argument_expression_list RPAREN) (COMMENT postfix_expression "=>" "." postfix_expression LPAREN argument_expression_list RPAREN) (COMMENT postfix_expression "=>" postfix_expression LPAREN "." RPAREN) (COMMENT postfix_expression "=>" "." postfix_expression LPAREN RPAREN) (COMMENT postfix_expression "=>" "." postfix_expression LBRACK expression RBRACK) (COMMENT postfix_expression "=>" "." primary_expression) (COMMENT primary_expression "=>" "." LPAREN expression RPAREN) (COMMENT primary_expression "=>" "." STRING_LITERAL) (COMMENT primary_expression "=>" "." CONSTANT) (COMMENT primary_expression "=>" "." IDENTIFIER) (SHIFT (IDENTIFIER) s2) (SHIFT (CONSTANT) s3) (SHIFT (STRING_LITERAL) s4) (SHIFT (SIZEOF) s24) (SHIFT (INC_OP) s25) (SHIFT (DEC_OP) s26) (SHIFT (LPAREN) s27) (SHIFT (RPAREN) s238) (SHIFT (AMPERSAND) s28) (SHIFT (STAR) s29) (SHIFT (PLUS) s30) (SHIFT (MINUS) s31) (SHIFT (TWIDLE) s32) (SHIFT (BANG) s33) (GOTO primary_expression s6) (GOTO postfix_expression s7) (GOTO argument_expression_list s236) (GOTO unary_expression s8) (GOTO unary_operator s9) (GOTO cast_expression s10) (GOTO multiplicative_expression s11) (GOTO additive_expression s12) (GOTO shift_expression s13) (GOTO relational_expression s14) (GOTO equality_expression s15) (GOTO and_expression s16) (GOTO exclusive_or_expression s17) (GOTO inclusive_or_expression s18) (GOTO logical_and_expression s19) (GOTO logical_or_expression s20) (GOTO conditional_expression s21) (GOTO assignment_expression s237))
 (STATE s231 (COMMENT expression "=>" "." expression COMMA assignment_expression) (COMMENT expression "=>" "." assignment_expression) (COMMENT assignment_expression "=>" "." unary_expression assignment_operator assignment_expression) (COMMENT assignment_expression "=>" "." conditional_expression) (COMMENT conditional_expression "=>" "." logical_or_expression QMARK expression COLON conditional_expression) (COMMENT conditional_expression "=>" "." logical_or_expression) (COMMENT logical_or_expression "=>" "." logical_or_expression OR_OP logical_and_expression) (COMMENT logical_or_expression "=>" "." logical_and_expression) (COMMENT logical_and_expression "=>" "." logical_and_expression AND_OP inclusive_or_expression) (COMMENT logical_and_expression "=>" "." inclusive_or_expression) (COMMENT inclusive_or_expression "=>" "." inclusive_or_expression PIPE exclusive_or_expression) (COMMENT inclusive_or_expression "=>" "." exclusive_or_expression) (COMMENT exclusive_or_expression "=>" "." exclusive_or_expression CARROT and_expression) (COMMENT exclusive_or_expression "=>" "." and_expression) (COMMENT and_expression "=>" "." and_expression AMPERSAND equality_expression) (COMMENT and_expression "=>" "." equality_expression) (COMMENT equality_expression "=>" "." equality_expression NE_OP relational_expression) (COMMENT equality_expression "=>" "." equality_expression EQ_OP relational_expression) (COMMENT equality_expression "=>" "." relational_expression) (COMMENT relational_expression "=>" "." relational_expression GE_OP shift_expression) (COMMENT relational_expression "=>" "." relational_expression LE_OP shift_expression) (COMMENT relational_expression "=>" "." relational_expression GREATER_OP shift_expression) (COMMENT relational_expression "=>" "." relational_expression LESS_OP shift_expression) (COMMENT relational_expression "=>" "." shift_expression) (COMMENT shift_expression "=>" "." shift_expression RIGHT_OP additive_expression) (COMMENT shift_expression "=>" "." shift_expression LEFT_OP additive_expression) (COMMENT shift_expression "=>" "." additive_expression) (COMMENT additive_expression "=>" "." additive_expression MINUS multiplicative_expression) (COMMENT additive_expression "=>" "." additive_expression PLUS multiplicative_expression) (COMMENT additive_expression "=>" "." multiplicative_expression) (COMMENT multiplicative_expression "=>" "." multiplicative_expression AMPERSAND cast_expression) (COMMENT multiplicative_expression "=>" "." multiplicative_expression FORWARD_SLASH cast_expression) (COMMENT multiplicative_expression "=>" "." multiplicative_expression STAR cast_expression) (COMMENT multiplicative_expression "=>" "." cast_expression) (COMMENT cast_expression "=>" "." LPAREN type_name RPAREN cast_expression) (COMMENT cast_expression "=>" "." unary_expression) (COMMENT unary_operator "=>" "." BANG) (COMMENT unary_operator "=>" "." TWIDLE) (COMMENT unary_operator "=>" "." MINUS) (COMMENT unary_operator "=>" "." PLUS) (COMMENT unary_operator "=>" "." STAR) (COMMENT unary_operator "=>" "." AMPERSAND) (COMMENT unary_expression "=>" "." SIZEOF LPAREN type_name RPAREN) (COMMENT unary_expression "=>" "." SIZEOF unary_expression) (COMMENT unary_expression "=>" "." unary_operator cast_expression) (COMMENT unary_expression "=>" "." DEC_OP unary_expression) (COMMENT unary_expression "=>" "." INC_OP unary_expression) (COMMENT unary_expression "=>" "." postfix_expression) (COMMENT postfix_expression "=>" "." postfix_expression DEC_OP) (COMMENT postfix_expression "=>" "." postfix_expression INC_OP) (COMMENT postfix_expression "=>" "." postfix_expression PTR_OP IDENTIFIER) (COMMENT postfix_expression "=>" "." postfix_expression DOT IDENTIFIER) (COMMENT postfix_expression "=>" "." postfix_expression LPAREN argument_expression_list RPAREN) (COMMENT postfix_expression "=>" "." postfix_expression LPAREN RPAREN) (COMMENT postfix_expression "=>" postfix_expression LBRACK "." expression RBRACK) (COMMENT postfix_expression "=>" "." postfix_expression LBRACK expression RBRACK) (COMMENT postfix_expression "=>" "." primary_expression) (COMMENT primary_expression "=>" "." LPAREN expression RPAREN) (COMMENT primary_expression "=>" "." STRING_LITERAL) (COMMENT primary_expression "=>" "." CONSTANT) (COMMENT primary_expression "=>" "." IDENTIFIER) (SHIFT (IDENTIFIER) s2) (SHIFT (CONSTANT) s3) (SHIFT (STRING_LITERAL) s4) (SHIFT (SIZEOF) s24) (SHIFT (INC_OP) s25) (SHIFT (DEC_OP) s26) (SHIFT (LPAREN) s27) (SHIFT (AMPERSAND) s28) (SHIFT (STAR) s29) (SHIFT (PLUS) s30) (SHIFT (MINUS) s31) (SHIFT (TWIDLE) s32) (SHIFT (BANG) s33) (GOTO primary_expression s6) (GOTO postfix_expression s7) (GOTO unary_expression s8) (GOTO unary_operator s9) (GOTO cast_expression s10) (GOTO multiplicative_expression s11) (GOTO additive_expression s12) (GOTO shift_expression s13) (GOTO relational_expression s14) (GOTO equality_expression s15) (GOTO and_expression s16) (GOTO exclusive_or_expression s17) (GOTO inclusive_or_expression s18) (GOTO logical_and_expression s19) (GOTO logical_or_expression s20) (GOTO conditional_expression s21) (GOTO assignment_expression s22) (GOTO expression s234))
 (STATE s232 (COMMENT postfix_expression "=>" postfix_expression DOT "." IDENTIFIER) (SHIFT (IDENTIFIER) s233))
 (STATE s233 (COMMENT postfix_expression "=>" postfix_expression DOT IDENTIFIER ".") (REDUCE () r10))
 (STATE s234 (COMMENT expression "=>" expression "." COMMA assignment_expression) (COMMENT postfix_expression "=>" postfix_expression LBRACK expression "." RBRACK) (SHIFT (RBRACK) s235) (SHIFT (COMMA) s171))
 (STATE s235 (COMMENT postfix_expression "=>" postfix_expression LBRACK expression RBRACK ".") (REDUCE () r7))
 (STATE s236 (COMMENT argument_expression_list "=>" argument_expression_list "." COMMA assignment_expression) (COMMENT postfix_expression "=>" postfix_expression LPAREN argument_expression_list "." RPAREN) (SHIFT (RPAREN) s239) (SHIFT (COMMA) s240))
 (STATE s237 (COMMENT argument_expression_list "=>" assignment_expression ".") (REDUCE () r14))
 (STATE s238 (COMMENT postfix_expression "=>" postfix_expression LPAREN RPAREN ".") (REDUCE () r8))
 (STATE s239 (COMMENT postfix_expression "=>" postfix_expression LPAREN argument_expression_list RPAREN ".") (REDUCE () r9))
 (STATE s240 (COMMENT assignment_expression "=>" "." unary_expression assignment_operator assignment_expression) (COMMENT assignment_expression "=>" "." conditional_expression) (COMMENT conditional_expression "=>" "." logical_or_expression QMARK expression COLON conditional_expression) (COMMENT conditional_expression "=>" "." logical_or_expression) (COMMENT logical_or_expression "=>" "." logical_or_expression OR_OP logical_and_expression) (COMMENT logical_or_expression "=>" "." logical_and_expression) (COMMENT logical_and_expression "=>" "." logical_and_expression AND_OP inclusive_or_expression) (COMMENT logical_and_expression "=>" "." inclusive_or_expression) (COMMENT inclusive_or_expression "=>" "." inclusive_or_expression PIPE exclusive_or_expression) (COMMENT inclusive_or_expression "=>" "." exclusive_or_expression) (COMMENT exclusive_or_expression "=>" "." exclusive_or_expression CARROT and_expression) (COMMENT exclusive_or_expression "=>" "." and_expression) (COMMENT and_expression "=>" "." and_expression AMPERSAND equality_expression) (COMMENT and_expression "=>" "." equality_expression) (COMMENT equality_expression "=>" "." equality_expression NE_OP relational_expression) (COMMENT equality_expression "=>" "." equality_expression EQ_OP relational_expression) (COMMENT equality_expression "=>" "." relational_expression) (COMMENT relational_expression "=>" "." relational_expression GE_OP shift_expression) (COMMENT relational_expression "=>" "." relational_expression LE_OP shift_expression) (COMMENT relational_expression "=>" "." relational_expression GREATER_OP shift_expression) (COMMENT relational_expression "=>" "." relational_expression LESS_OP shift_expression) (COMMENT relational_expression "=>" "." shift_expression) (COMMENT shift_expression "=>" "." shift_expression RIGHT_OP additive_expression) (COMMENT shift_expression "=>" "." shift_expression LEFT_OP additive_expression) (COMMENT shift_expression "=>" "." additive_expression) (COMMENT additive_expression "=>" "." additive_expression MINUS multiplicative_expression) (COMMENT additive_expression "=>" "." additive_expression PLUS multiplicative_expression) (COMMENT additive_expression "=>" "." multiplicative_expression) (COMMENT multiplicative_expression "=>" "." multiplicative_expression AMPERSAND cast_expression) (COMMENT multiplicative_expression "=>" "." multiplicative_expression FORWARD_SLASH cast_expression) (COMMENT multiplicative_expression "=>" "." multiplicative_expression STAR cast_expression) (COMMENT multiplicative_expression "=>" "." cast_expression) (COMMENT cast_expression "=>" "." LPAREN type_name RPAREN cast_expression) (COMMENT cast_expression "=>" "." unary_expression) (COMMENT unary_operator "=>" "." BANG) (COMMENT unary_operator "=>" "." TWIDLE) (COMMENT unary_operator "=>" "." MINUS) (COMMENT unary_operator "=>" "." PLUS) (COMMENT unary_operator "=>" "." STAR) (COMMENT unary_operator "=>" "." AMPERSAND) (COMMENT unary_expression "=>" "." SIZEOF LPAREN type_name RPAREN) (COMMENT unary_expression "=>" "." SIZEOF unary_expression) (COMMENT unary_expression "=>" "." unary_operator cast_expression) (COMMENT unary_expression "=>" "." DEC_OP unary_expression) (COMMENT unary_expression "=>" "." INC_OP unary_expression) (COMMENT unary_expression "=>" "." postfix_expression) (COMMENT argument_expression_list "=>" argument_expression_list COMMA "." assignment_expression) (COMMENT postfix_expression "=>" "." postfix_expression DEC_OP) (COMMENT postfix_expression "=>" "." postfix_expression INC_OP) (COMMENT postfix_expression "=>" "." postfix_expression PTR_OP IDENTIFIER) (COMMENT postfix_expression "=>" "." postfix_expression DOT IDENTIFIER) (COMMENT postfix_expression "=>" "." postfix_expression LPAREN argument_expression_list RPAREN) (COMMENT postfix_expression "=>" "." postfix_expression LPAREN RPAREN) (COMMENT postfix_expression "=>" "." postfix_expression LBRACK expression RBRACK) (COMMENT postfix_expression "=>" "." primary_expression) (COMMENT primary_expression "=>" "." LPAREN expression RPAREN) (COMMENT primary_expression "=>" "." STRING_LITERAL) (COMMENT primary_expression "=>" "." CONSTANT) (COMMENT primary_expression "=>" "." IDENTIFIER) (SHIFT (IDENTIFIER) s2) (SHIFT (CONSTANT) s3) (SHIFT (STRING_LITERAL) s4) (SHIFT (SIZEOF) s24) (SHIFT (INC_OP) s25) (SHIFT (DEC_OP) s26) (SHIFT (LPAREN) s27) (SHIFT (AMPERSAND) s28) (SHIFT (STAR) s29) (SHIFT (PLUS) s30) (SHIFT (MINUS) s31) (SHIFT (TWIDLE) s32) (SHIFT (BANG) s33) (GOTO primary_expression s6) (GOTO postfix_expression s7) (GOTO unary_expression s8) (GOTO unary_operator s9) (GOTO cast_expression s10) (GOTO multiplicative_expression s11) (GOTO additive_expression s12) (GOTO shift_expression s13) (GOTO relational_expression s14) (GOTO equality_expression s15) (GOTO and_expression s16) (GOTO exclusive_or_expression s17) (GOTO inclusive_or_expression s18) (GOTO logical_and_expression s19) (GOTO logical_or_expression s20) (GOTO conditional_expression s21) (GOTO assignment_expression s241))
 (STATE s241 (COMMENT argument_expression_list "=>" argument_expression_list COMMA assignment_expression ".") (REDUCE () r15))
 (STATE s242 (COMMENT postfix_expression "=>" postfix_expression PTR_OP IDENTIFIER ".") (REDUCE () r11))
 (STATE s243 (COMMENT *start "=>" primary_expression *EOF* ".") (REDUCE () r1)))
